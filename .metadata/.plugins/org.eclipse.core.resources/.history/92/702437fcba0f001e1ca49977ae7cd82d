.syntax unified
.thumb
.text

@ Simbolos exportados
.global asm_svc
.global asm_sum
.global asm_zeros
.global asm_productoEscalar32
.global asm_productoEscalar16
.global asm_productoEscalar16Sat
.global asm_filtroVentana10
.global asm_pack32to16
.global asm_max
.global asm_downsampleM
.global asm_invertir
.global asm_ecoV1
.global asm_ecoV2
.global asm_ecoV3
.global asm_corrV1
.global asm_corrV2


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
        bx lr


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   uint32_t asm_sum (uint32_t firstOperand, uint32_t secondOperand);
@
@ Parámetros recibidos:
@   r0: firstOperand
@   r1: secondOperand
@
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
                    @ es la direccion, en el codigo del programa, de la
                    @ instruccion "bl asm_sum" usada para saltar a
                    @ esta funcion, entonces "lr" contiene ese "pc" + 4).
                    @ el valor de retorno debe quedar en el registro r0.
                    @ En este caso, r0 es el resultado de r0 + r1.

        @ Otras alternativas para el retorno
        @ mov pc,lr
        @ bx lr
        @ push {lr} ... pop {pc}


/* EJERCICIO 1 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_zeros(uint32_t *vector, uint32_t longitud);
@
@ Parámetros recibidos:
@   R0: vector
@   R1: longitud
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_zeros:
    	MOV R2, #0   						@ zero = 0
    asm_zeros_loop:							@ loop
    	SUBS R1, R1, #1						@ longitud -= 1
        STR R2, [R0, R1, LSL #2]			@ *(vector + longitud * 4) = zero
        BNE asm_zeros_loop					@ if longitud > 0 -> repetir bucle
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 2 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar);
@
@ Parámetros recibidos:
@   R0: vectorIn
@   R1: vectorOut
@	R2: longitud
@	R3: escalar
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar32:
    	push {R4}							@ se gurda R4 en el stack
    asm_productoEscalar32_loop:				@ loop
    	SUBS R2, R2, #1						@ longitud -= 1
    	LDR R4, [R0, R2, LSL #2]			@ var = *(vectorIn + longitud * 4)
    	MUL R4, R4, R3						@ var = var * escalar
        STR R4, [R1, R2, LSL #2]			@ *(vectorOut + longitud * 4) = var
        BNE asm_productoEscalar32_loop		@ if longitud > 0 -> repetir bucle
        pop {R4}							@ se recupera el valor original de R4 desde el stack
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 3 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar);
@
@ Parámetros recibidos:
@   R0: vectorIn
@   R1: vectorOut
@	R2: longitud
@	R3: escalar
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_productoEscalar16:
    	push {R4}							@ se gurda R4 en el stack
    asm_productoEscalar16_loop:				@ loop
		SUBS R2, R2, #1						@ longitud -= 1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
		MUL R4, R4, R3						@ var = var * escalar
		STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
		BNE asm_productoEscalar16_loop		@ if longitud > 0 -> repetir bucle
        pop {R4}							@ se recupera el valor original de R4 desde el stack
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 4 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_productoEscalar16Sat(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar);
@
@ Parámetros recibidos:
@   R0: vectorIn
@   R1: vectorOut
@	R2: longitud
@	R3: escalar
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar16Sat:
    	push {R4}							@ se gurda R4 en el stack
    asm_productoEscalar16Sat_loop:			@ loop
		SUBS R2, R2, #1						@ longitud -= 1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
		MUL R4, R4, R3						@ var = var * escalar
		USAT R4, #12, R4					@ saturación en el bit 12
	    STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
	    BNE asm_productoEscalar16Sat_loop	@ if longitud > 0 -> repetir bucle
        pop {R4}							@ se recupera el valor original de R4 desde el stack
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 5 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitudVectorIn);
@
@ Parámetros recibidos:
@   R0: vectorIn
@	R1: vectorOut
@	R2: longitudVectorIn
@
@ Valor de retorno:
@   R0: -
@
#define WINDOWSIZE 11

.thumb_func
	asm_filtroVentana10:
		PUSH {R4 - R9}						@ se resguardan registros en STACK
		SUB R2, R2, 1						@ longitudVectorIn--;
		MOV R3, R2							@ i = longitudVectorIn;

@ BEGIN LOOP EXTERNO --------------------------------------------------------------------
	asm_filtroVentana10_loop1:				@ loop externo
		MOV R4, 0							@ sum = 0;
		MOV R9, #WINDOWSIZE					@ R9 = WINDOWSIZE
		ADD R5, R3, R9, LSR #1				@ upperLimit = i + (WINDOWSIZE / 2);
		SUB R6, R3, R9, LSR #1				@ lowerLimit = i - (WINDOWSIZE / 2);

@ BEGIN LOOP INTERNO --------------------------------------------------------------------
		MOV R7, R5							@ j = upperLimit;
	asm_filtroVentana10_loop2:				@ loop interno
		@ IF TRUE
		CMP R7, #0							@ j - 0;
		BLT asm_filtroVentana10_else		@ if(j < 0) --> else
		CMP R7, R2							@ j - longitudVectorIn;
		BGT asm_filtroVentana10_else		@ if(j > longitudVectorIn) --> else
		LDRH R8, [R0, R7, LSL 1]			@ R8 = vectorIn[j];
		ADD R4, R4, R8						@ sum += R8; sum += vectorIn[j];
		@ ELSE
	asm_filtroVentana10_else:
		SUB R7, R7, #1						@ j--;
		CMP R7, R6							@ j - lowerLimit;
		BGE asm_filtroVentana10_loop2		@ if(j >= lowerLimit) --> loop2 again
@ END LOOP INTERNO --------------------------------------------------------------------

		SDIV R4, R4, R9						@ sum = sum / WINDOWSIZE;
		STRH R4, [R1, R3, LSL 1]			@ vectorOut[i] = sum / WINDOWSIZE;

		SUBS R3, R3, #1						@ i--; Y se activan banderas
		BPL asm_filtroVentana10_loop1		@ se repite loop
@ END LOOP EXTERNO --------------------------------------------------------------------

		POP {R4 - R9}						@ se recuperan registros desde STACK
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 6 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_pack32to16(int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud);
@
@ Parámetros recibidos:
@   R0: vectorIn
@	R1: vectorOut
@	R2: longitud
@
@ Valor de retorno:
@   R0: -
@
#define MAXSIZEBITS	16

.thumb_func
	asm_pack32to16:

	asm_pack32to16_loop:					@ loop
		SUBS R2, R2, #1						@ longitud--;
		LDR R3, [R0, R2, LSL #2]			@ aux = *(vectorIn + longitud * 4)
		ASR	R3, #MAXSIZEBITS				@ aux >> MAXSIZEBITS;
		STRH R3, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 2) = aux
		BNE asm_pack32to16_loop				@ if(longitud > 0) -> repetir bucle

		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 7 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   int32_t asm_max(int32_t * vectorIn, uint32_t longitud);
@
@ Parámetros recibidos:
@   R0: vectorIn
@	R1: longitud
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_max:
		LDR R2, [R0]						@ max = vectorIn[0];

	asm_max_loop: 							@ loop
		SUBS R1, R1, #1						@ longitud--;
		LDR R3, [R0, R1, LSL #2]			@ var = *(vectorIn + longitud * 4)
		CMP R3, R2							@ var - longitud;
		BLE asm_max_else					@ if(vectorIn[longitud] <= max) --> else
		MOV R2, R3							@ max = vectorIn[longitud - 1];

	asm_max_else:
		CMP R1, #0							@ longitud - 0; Y se activan banderas
		BNE asm_max_loop					@ if(longitud > 0) --> repetir bucle
		MOV R0, R2							@ return max;

		BX LR								@ retornar a la función llamadora (caller)

/* EJERCICIO 8 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_downsampleM(int32_t * vectorIn, int32_t * vectorOut, uint32_t longitud, uint32_t N);
@
@ Parámetros recibidos:
@   R0: vectorIn
@	R1: vectorOut
@	R2: longitud
@	R3: N
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_downsampleM:
		PUSH {R4 - R6}						@ se resguardan registros en STACK
		MOV R4, #0							@ index = 0;
		MOV R5, #1							@ i = 1;

	asm_downsampleM_loop1:					@ loop1
		UDIV R6, R5, R3						@ resultado1 = i / N;
		MUL R6, R6, R3						@ resultado2 = resultado1 * N;
		SUBS R6, R5, R6						@ resto = i - resultado2; // Resto
		BEQ asm_downsampleM_else			@ if(resto == 0) --> else

		SUB R5, R5, #1						@ i--;
		LDR R6, [R0, R5, LSL #2]			@ R6 = *(vectorIn + i)
		ADD R5, #1							@ i++;
		STR R6, [R1, R4, LSL #2]			@ *(vectorOut + index) = R6;
		ADD R4, #1							@ index++;

	asm_downsampleM_else:					@ else
		ADD R5, #1							@ i++;
		CMP R2, R5							@ longitud - i;
		BHS asm_downsampleM_loop1			@ if(longitud >= i) --> repetir loop1

	asm_downsampleM_loop2:					@ loop2
		MOV R5, #0							@ R5 = 0;
		STR R5, [R1, R4, LSL #2]			@ *(vectorOut + index) = R5;
		ADD R4, #1							@ index++;
		CMP R2, R4							@ longitud - index;
		BHI asm_downsampleM_loop2			@ if(longitud > index) --> repetir loop2

		POP {R4 - R6}						@ se recuperan registros desde STACK
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 9 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_invertir(uint16_t * vector, uint32_t longitud);
@
@ Parámetros recibidos:
@   R0: vector
@	R1: longitud
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_invertir:
		PUSH {R4 - R6}						@ se resguardan registros en STACK
		MOV R2, #0							@ i = 0;
		MOV R3, R1, LSR #1					@ R3 = longitud / 2;

	asm_invertir_loop:						@ loop
		LDRH R4, [R0, R2, LSL #1]			@ aux1 = *(vector + i)
		SUB R5, R1, R2						@ R5 = longitud - i;
		SUB R5, R5, #1						@ R5--;
		LDRH R6, [R0, R5, LSL #1]			@ aux2 = *(vector + (longitud - i));
		STRH R6, [R0, R2, LSL #1]			@ *(vector + i) = aux2;
		STRH R4, [R0, R5, LSL #1]			@ *(vector + (longitud - i)) = aux1;

		ADD R2, #1							@ i++;
		CMP R3, R2							@ (longitud / 2) - i;
		BHI asm_invertir_loop				@ if(longitud > i) --> repetir bucle

		POP {R4 - R6}						@ se recuperan registros desde STACK
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 10.1 -------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_ecoV1(int16_t *vectorIn, int16_t *vectorOut, uint16_t bufferSize, uint16_t samplingRate, uint16_t delay_ms);
@
@ Parámetros recibidos:
@   R0: vectorIn
@	R1: vectorOut
@	R2: bufferSize
@	R3: samplingRate
@	STACK: delay_ms
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV1:
		PUSH {R4 - R9}					@ se resguardan registros en STACK
		LDRH R4, [SP, #24]				@ se obtiene el quinto parámetro. Se toma 24 biytes arriba porque
										@ se han guardado R4 A R9 en el stack.
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
		MOV R6, #1000					@ R6  = 1000;
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;

	asm_ecoV1_loop:						@ loop
		CMP R2, R5						@ bufferSize - delay_samples;
		BLS asm_ecoV1_else				@ if(bufferSize < delay_samples) --> ir al else
		MOV R6, R2						@ R6 = bufferSize;
		SUB R6, R6, #1					@ R6 = bufferSize - 1;
		MOV R7, R6						@ R7 = bufferSize - 1;
		SUB R7, R7, R5					@ R7 = bufferSize - 1 - delay_samples;
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorIn[bufferSize - 1];
		LDRSH R9, [R0, R7, LSL #1]		@ R9 = vectorIn[bufferSize - 1 - delay_samples;
		ADD R8, R8, R9, ASR #1			@ R8 = vectorIn[bufferSize - 1] + vectorIn[bufferSize - 1 - delay_samples] / 2;
		STRH R8, [R1, R6, LSL #1]		@ vectorOut[bufferSize - 1] = R8;
		B asm_ecoV1_end_if				@ cuando termina el if, se va al final

	asm_ecoV1_else:
		MOV R6, R2						@ R6 = bufferSize;
		SUB R6, R6, #1					@ R6 = bufferSize - 1;
		LDRSH R7, [R0, R6, LSL #1]		@ R7 = vectorIn[bufferSize - 1];
		STRH R7, [R1, R6, LSL #1]		@ vectorOut[bufferSize - 1] = R7;

	asm_ecoV1_end_if:
		SUBS R2, R2, #1					@ bufferSize--;
		CMP R2, #0						@ bufferSize - 0;
		BNE asm_ecoV1_loop				@ if(bufferSize > 0) --> repetir bucle

		POP {R4 - R9}					@ se recuperan registros desde STACK
		BX LR							@ retornar a la función llamadora (caller)


/* EJERCICIO 10.2 -------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_ecoV2(int16_t *vectorIn, int16_t *vectorOut, uint16_t bufferSize, uint16_t samplingRate, uint16_t delay_ms);
@
@ Parámetros recibidos:
@   R0: vectorIn
@	R1: vectorOut
@	R2: bufferSize
@	R3: samplingRate
@	STACK: delay_ms
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV2:
		PUSH {R4 - R8}					@ se resguardan registros en STACK
		LDRH R4, [SP, #20]				@ se obtiene el quinto parámetro. Se toma 20 biytes arriba porque
										@ se han guardado R4 A R8 en el stack.
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
		MOV R6, #1000					@ R6  = 1000;
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
		MOV R6, #0						@ i = 0;

	asm_ecoV2_loop:						@ loop
		CMP R5, R6						@ delay_samples - i;
		BLS asm_ecoV2_else				@ if(i >= delay_samples) --> ir al else
		LDRSH R7, [R0, R6, LSL #1]		@ R7 = vectorIn[i];
		STRH R7, [R1, R6, LSL #1]		@ vectorOut[i] = R7;
		B asm_ecoV2_end_if				@ cuando termina el if, se va al final

	asm_ecoV2_else:
		SUB R7, R6, R5					@ aux = i - delay_samples;
		LDRSH R7, [R0, R7, LSL #1]		@ aux = vectorIn[aux];
		MOV R7, R7, LSR #1				@ aux /= 2;
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorIn[i];
		ADD R8, R8, R7					@ R8 = vectorIn[i] + aux;
		STRH R8, [R1, R6, LSL #1]		@ vectorOut[i] = R8;

	asm_ecoV2_end_if:
		ADDS R6, R6, #1					@ i++;
		CMP R2, R6						@ bufferSize - i;
		BHI asm_ecoV2_loop				@ if(bufferSize > i) --> repetir bucle

		POP {R4 - R8}					@ se recuperan registros desde STACK
		BX LR							@ retornar a la función llamadora (caller)


/* EJERCICIO 10.3 -------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_ecoV3(int16_t *vectorIn, int16_t *vectorOut, uint16_t bufferSize, uint16_t samplingRate, uint16_t delay_ms);
@
@ Parámetros recibidos:
@   R0: vectorIn
@	R1: vectorOut
@	R2: bufferSize
@	R3: samplingRate
@	STACK: delay_ms
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV3:
		PUSH {R4 - R9}					@ se resguardan registros en STACK
		LDRH R4, [SP, #24]				@ se obtiene el quinto parámetro. Se toma 24 biytes arriba porque
										@ se han guardado R4 A R9 en el stack.
		MOV R2, R2, LSR #1				@ bufferSize = bufferSize / 2;
		MOV R3, R3, LSR #1				@ samplingRate = samplingRate / 2;
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
		MOV R6, #1000					@ R6  = 1000;
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
		MOV R6, #0						@ i = 0;
		MOV R9, #0						@ aux2 = 0;

	asm_ecoV3_loop:						@ loop
		CMP R5, R6						@ delay_samples - i;
		BLS asm_ecoV3_else				@ if(i >= delay_samples) --> ir al else
		LDR R7, [R0, R6, LSL #2]		@ R7 = vectorIn[i];
		STR R7, [R1, R6, LSL #2]		@ vectorOut[i] = R7;
		B asm_ecoV3_end_if				@ cuando termina el if, se va al final

	asm_ecoV3_else:
		SUB R7, R6, R5					@ aux = i - delay_samples;
		LDR R7, [R0, R7, LSL #2]		@ aux = vectorIn[aux];
		SHADD16 R7, R7, R9				@ aux = (aux + 0) / 2;
		LDR R8, [R0, R6, LSL #2]		@ R8 = vectorIn[i];
		SADD16 R8, R8, R7				@ R8 = vectorIn[i] + aux;
		STR R8, [R1, R6, LSL #2]		@ vectorOut[i] = R8;

	asm_ecoV3_end_if:
		ADDS R6, R6, #1					@ i++;
		CMP R2, R6						@ bufferSize - i;
		BHI asm_ecoV3_loop				@ if(bufferSize > i) --> repetir bucle

		POP {R4 - R9}					@ se recuperan registros desde STACK
		BX LR							@ retornar a la función llamadora (caller)


/* EJERCICIO 11.1 -------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_corrV1(int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud);

@ Parámetros recibidos:
@   R0: vectorX
@	R1: vectorY
@	R2: vectorCorr
@	R3: longitud
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_corrV1:
		PUSH {R4 - R8}					@ se resguardan registros en STACK
		MOV R4, #0						@ l = 0;

	asm_corrV1_loop1:					@ loop 1
		MOV R5, #0						@ sum = 0;
		MOV R6, #0						@ n = 0;

	asm_corrV1_loop2:					@ loop 2
		SUBS R7, R6, R4					@ n - l;
		BLT	asm_corrV1_else				@ if(n - l) < 0 --> ir al else
		LDRSH R7, [R1, R7, LSL #1]		@ R7 = vectorY[n - l];
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorX[n];
		MUL R7, R7, R8					@ R7 = vectorY[n - l] * vectorX[n];
		ADD R5, R5, R7					@ sum += (vectorY[n - l] * vectorX[n]);

	asm_corrV1_else:					@ else
		ADD R6, R6, #1					@ n++;
		CMP R3, R6						@ longitud - n;
		BHI asm_corrV1_loop2			@ if(longitud > n) --> repetir bucle interno
		STRH R5, [R2, R4, LSL #1]		@ vectorCorr[l] = sum;
		ADD R4, R4, #1					@ l++;
		CMP R3, R4						@ longitud - l;
		BHI asm_corrV1_loop1			@ if(longitud > l) --> repetir buble externo

		POP {R4 - R8}					@ se recuperan registros desde STACK
		BX LR							@ retornar a la función llamadora (caller)


/* EJERCICIO 11.2 -------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_corrV2(int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud);

@ Parámetros recibidos:
@   R0: vectorX
@	R1: vectorY
@	R2: vectorCorr
@	R3: longitud
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_corrV2:
		PUSH {R4 - R8}					@ se resguardan registros en STACK
		MOV R4, #0						@ l = 0;

	asm_corrV2_loop1:					@ loop 1
		MOV R5, #0						@ sum = 0;
		MOV R6, #0						@ n = 0;

	asm_corrV2_loop2:					@ loop 2
		SUBS R7, R6, R4					@ n - l;
		BLT	asm_corrV2_else				@ if(n - l) < 0 --> ir al else
		LDR R7, [R1, R7, LSL #2]		@ R7 = vectorY[n - l];
		LDR R8, [R0, R6, LSL #2]		@ R8 = vectorX[n];
		SMUAD R7, R7, R8				@ R7 = (vectorY[n - l] * vectorX[n]) + (vectorY[n + 1 - l] * vectorX[n + 1]);
		ADD R5, R5, R7					@ sum += R7;

	asm_corrV2_else:					@ else
		ADD R6, R6, #1					@ n++;
		CMP R3, R6						@ longitud - n;
		BHI asm_corrV2_loop2			@ if(longitud > n) --> repetir bucle interno
		STRH R5, [R2, R4, LSL #1]		@ vectorCorr[l] = sum;
		ADD R4, R4, #1					@ l++;
		CMP R3, R4						@ longitud - l;
		BHI asm_corrV2_loop1			@ if(longitud > l) --> repetir buble externo

		POP {R4 - R8}					@ se recuperan registros desde STACK
		BX LR							@ retornar a la función llamadora (caller)

