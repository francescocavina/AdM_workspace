.syntax unified
.thumb
.text

@ Simbolos exportados
.global asm_svc
.global asm_sum
.global asm_zeros
.global asm_productoEscalar32
.global asm_productoEscalar16
.global asm_productoEscalar16Sat


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
        bx lr


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   uint32_t asm_sum (uint32_t firstOperand, uint32_t secondOperand);
@
@ Parametros recibidos:
@   r0: firstOperand
@   r1: secondOperand
@
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
                    @ es la direccion, en el codigo del programa, de la
                    @ instruccion "bl asm_sum" usada para saltar a
                    @ esta funcion, entonces "lr" contiene ese "pc" + 4).
                    @ el valor de retorno debe quedar en el registro r0.
                    @ En este caso, r0 es el resultado de r0 + r1.

        @ Otras alternativas para el retorno
        @ mov pc,lr
        @ bx lr
        @ push {lr} ... pop {pc}


/* EJERCICIO 1 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_zeros(uint32_t *vector, uint32_t longitud);
@
@ Parametros recibidos:
@   R0: vector
@   R1: longitud
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_zeros:
    	MOV R2, #0   						@ zero = 0
    asm_zeros_loop:							@ loop
    	SUBS R1, R1, #1						@ longitud -= 1
        STR R2, [R0, R1, LSL #2]			@ *(vector + longitud * 4) = zero
        BNE asm_zeros_loop					@ if longitud > 0 -> repetir bucle
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 2 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar);
@
@ Parametros recibidos:
@   R0: vectorIn
@   R1: vectorOut
@	R2: longitud
@	R3: escalar
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar32:
    	push {R4}							@ se gurda R4 en el stack
    asm_productoEscalar32_loop:				@ loop
    	SUBS R2, R2, #1						@ longitud -= 1
    	LDR R4, [R0, R2, LSL #2]			@ var = *(vectorIn + longitud * 4)
    	MUL R4, R4, R3						@ var = var * escalar
        STR R4, [R1, R2, LSL #2]			@ *(vectorOut + longitud * 4) = var
        BNE asm_productoEscalar32_loop:		@ if longitud > 0 -> repetir bucle
        pop {R4}							@ se recupera el valor de R4 desde el stack
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 3 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar);
@
@ Parametros recibidos:
@   R0: vectorIn
@   R1: vectorOut
@	R2: longitud
@	R3: escalar
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_productoEscalar16:
    	push {R4}							@ se gurda R4 en el stack
    asm_productoEscalar16_loop:				@ loop
		SUBS R2, R2, #1						@ longitud -= 1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
		MUL R4, R4, R3						@ var = var * escalar
		STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
		BNE asm_productoEscalar16_loop:		@ if longitud > 0 -> repetir bucle
        pop {R4}							@ se recupera el valor de R4 desde el stack
		BX LR								@ retornar a la función llamadora (caller)


/* EJERCICIO 4 ---------------------------------------------------------------*/
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_productoEscalar16Sat(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar);
@
@ Parametros recibidos:
@   R0: vectorIn
@   R1: vectorOut
@	R2: longitud
@	R3: escalar
@
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar16Sat:
    	push {R4}							@ se gurda R4 en el stack
    asm_productoEscalar16Sat_loop:			@ loop
		SUBS R2, R2, #1						@ longitud -= 1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
		MUL R4, R4, R3						@ var = var * escalar
		USAT R4, #12, R4					@ saturación en el bit 12
	    STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
	    BNE asm_productoEscalar16Sat_loop:	@ if longitud > 0 -> repetir bucle
        pop {R4}							@ se recupera el valor de R4 desde el stack
		BX LR								@ retornar a la función llamadora (caller)

