/*
 * c_func.c
 *
 *  Created on: Jun 17, 2023
 *      Author: Francesco Cavina
 */


#include <c_func.h>


#define MAX_BITS_SATURATION 	12		// EJERCICIO 4
#define WINDOWSIZE 				11		// EJERCICIO 5
#define MAXSIZE 				65536	// EJERCICIO 6
#define MAXSIZEBITS 			16		// EJERCICIO 6



/* EJERCICIO 1 ---------------------------------------------------------------*/
void c_zeros(uint32_t *vector, uint32_t longitud) {

	for(; longitud > 0; longitud--) {
		vector[longitud-1] = 0;
	}
}


/* EJERCICIO 2 ---------------------------------------------------------------*/
void c_productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar) {

	for(; longitud > 0; longitud--) {
		vectorOut[longitud-1] = vectorIn[longitud-1] * escalar;
	}
}


/* EJERCICIO 3 ---------------------------------------------------------------*/
void c_productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar) {

	for(; longitud > 0; longitud--) {
		vectorOut[longitud-1] = vectorIn[longitud-1] * escalar;
	}
}


/* EJERCICIO 4 ---------------------------------------------------------------*/
void c_productoEscalarSat16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar) {

	int result = 0;

	for(; longitud > 0; longitud--) {

		result = vectorIn[longitud-1] * escalar;

		if(result >= 0 && result <= ((uint16_t) pow(2, MAX_BITS_SATURATION) - 1)) {
			vectorOut[longitud-1] = result;
		} else {
			vectorOut[longitud-1] = ((uint16_t) pow(2, MAX_BITS_SATURATION - 1));
		}
	}
}


/* EJERCICIO 5 ---------------------------------------------------------------*/
void c_filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitudVectorIn) {

	uint16_t sum;

	longitudVectorIn--;

	for(int16_t i = longitudVectorIn; i >= 0; i--) {

		sum = 0;

		int16_t upperLimit = i + (WINDOWSIZE / 2);
		int16_t lowerLimit = i - (WINDOWSIZE / 2);

		for(int16_t j = upperLimit; j >= lowerLimit; j--) {

			if(j >= 0 && j <= longitudVectorIn) {

				sum += vectorIn[j];
			}
		}

		vectorOut[i] = sum / WINDOWSIZE;
	}
}


/* EJERCICIO 6 ---------------------------------------------------------------*/
void c_pack32to16(int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud) {

	uint32_t aux = 0;

	for(; longitud > 0; longitud--) {

		aux = vectorIn[longitud - 1];
		aux = (aux >> 16) & 0xFFFF;
		vectorOut[longitud - 1] = aux;
	}
}


/* EJERCICIO 7 ---------------------------------------------------------------*/
int32_t c_max(int32_t * vectorIn, uint32_t longitud) {

	int32_t max = vectorIn[0];

	for(; longitud > 0; longitud--) {

		if(vectorIn[longitud - 1] > max) {

			max = vectorIn[longitud - 1];
		}
	}

	return max;
}


/* EJERCICIO 8 ---------------------------------------------------------------*/


/* EJERCICIO 9 ---------------------------------------------------------------*/


/* EJERCICIO 10.1 ------------------------------------------------------------*/


/* EJERCICIO 10.2 ------------------------------------------------------------*/


/* EJERCICIO 10.3 ------------------------------------------------------------*/


/* EJERCICIO 11 --------------------------------------------------------------*/

