
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800491c  0800491c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004924  08004924  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800492c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000ef49  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fe56  00000000  00000000  0002efe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000209d  00000000  00000000  0003ee3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c88  00000000  00000000  00040ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dbfcb  00000000  00000000  00041b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ba0  00000000  00000000  0011db38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025329  00000000  00000000  0011e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143a01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e14  00000000  00000000  00143a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080047a4 	.word	0x080047a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080047a4 	.word	0x080047a4

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_zeros:
    	MOV R2, #0   						@ zero = 0
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <asm_zeros_loop>:
    asm_zeros_loop:							@ loop
    	SUBS R1, R1, #1						@ longitud -= 1
 80001fc:	3901      	subs	r1, #1
        STR R2, [R0, R1, LSL #2]			@ *(vector + longitud * 4) = zero
 80001fe:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
        BNE asm_zeros_loop					@ if longitud > 0 -> repetir bucle
 8000202:	d1fb      	bne.n	80001fc <asm_zeros_loop>
		BX LR								@ retornar a la función llamadora (caller)
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar32:
    	push {R4}							@ se gurda R4 en el stack
 8000206:	b410      	push	{r4}

08000208 <asm_productoEscalar32_loop>:
    asm_productoEscalar32_loop:				@ loop
    	SUBS R2, R2, #1						@ longitud -= 1
 8000208:	3a01      	subs	r2, #1
    	LDR R4, [R0, R2, LSL #2]			@ var = *(vectorIn + longitud * 4)
 800020a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	MUL R4, R4, R3						@ var = var * escalar
 800020e:	fb04 f403 	mul.w	r4, r4, r3
        STR R4, [R1, R2, LSL #2]			@ *(vectorOut + longitud * 4) = var
 8000212:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
        BNE asm_productoEscalar32_loop		@ if longitud > 0 -> repetir bucle
 8000216:	d1f7      	bne.n	8000208 <asm_productoEscalar32_loop>
        pop {R4}							@ se recupera el valor original de R4 desde el stack
 8000218:	bc10      	pop	{r4}
		BX LR								@ retornar a la función llamadora (caller)
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar16>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_productoEscalar16:
    	push {R4}							@ se gurda R4 en el stack
 800021c:	b410      	push	{r4}

0800021e <asm_productoEscalar16_loop>:
    asm_productoEscalar16_loop:				@ loop
		SUBS R2, R2, #1						@ longitud -= 1
 800021e:	3a01      	subs	r2, #1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
 8000220:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
		MUL R4, R4, R3						@ var = var * escalar
 8000224:	fb04 f403 	mul.w	r4, r4, r3
		STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
 8000228:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
		BNE asm_productoEscalar16_loop		@ if longitud > 0 -> repetir bucle
 800022c:	d1f7      	bne.n	800021e <asm_productoEscalar16_loop>
        pop {R4}							@ se recupera el valor original de R4 desde el stack
 800022e:	bc10      	pop	{r4}
		BX LR								@ retornar a la función llamadora (caller)
 8000230:	4770      	bx	lr

08000232 <asm_productoEscalar16Sat>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar16Sat:
    	push {R4}							@ se gurda R4 en el stack
 8000232:	b410      	push	{r4}

08000234 <asm_productoEscalar16Sat_loop>:
    asm_productoEscalar16Sat_loop:			@ loop
		SUBS R2, R2, #1						@ longitud -= 1
 8000234:	3a01      	subs	r2, #1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
 8000236:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
		MUL R4, R4, R3						@ var = var * escalar
 800023a:	fb04 f403 	mul.w	r4, r4, r3
		USAT R4, #12, R4					@ saturación en el bit 12
 800023e:	f384 040c 	usat	r4, #12, r4
	    STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
 8000242:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	    BNE asm_productoEscalar16Sat_loop	@ if longitud > 0 -> repetir bucle
 8000246:	d1f5      	bne.n	8000234 <asm_productoEscalar16Sat_loop>
        pop {R4}							@ se recupera el valor original de R4 desde el stack
 8000248:	bc10      	pop	{r4}
		BX LR								@ retornar a la función llamadora (caller)
 800024a:	4770      	bx	lr

0800024c <asm_filtroVentana10>:
@
#define WINDOWSIZE 11

.thumb_func
	asm_filtroVentana10:
		PUSH {R4 - R9}						@ se resguardan registros en STACK
 800024c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
		SUB R2, R2, 1						@ longitudVectorIn--;
 8000250:	f1a2 0201 	sub.w	r2, r2, #1
		MOV R3, R2							@ i = longitudVectorIn;
 8000254:	4613      	mov	r3, r2

08000256 <asm_filtroVentana10_loop1>:

@ BEGIN LOOP EXTERNO --------------------------------------------------------------------
	asm_filtroVentana10_loop1:				@ loop externo
		MOV R4, 0							@ sum = 0;
 8000256:	f04f 0400 	mov.w	r4, #0
		MOV R9, #WINDOWSIZE					@ R9 = WINDOWSIZE
 800025a:	f04f 090b 	mov.w	r9, #11
		ADD R5, R3, R9, LSR #1				@ upperLimit = i + (WINDOWSIZE / 2);
 800025e:	eb03 0559 	add.w	r5, r3, r9, lsr #1
		SUB R6, R3, R9, LSR #1				@ lowerLimit = i - (WINDOWSIZE / 2);
 8000262:	eba3 0659 	sub.w	r6, r3, r9, lsr #1

@ BEGIN LOOP INTERNO --------------------------------------------------------------------
		MOV R7, R5							@ j = upperLimit;
 8000266:	462f      	mov	r7, r5

08000268 <asm_filtroVentana10_loop2>:
	asm_filtroVentana10_loop2:				@ loop interno
		@ IF TRUE
		CMP R7, #0							@ j - 0;
 8000268:	2f00      	cmp	r7, #0
		BLT asm_filtroVentana10_else		@ if(j < 0) --> else
 800026a:	db04      	blt.n	8000276 <asm_filtroVentana10_else>
		CMP R7, R2							@ j - longitudVectorIn;
 800026c:	4297      	cmp	r7, r2
		BGT asm_filtroVentana10_else		@ if(j > longitudVectorIn) --> else
 800026e:	dc02      	bgt.n	8000276 <asm_filtroVentana10_else>
		LDRH R8, [R0, R7, LSL 1]			@ R8 = vectorIn[j];
 8000270:	f830 8017 	ldrh.w	r8, [r0, r7, lsl #1]
		ADD R4, R4, R8						@ sum += R8; sum += vectorIn[j];
 8000274:	4444      	add	r4, r8

08000276 <asm_filtroVentana10_else>:
		@ ELSE
	asm_filtroVentana10_else:
		SUB R7, R7, #1						@ j--;
 8000276:	f1a7 0701 	sub.w	r7, r7, #1
		CMP R7, R6							@ j - lowerLimit;
 800027a:	42b7      	cmp	r7, r6
		BGE asm_filtroVentana10_loop2		@ if(j >= lowerLimit) --> loop2 again
 800027c:	daf4      	bge.n	8000268 <asm_filtroVentana10_loop2>
@ END LOOP INTERNO --------------------------------------------------------------------

		SDIV R4, R4, R9						@ sum = sum / WINDOWSIZE;
 800027e:	fb94 f4f9 	sdiv	r4, r4, r9
		STRH R4, [R1, R3, LSL 1]			@ vectorOut[i] = sum / WINDOWSIZE;
 8000282:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]

		SUBS R3, R3, #1						@ i--; Y se activan banderas
 8000286:	3b01      	subs	r3, #1
		BPL asm_filtroVentana10_loop1		@ se repite loop
 8000288:	d5e5      	bpl.n	8000256 <asm_filtroVentana10_loop1>
@ END LOOP EXTERNO --------------------------------------------------------------------

		POP {R4 - R9}						@ se recuperan registros desde STACK
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
		BX LR								@ retornar a la función llamadora (caller)
 800028e:	4770      	bx	lr

08000290 <asm_pack32to16>:

.thumb_func
	asm_pack32to16:

	asm_pack32to16_loop:					@ loop
		SUBS R2, R2, #1						@ longitud--;
 8000290:	3a01      	subs	r2, #1
		LDR R3, [R0, R2, LSL #2]			@ aux = *(vectorIn + longitud * 4)
 8000292:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
		ASR	R3, #MAXSIZEBITS				@ aux >> MAXSIZEBITS;
 8000296:	ea4f 4323 	mov.w	r3, r3, asr #16
		STRH R3, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 2) = aux
 800029a:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
		BNE asm_pack32to16_loop				@ if(longitud > 0) -> repetir bucle
 800029e:	d1f7      	bne.n	8000290 <asm_pack32to16>

		BX LR								@ retornar a la función llamadora (caller)
 80002a0:	4770      	bx	lr

080002a2 <asm_max>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_max:
		LDR R2, [R0]						@ max = vectorIn[0];
 80002a2:	6802      	ldr	r2, [r0, #0]

080002a4 <asm_max_loop>:

	asm_max_loop: 							@ loop
		SUBS R1, R1, #1						@ longitud--;
 80002a4:	3901      	subs	r1, #1
		LDR R3, [R0, R1, LSL #2]			@ var = *(vectorIn + longitud * 4)
 80002a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
		CMP R3, R2							@ var - longitud;
 80002aa:	4293      	cmp	r3, r2
		BLE asm_max_else					@ if(vectorIn[longitud] <= max) --> else
 80002ac:	dd00      	ble.n	80002b0 <asm_max_else>
		MOV R2, R3							@ max = vectorIn[longitud - 1];
 80002ae:	461a      	mov	r2, r3

080002b0 <asm_max_else>:

	asm_max_else:
		CMP R1, #0							@ longitud - 0; Y se activan banderas
 80002b0:	2900      	cmp	r1, #0
		BNE asm_max_loop					@ if(longitud > 0) --> repetir bucle
 80002b2:	d1f7      	bne.n	80002a4 <asm_max_loop>
		MOV R0, R2							@ return max;
 80002b4:	4610      	mov	r0, r2

		BX LR								@ retornar a la función llamadora (caller)
 80002b6:	4770      	bx	lr

080002b8 <asm_downsampleM>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_downsampleM:
		PUSH {R4 - R6}						@ se resguardan registros en STACK
 80002b8:	b470      	push	{r4, r5, r6}
		MOV R4, #0							@ index = 0;
 80002ba:	f04f 0400 	mov.w	r4, #0
		MOV R5, #1							@ i = 1;
 80002be:	f04f 0501 	mov.w	r5, #1

080002c2 <asm_downsampleM_loop1>:

	asm_downsampleM_loop1:					@ loop1
		UDIV R6, R5, R3						@ resultado1 = i / N;
 80002c2:	fbb5 f6f3 	udiv	r6, r5, r3
		MUL R6, R6, R3						@ resultado2 = resultado1 * N;
 80002c6:	fb06 f603 	mul.w	r6, r6, r3
		SUBS R6, R5, R6						@ resto = i - resultado2; // Resto
 80002ca:	1bae      	subs	r6, r5, r6
		BEQ asm_downsampleM_else			@ if(resto == 0) --> else
 80002cc:	d009      	beq.n	80002e2 <asm_downsampleM_else>

		SUB R5, R5, #1						@ i--;
 80002ce:	f1a5 0501 	sub.w	r5, r5, #1
		LDR R6, [R0, R5, LSL #2]			@ R6 = *(vectorIn + i)
 80002d2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
		ADD R5, #1							@ i++;
 80002d6:	f105 0501 	add.w	r5, r5, #1
		STR R6, [R1, R4, LSL #2]			@ *(vectorOut + index) = R6;
 80002da:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
		ADD R4, #1							@ index++;
 80002de:	f104 0401 	add.w	r4, r4, #1

080002e2 <asm_downsampleM_else>:

	asm_downsampleM_else:					@ else
		ADD R5, #1							@ i++;
 80002e2:	f105 0501 	add.w	r5, r5, #1
		CMP R2, R5							@ longitud - i;
 80002e6:	42aa      	cmp	r2, r5
		BHS asm_downsampleM_loop1			@ if(longitud >= i) --> repetir loop1
 80002e8:	d2eb      	bcs.n	80002c2 <asm_downsampleM_loop1>

080002ea <asm_downsampleM_loop2>:

	asm_downsampleM_loop2:					@ loop2
		MOV R5, #0							@ R5 = 0;
 80002ea:	f04f 0500 	mov.w	r5, #0
		STR R5, [R1, R4, LSL #2]			@ *(vectorOut + index) = R5;
 80002ee:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
		ADD R4, #1							@ index++;
 80002f2:	f104 0401 	add.w	r4, r4, #1
		CMP R2, R4							@ longitud - index;
 80002f6:	42a2      	cmp	r2, r4
		BHI asm_downsampleM_loop2			@ if(longitud > index) --> repetir loop2
 80002f8:	d8f7      	bhi.n	80002ea <asm_downsampleM_loop2>

		POP {R4 - R6}						@ se recuperan registros desde STACK
 80002fa:	bc70      	pop	{r4, r5, r6}
		BX LR								@ retornar a la función llamadora (caller)
 80002fc:	4770      	bx	lr

080002fe <asm_invertir>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_invertir:
		PUSH {R4 - R6}						@ se resguardan registros en STACK
 80002fe:	b470      	push	{r4, r5, r6}
		MOV R2, #0							@ i = 0;
 8000300:	f04f 0200 	mov.w	r2, #0
		MOV R3, R1, LSR #1					@ R3 = longitud / 2;
 8000304:	ea4f 0351 	mov.w	r3, r1, lsr #1

08000308 <asm_invertir_loop>:

	asm_invertir_loop:						@ loop
		LDRH R4, [R0, R2, LSL #1]			@ aux1 = *(vector + i)
 8000308:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
		SUB R5, R1, R2						@ R5 = longitud - i;
 800030c:	eba1 0502 	sub.w	r5, r1, r2
		SUB R5, R5, #1						@ R5--;
 8000310:	f1a5 0501 	sub.w	r5, r5, #1
		LDRH R6, [R0, R5, LSL #1]			@ aux2 = *(vector + (longitud - i));
 8000314:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
		STRH R6, [R0, R2, LSL #1]			@ *(vector + i) = aux2;
 8000318:	f820 6012 	strh.w	r6, [r0, r2, lsl #1]
		STRH R4, [R0, R5, LSL #1]			@ *(vector + (longitud - i)) = aux1;
 800031c:	f820 4015 	strh.w	r4, [r0, r5, lsl #1]

		ADD R2, #1							@ i++;
 8000320:	f102 0201 	add.w	r2, r2, #1
		CMP R3, R2							@ (longitud / 2) - i;
 8000324:	4293      	cmp	r3, r2
		BHI asm_invertir_loop				@ if(longitud > i) --> repetir bucle
 8000326:	d8ef      	bhi.n	8000308 <asm_invertir_loop>

		POP {R4 - R6}						@ se recuperan registros desde STACK
 8000328:	bc70      	pop	{r4, r5, r6}
		BX LR								@ retornar a la función llamadora (caller)
 800032a:	4770      	bx	lr

0800032c <asm_ecoV1>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV1:
		PUSH {R4 - R9}					@ se resguardan registros en STACK
 800032c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
		LDRH R4, [SP, #24]				@ se obtiene el quinto parámetro. Se toma 24 biytes arriba porque
 8000330:	f8bd 4018 	ldrh.w	r4, [sp, #24]
										@ se han guardado R4 A R9 en el stack.
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
 8000334:	fb03 f504 	mul.w	r5, r3, r4
		MOV R6, #1000					@ R6  = 1000;
 8000338:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
 800033c:	fbb5 f5f6 	udiv	r5, r5, r6

08000340 <asm_ecoV1_loop>:

	asm_ecoV1_loop:						@ loop
		CMP R2, R5						@ bufferSize - delay_samples;
 8000340:	42aa      	cmp	r2, r5
		BLS asm_ecoV1_else				@ if(bufferSize < delay_samples) --> ir al else
 8000342:	d90e      	bls.n	8000362 <asm_ecoV1_else>
		MOV R6, R2						@ R6 = bufferSize;
 8000344:	4616      	mov	r6, r2
		SUB R6, R6, #1					@ R6 = bufferSize - 1;
 8000346:	f1a6 0601 	sub.w	r6, r6, #1
		MOV R7, R6						@ R7 = bufferSize - 1;
 800034a:	4637      	mov	r7, r6
		SUB R7, R7, R5					@ R7 = bufferSize - 1 - delay_samples;
 800034c:	eba7 0705 	sub.w	r7, r7, r5
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorIn[bufferSize - 1];
 8000350:	f930 8016 	ldrsh.w	r8, [r0, r6, lsl #1]
		LDRSH R9, [R0, R7, LSL #1]		@ R9 = vectorIn[bufferSize - 1 - delay_samples;
 8000354:	f930 9017 	ldrsh.w	r9, [r0, r7, lsl #1]
		ADD R8, R8, R9, ASR #1			@ R8 = vectorIn[bufferSize - 1] + vectorIn[bufferSize - 1 - delay_samples] / 2;
 8000358:	eb08 0869 	add.w	r8, r8, r9, asr #1
		STRH R8, [R1, R6, LSL #1]		@ vectorOut[bufferSize - 1] = R8;
 800035c:	f821 8016 	strh.w	r8, [r1, r6, lsl #1]
		B asm_ecoV1_end_if				@ cuando termina el if, se va al final
 8000360:	e006      	b.n	8000370 <asm_ecoV1_end_if>

08000362 <asm_ecoV1_else>:

	asm_ecoV1_else:
		MOV R6, R2						@ R6 = bufferSize;
 8000362:	4616      	mov	r6, r2
		SUB R6, R6, #1					@ R6 = bufferSize - 1;
 8000364:	f1a6 0601 	sub.w	r6, r6, #1
		LDRSH R7, [R0, R6, LSL #1]		@ R7 = vectorIn[bufferSize - 1];
 8000368:	f930 7016 	ldrsh.w	r7, [r0, r6, lsl #1]
		STRH R7, [R1, R6, LSL #1]		@ vectorOut[bufferSize - 1] = R7;
 800036c:	f821 7016 	strh.w	r7, [r1, r6, lsl #1]

08000370 <asm_ecoV1_end_if>:

	asm_ecoV1_end_if:
		SUBS R2, R2, #1					@ bufferSize--;
 8000370:	3a01      	subs	r2, #1
		CMP R2, #0						@ bufferSize - 0;
 8000372:	2a00      	cmp	r2, #0
		BNE asm_ecoV1_loop				@ if(bufferSize > 0) --> repetir bucle
 8000374:	d1e4      	bne.n	8000340 <asm_ecoV1_loop>

		POP {R4 - R9}					@ se recuperan registros desde STACK
 8000376:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
		BX LR							@ retornar a la función llamadora (caller)
 800037a:	4770      	bx	lr

0800037c <asm_ecoV2>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV2:
		PUSH {R4 - R8}					@ se resguardan registros en STACK
 800037c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
		LDRH R4, [SP, #20]				@ se obtiene el quinto parámetro. Se toma 20 biytes arriba porque
 8000380:	f8bd 4014 	ldrh.w	r4, [sp, #20]
										@ se han guardado R4 A R8 en el stack.
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
 8000384:	fb03 f504 	mul.w	r5, r3, r4
		MOV R6, #1000					@ R6  = 1000;
 8000388:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
 800038c:	fbb5 f5f6 	udiv	r5, r5, r6
		MOV R6, #0						@ i = 0;
 8000390:	f04f 0600 	mov.w	r6, #0

08000394 <asm_ecoV2_loop>:

	asm_ecoV2_loop:						@ loop
		CMP R5, R6						@ delay_samples - i;
 8000394:	42b5      	cmp	r5, r6
		BLS asm_ecoV2_else				@ if(i >= delay_samples) --> ir al else
 8000396:	d904      	bls.n	80003a2 <asm_ecoV2_else>
		LDRSH R7, [R0, R6, LSL #1]		@ R7 = vectorIn[i];
 8000398:	f930 7016 	ldrsh.w	r7, [r0, r6, lsl #1]
		STRH R7, [R1, R6, LSL #1]		@ vectorOut[i] = R7;
 800039c:	f821 7016 	strh.w	r7, [r1, r6, lsl #1]
		B asm_ecoV2_end_if				@ cuando termina el if, se va al final
 80003a0:	e00a      	b.n	80003b8 <asm_ecoV2_end_if>

080003a2 <asm_ecoV2_else>:

	asm_ecoV2_else:
		SUB R7, R6, R5					@ aux = i - delay_samples;
 80003a2:	eba6 0705 	sub.w	r7, r6, r5
		LDRSH R7, [R0, R7, LSL #1]		@ aux = vectorIn[aux];
 80003a6:	f930 7017 	ldrsh.w	r7, [r0, r7, lsl #1]
		MOV R7, R7, LSR #1				@ aux /= 2;
 80003aa:	ea4f 0757 	mov.w	r7, r7, lsr #1
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorIn[i];
 80003ae:	f930 8016 	ldrsh.w	r8, [r0, r6, lsl #1]
		ADD R8, R8, R7					@ R8 = vectorIn[i] + aux;
 80003b2:	44b8      	add	r8, r7
		STRH R8, [R1, R6, LSL #1]		@ vectorOut[i] = R8;
 80003b4:	f821 8016 	strh.w	r8, [r1, r6, lsl #1]

080003b8 <asm_ecoV2_end_if>:

	asm_ecoV2_end_if:
		ADDS R6, R6, #1					@ i++;
 80003b8:	3601      	adds	r6, #1
		CMP R2, R6						@ bufferSize - i;
 80003ba:	42b2      	cmp	r2, r6
		BHI asm_ecoV2_loop				@ if(bufferSize > i) --> repetir bucle
 80003bc:	d8ea      	bhi.n	8000394 <asm_ecoV2_loop>

		POP {R4 - R8}					@ se recuperan registros desde STACK
 80003be:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
		BX LR							@ retornar a la función llamadora (caller)
 80003c2:	4770      	bx	lr

080003c4 <asm_ecoV3>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV3:
		PUSH {R4 - R9}					@ se resguardan registros en STACK
 80003c4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
		LDRH R4, [SP, #24]				@ se obtiene el quinto parámetro. Se toma 24 biytes arriba porque
 80003c8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
										@ se han guardado R4 A R9 en el stack.
		MOV R2, R2, LSR #1				@ bufferSize = bufferSize / 2;
 80003cc:	ea4f 0252 	mov.w	r2, r2, lsr #1
		MOV R3, R3, LSR #1				@ samplingRate = samplingRate / 2;
 80003d0:	ea4f 0353 	mov.w	r3, r3, lsr #1
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
 80003d4:	fb03 f504 	mul.w	r5, r3, r4
		MOV R6, #1000					@ R6  = 1000;
 80003d8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
 80003dc:	fbb5 f5f6 	udiv	r5, r5, r6
		MOV R6, #0						@ i = 0;
 80003e0:	f04f 0600 	mov.w	r6, #0
		MOV R9, #0						@ aux2 = 0;
 80003e4:	f04f 0900 	mov.w	r9, #0

080003e8 <asm_ecoV3_loop>:

	asm_ecoV3_loop:						@ loop
		CMP R5, R6						@ delay_samples - i;
 80003e8:	42b5      	cmp	r5, r6
		BLS asm_ecoV3_else				@ if(i >= delay_samples) --> ir al else
 80003ea:	d904      	bls.n	80003f6 <asm_ecoV3_else>
		LDR R7, [R0, R6, LSL #2]		@ R7 = vectorIn[i];
 80003ec:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
		STR R7, [R1, R6, LSL #2]		@ vectorOut[i] = R7;
 80003f0:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
		B asm_ecoV3_end_if				@ cuando termina el if, se va al final
 80003f4:	e00b      	b.n	800040e <asm_ecoV3_end_if>

080003f6 <asm_ecoV3_else>:

	asm_ecoV3_else:
		SUB R7, R6, R5					@ aux = i - delay_samples;
 80003f6:	eba6 0705 	sub.w	r7, r6, r5
		LDR R7, [R0, R7, LSL #2]		@ aux = vectorIn[aux];
 80003fa:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
		SHADD16 R7, R7, R9				@ aux = (aux + 0) / 2;
 80003fe:	fa97 f729 	shadd16	r7, r7, r9
		LDR R8, [R0, R6, LSL #2]		@ R8 = vectorIn[i];
 8000402:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
		SADD16 R8, R8, R7				@ R8 = vectorIn[i] + aux;
 8000406:	fa98 f807 	sadd16	r8, r8, r7
		STR R8, [R1, R6, LSL #2]		@ vectorOut[i] = R8;
 800040a:	f841 8026 	str.w	r8, [r1, r6, lsl #2]

0800040e <asm_ecoV3_end_if>:

	asm_ecoV3_end_if:
		ADDS R6, R6, #1					@ i++;
 800040e:	3601      	adds	r6, #1
		CMP R2, R6						@ bufferSize - i;
 8000410:	42b2      	cmp	r2, r6
		BHI asm_ecoV3_loop				@ if(bufferSize > i) --> repetir bucle
 8000412:	d8e9      	bhi.n	80003e8 <asm_ecoV3_loop>


		POP {R4 - R9}					@ se recuperan registros desde STACK
 8000414:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
		BX LR							@ retornar a la función llamadora (caller)
 8000418:	4770      	bx	lr

0800041a <asm_corr>:
 800041a:	0000      	movs	r0, r0
 800041c:	0000      	movs	r0, r0
	...

08000420 <memchr>:
 8000420:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000424:	2a10      	cmp	r2, #16
 8000426:	db2b      	blt.n	8000480 <memchr+0x60>
 8000428:	f010 0f07 	tst.w	r0, #7
 800042c:	d008      	beq.n	8000440 <memchr+0x20>
 800042e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000432:	3a01      	subs	r2, #1
 8000434:	428b      	cmp	r3, r1
 8000436:	d02d      	beq.n	8000494 <memchr+0x74>
 8000438:	f010 0f07 	tst.w	r0, #7
 800043c:	b342      	cbz	r2, 8000490 <memchr+0x70>
 800043e:	d1f6      	bne.n	800042e <memchr+0xe>
 8000440:	b4f0      	push	{r4, r5, r6, r7}
 8000442:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000446:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800044a:	f022 0407 	bic.w	r4, r2, #7
 800044e:	f07f 0700 	mvns.w	r7, #0
 8000452:	2300      	movs	r3, #0
 8000454:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000458:	3c08      	subs	r4, #8
 800045a:	ea85 0501 	eor.w	r5, r5, r1
 800045e:	ea86 0601 	eor.w	r6, r6, r1
 8000462:	fa85 f547 	uadd8	r5, r5, r7
 8000466:	faa3 f587 	sel	r5, r3, r7
 800046a:	fa86 f647 	uadd8	r6, r6, r7
 800046e:	faa5 f687 	sel	r6, r5, r7
 8000472:	b98e      	cbnz	r6, 8000498 <memchr+0x78>
 8000474:	d1ee      	bne.n	8000454 <memchr+0x34>
 8000476:	bcf0      	pop	{r4, r5, r6, r7}
 8000478:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800047c:	f002 0207 	and.w	r2, r2, #7
 8000480:	b132      	cbz	r2, 8000490 <memchr+0x70>
 8000482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000486:	3a01      	subs	r2, #1
 8000488:	ea83 0301 	eor.w	r3, r3, r1
 800048c:	b113      	cbz	r3, 8000494 <memchr+0x74>
 800048e:	d1f8      	bne.n	8000482 <memchr+0x62>
 8000490:	2000      	movs	r0, #0
 8000492:	4770      	bx	lr
 8000494:	3801      	subs	r0, #1
 8000496:	4770      	bx	lr
 8000498:	2d00      	cmp	r5, #0
 800049a:	bf06      	itte	eq
 800049c:	4635      	moveq	r5, r6
 800049e:	3803      	subeq	r0, #3
 80004a0:	3807      	subne	r0, #7
 80004a2:	f015 0f01 	tst.w	r5, #1
 80004a6:	d107      	bne.n	80004b8 <memchr+0x98>
 80004a8:	3001      	adds	r0, #1
 80004aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ae:	bf02      	ittt	eq
 80004b0:	3001      	addeq	r0, #1
 80004b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004b6:	3001      	addeq	r0, #1
 80004b8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ba:	3801      	subs	r0, #1
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <__aeabi_uldivmod>:
 80004c0:	b953      	cbnz	r3, 80004d8 <__aeabi_uldivmod+0x18>
 80004c2:	b94a      	cbnz	r2, 80004d8 <__aeabi_uldivmod+0x18>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	bf08      	it	eq
 80004c8:	2800      	cmpeq	r0, #0
 80004ca:	bf1c      	itt	ne
 80004cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80004d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80004d4:	f000 b974 	b.w	80007c0 <__aeabi_idiv0>
 80004d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e0:	f000 f806 	bl	80004f0 <__udivmoddi4>
 80004e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ec:	b004      	add	sp, #16
 80004ee:	4770      	bx	lr

080004f0 <__udivmoddi4>:
 80004f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004f4:	9d08      	ldr	r5, [sp, #32]
 80004f6:	4604      	mov	r4, r0
 80004f8:	468e      	mov	lr, r1
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d14d      	bne.n	800059a <__udivmoddi4+0xaa>
 80004fe:	428a      	cmp	r2, r1
 8000500:	4694      	mov	ip, r2
 8000502:	d969      	bls.n	80005d8 <__udivmoddi4+0xe8>
 8000504:	fab2 f282 	clz	r2, r2
 8000508:	b152      	cbz	r2, 8000520 <__udivmoddi4+0x30>
 800050a:	fa01 f302 	lsl.w	r3, r1, r2
 800050e:	f1c2 0120 	rsb	r1, r2, #32
 8000512:	fa20 f101 	lsr.w	r1, r0, r1
 8000516:	fa0c fc02 	lsl.w	ip, ip, r2
 800051a:	ea41 0e03 	orr.w	lr, r1, r3
 800051e:	4094      	lsls	r4, r2
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	0c21      	lsrs	r1, r4, #16
 8000526:	fbbe f6f8 	udiv	r6, lr, r8
 800052a:	fa1f f78c 	uxth.w	r7, ip
 800052e:	fb08 e316 	mls	r3, r8, r6, lr
 8000532:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000536:	fb06 f107 	mul.w	r1, r6, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d90a      	bls.n	8000554 <__udivmoddi4+0x64>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000546:	f080 811f 	bcs.w	8000788 <__udivmoddi4+0x298>
 800054a:	4299      	cmp	r1, r3
 800054c:	f240 811c 	bls.w	8000788 <__udivmoddi4+0x298>
 8000550:	3e02      	subs	r6, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3310 	mls	r3, r8, r0, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb00 f707 	mul.w	r7, r0, r7
 8000568:	42a7      	cmp	r7, r4
 800056a:	d90a      	bls.n	8000582 <__udivmoddi4+0x92>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000574:	f080 810a 	bcs.w	800078c <__udivmoddi4+0x29c>
 8000578:	42a7      	cmp	r7, r4
 800057a:	f240 8107 	bls.w	800078c <__udivmoddi4+0x29c>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000586:	1be4      	subs	r4, r4, r7
 8000588:	2600      	movs	r6, #0
 800058a:	b11d      	cbz	r5, 8000594 <__udivmoddi4+0xa4>
 800058c:	40d4      	lsrs	r4, r2
 800058e:	2300      	movs	r3, #0
 8000590:	e9c5 4300 	strd	r4, r3, [r5]
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	428b      	cmp	r3, r1
 800059c:	d909      	bls.n	80005b2 <__udivmoddi4+0xc2>
 800059e:	2d00      	cmp	r5, #0
 80005a0:	f000 80ef 	beq.w	8000782 <__udivmoddi4+0x292>
 80005a4:	2600      	movs	r6, #0
 80005a6:	e9c5 0100 	strd	r0, r1, [r5]
 80005aa:	4630      	mov	r0, r6
 80005ac:	4631      	mov	r1, r6
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	fab3 f683 	clz	r6, r3
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d14a      	bne.n	8000650 <__udivmoddi4+0x160>
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d302      	bcc.n	80005c4 <__udivmoddi4+0xd4>
 80005be:	4282      	cmp	r2, r0
 80005c0:	f200 80f9 	bhi.w	80007b6 <__udivmoddi4+0x2c6>
 80005c4:	1a84      	subs	r4, r0, r2
 80005c6:	eb61 0303 	sbc.w	r3, r1, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	469e      	mov	lr, r3
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	d0e0      	beq.n	8000594 <__udivmoddi4+0xa4>
 80005d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80005d6:	e7dd      	b.n	8000594 <__udivmoddi4+0xa4>
 80005d8:	b902      	cbnz	r2, 80005dc <__udivmoddi4+0xec>
 80005da:	deff      	udf	#255	; 0xff
 80005dc:	fab2 f282 	clz	r2, r2
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	f040 8092 	bne.w	800070a <__udivmoddi4+0x21a>
 80005e6:	eba1 010c 	sub.w	r1, r1, ip
 80005ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005ee:	fa1f fe8c 	uxth.w	lr, ip
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80005fa:	fb07 1113 	mls	r1, r7, r3, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb0e f003 	mul.w	r0, lr, r3
 8000606:	4288      	cmp	r0, r1
 8000608:	d908      	bls.n	800061c <__udivmoddi4+0x12c>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000612:	d202      	bcs.n	800061a <__udivmoddi4+0x12a>
 8000614:	4288      	cmp	r0, r1
 8000616:	f200 80cb 	bhi.w	80007b0 <__udivmoddi4+0x2c0>
 800061a:	4643      	mov	r3, r8
 800061c:	1a09      	subs	r1, r1, r0
 800061e:	b2a4      	uxth	r4, r4
 8000620:	fbb1 f0f7 	udiv	r0, r1, r7
 8000624:	fb07 1110 	mls	r1, r7, r0, r1
 8000628:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800062c:	fb0e fe00 	mul.w	lr, lr, r0
 8000630:	45a6      	cmp	lr, r4
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x156>
 8000634:	eb1c 0404 	adds.w	r4, ip, r4
 8000638:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800063c:	d202      	bcs.n	8000644 <__udivmoddi4+0x154>
 800063e:	45a6      	cmp	lr, r4
 8000640:	f200 80bb 	bhi.w	80007ba <__udivmoddi4+0x2ca>
 8000644:	4608      	mov	r0, r1
 8000646:	eba4 040e 	sub.w	r4, r4, lr
 800064a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800064e:	e79c      	b.n	800058a <__udivmoddi4+0x9a>
 8000650:	f1c6 0720 	rsb	r7, r6, #32
 8000654:	40b3      	lsls	r3, r6
 8000656:	fa22 fc07 	lsr.w	ip, r2, r7
 800065a:	ea4c 0c03 	orr.w	ip, ip, r3
 800065e:	fa20 f407 	lsr.w	r4, r0, r7
 8000662:	fa01 f306 	lsl.w	r3, r1, r6
 8000666:	431c      	orrs	r4, r3
 8000668:	40f9      	lsrs	r1, r7
 800066a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800066e:	fa00 f306 	lsl.w	r3, r0, r6
 8000672:	fbb1 f8f9 	udiv	r8, r1, r9
 8000676:	0c20      	lsrs	r0, r4, #16
 8000678:	fa1f fe8c 	uxth.w	lr, ip
 800067c:	fb09 1118 	mls	r1, r9, r8, r1
 8000680:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000684:	fb08 f00e 	mul.w	r0, r8, lr
 8000688:	4288      	cmp	r0, r1
 800068a:	fa02 f206 	lsl.w	r2, r2, r6
 800068e:	d90b      	bls.n	80006a8 <__udivmoddi4+0x1b8>
 8000690:	eb1c 0101 	adds.w	r1, ip, r1
 8000694:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000698:	f080 8088 	bcs.w	80007ac <__udivmoddi4+0x2bc>
 800069c:	4288      	cmp	r0, r1
 800069e:	f240 8085 	bls.w	80007ac <__udivmoddi4+0x2bc>
 80006a2:	f1a8 0802 	sub.w	r8, r8, #2
 80006a6:	4461      	add	r1, ip
 80006a8:	1a09      	subs	r1, r1, r0
 80006aa:	b2a4      	uxth	r4, r4
 80006ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80006b0:	fb09 1110 	mls	r1, r9, r0, r1
 80006b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006bc:	458e      	cmp	lr, r1
 80006be:	d908      	bls.n	80006d2 <__udivmoddi4+0x1e2>
 80006c0:	eb1c 0101 	adds.w	r1, ip, r1
 80006c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80006c8:	d26c      	bcs.n	80007a4 <__udivmoddi4+0x2b4>
 80006ca:	458e      	cmp	lr, r1
 80006cc:	d96a      	bls.n	80007a4 <__udivmoddi4+0x2b4>
 80006ce:	3802      	subs	r0, #2
 80006d0:	4461      	add	r1, ip
 80006d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006d6:	fba0 9402 	umull	r9, r4, r0, r2
 80006da:	eba1 010e 	sub.w	r1, r1, lr
 80006de:	42a1      	cmp	r1, r4
 80006e0:	46c8      	mov	r8, r9
 80006e2:	46a6      	mov	lr, r4
 80006e4:	d356      	bcc.n	8000794 <__udivmoddi4+0x2a4>
 80006e6:	d053      	beq.n	8000790 <__udivmoddi4+0x2a0>
 80006e8:	b15d      	cbz	r5, 8000702 <__udivmoddi4+0x212>
 80006ea:	ebb3 0208 	subs.w	r2, r3, r8
 80006ee:	eb61 010e 	sbc.w	r1, r1, lr
 80006f2:	fa01 f707 	lsl.w	r7, r1, r7
 80006f6:	fa22 f306 	lsr.w	r3, r2, r6
 80006fa:	40f1      	lsrs	r1, r6
 80006fc:	431f      	orrs	r7, r3
 80006fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000702:	2600      	movs	r6, #0
 8000704:	4631      	mov	r1, r6
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	40d8      	lsrs	r0, r3
 8000710:	fa0c fc02 	lsl.w	ip, ip, r2
 8000714:	fa21 f303 	lsr.w	r3, r1, r3
 8000718:	4091      	lsls	r1, r2
 800071a:	4301      	orrs	r1, r0
 800071c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000720:	fa1f fe8c 	uxth.w	lr, ip
 8000724:	fbb3 f0f7 	udiv	r0, r3, r7
 8000728:	fb07 3610 	mls	r6, r7, r0, r3
 800072c:	0c0b      	lsrs	r3, r1, #16
 800072e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000732:	fb00 f60e 	mul.w	r6, r0, lr
 8000736:	429e      	cmp	r6, r3
 8000738:	fa04 f402 	lsl.w	r4, r4, r2
 800073c:	d908      	bls.n	8000750 <__udivmoddi4+0x260>
 800073e:	eb1c 0303 	adds.w	r3, ip, r3
 8000742:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000746:	d22f      	bcs.n	80007a8 <__udivmoddi4+0x2b8>
 8000748:	429e      	cmp	r6, r3
 800074a:	d92d      	bls.n	80007a8 <__udivmoddi4+0x2b8>
 800074c:	3802      	subs	r0, #2
 800074e:	4463      	add	r3, ip
 8000750:	1b9b      	subs	r3, r3, r6
 8000752:	b289      	uxth	r1, r1
 8000754:	fbb3 f6f7 	udiv	r6, r3, r7
 8000758:	fb07 3316 	mls	r3, r7, r6, r3
 800075c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000760:	fb06 f30e 	mul.w	r3, r6, lr
 8000764:	428b      	cmp	r3, r1
 8000766:	d908      	bls.n	800077a <__udivmoddi4+0x28a>
 8000768:	eb1c 0101 	adds.w	r1, ip, r1
 800076c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000770:	d216      	bcs.n	80007a0 <__udivmoddi4+0x2b0>
 8000772:	428b      	cmp	r3, r1
 8000774:	d914      	bls.n	80007a0 <__udivmoddi4+0x2b0>
 8000776:	3e02      	subs	r6, #2
 8000778:	4461      	add	r1, ip
 800077a:	1ac9      	subs	r1, r1, r3
 800077c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000780:	e738      	b.n	80005f4 <__udivmoddi4+0x104>
 8000782:	462e      	mov	r6, r5
 8000784:	4628      	mov	r0, r5
 8000786:	e705      	b.n	8000594 <__udivmoddi4+0xa4>
 8000788:	4606      	mov	r6, r0
 800078a:	e6e3      	b.n	8000554 <__udivmoddi4+0x64>
 800078c:	4618      	mov	r0, r3
 800078e:	e6f8      	b.n	8000582 <__udivmoddi4+0x92>
 8000790:	454b      	cmp	r3, r9
 8000792:	d2a9      	bcs.n	80006e8 <__udivmoddi4+0x1f8>
 8000794:	ebb9 0802 	subs.w	r8, r9, r2
 8000798:	eb64 0e0c 	sbc.w	lr, r4, ip
 800079c:	3801      	subs	r0, #1
 800079e:	e7a3      	b.n	80006e8 <__udivmoddi4+0x1f8>
 80007a0:	4646      	mov	r6, r8
 80007a2:	e7ea      	b.n	800077a <__udivmoddi4+0x28a>
 80007a4:	4620      	mov	r0, r4
 80007a6:	e794      	b.n	80006d2 <__udivmoddi4+0x1e2>
 80007a8:	4640      	mov	r0, r8
 80007aa:	e7d1      	b.n	8000750 <__udivmoddi4+0x260>
 80007ac:	46d0      	mov	r8, sl
 80007ae:	e77b      	b.n	80006a8 <__udivmoddi4+0x1b8>
 80007b0:	3b02      	subs	r3, #2
 80007b2:	4461      	add	r1, ip
 80007b4:	e732      	b.n	800061c <__udivmoddi4+0x12c>
 80007b6:	4630      	mov	r0, r6
 80007b8:	e709      	b.n	80005ce <__udivmoddi4+0xde>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e742      	b.n	8000646 <__udivmoddi4+0x156>

080007c0 <__aeabi_idiv0>:
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop

080007c4 <asm_ecoV3_tester>:

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 74978 ciclos
}

/* EJERCICIO 10.3 ------------------------------------------------------------*/
void asm_ecoV3_tester(void) {
 80007c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007c8:	b08b      	sub	sp, #44	; 0x2c
 80007ca:	af02      	add	r7, sp, #8
 80007cc:	466b      	mov	r3, sp
 80007ce:	461e      	mov	r6, r3

	const uint16_t bufferSize = 4096;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	82fb      	strh	r3, [r7, #22]
	const uint16_t samplingRate = 44100;
 80007d6:	f64a 4344 	movw	r3, #44100	; 0xac44
 80007da:	833b      	strh	r3, [r7, #24]
	const uint16_t delay_ms = 20;
 80007dc:	2314      	movs	r3, #20
 80007de:	837b      	strh	r3, [r7, #26]

	int16_t myVecIn[bufferSize];
 80007e0:	8afb      	ldrh	r3, [r7, #22]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
 80007e6:	8afb      	ldrh	r3, [r7, #22]
 80007e8:	2200      	movs	r2, #0
 80007ea:	469a      	mov	sl, r3
 80007ec:	4693      	mov	fp, r2
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80007fa:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80007fe:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000802:	8afb      	ldrh	r3, [r7, #22]
 8000804:	2200      	movs	r2, #0
 8000806:	4698      	mov	r8, r3
 8000808:	4691      	mov	r9, r2
 800080a:	f04f 0200 	mov.w	r2, #0
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000816:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800081a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	3307      	adds	r3, #7
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	ebad 0d03 	sub.w	sp, sp, r3
 800082c:	ab02      	add	r3, sp, #8
 800082e:	3301      	adds	r3, #1
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	613b      	str	r3, [r7, #16]
	int16_t myVecOut[bufferSize];
 8000836:	8afb      	ldrh	r3, [r7, #22]
 8000838:	3b01      	subs	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	8afb      	ldrh	r3, [r7, #22]
 800083e:	2200      	movs	r2, #0
 8000840:	461c      	mov	r4, r3
 8000842:	4615      	mov	r5, r2
 8000844:	f04f 0200 	mov.w	r2, #0
 8000848:	f04f 0300 	mov.w	r3, #0
 800084c:	012b      	lsls	r3, r5, #4
 800084e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000852:	0122      	lsls	r2, r4, #4
 8000854:	8afb      	ldrh	r3, [r7, #22]
 8000856:	2200      	movs	r2, #0
 8000858:	4618      	mov	r0, r3
 800085a:	4611      	mov	r1, r2
 800085c:	f04f 0200 	mov.w	r2, #0
 8000860:	f04f 0300 	mov.w	r3, #0
 8000864:	010b      	lsls	r3, r1, #4
 8000866:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800086a:	0102      	lsls	r2, r0, #4
 800086c:	8afb      	ldrh	r3, [r7, #22]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	3307      	adds	r3, #7
 8000872:	08db      	lsrs	r3, r3, #3
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	ebad 0d03 	sub.w	sp, sp, r3
 800087a:	ab02      	add	r3, sp, #8
 800087c:	3301      	adds	r3, #1
 800087e:	085b      	lsrs	r3, r3, #1
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]

	srand(0);
 8000884:	2000      	movs	r0, #0
 8000886:	f002 ff27 	bl	80036d8 <srand>

	for(uint16_t i = 0; i < bufferSize; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	82bb      	strh	r3, [r7, #20]
 800088e:	e013      	b.n	80008b8 <asm_ecoV3_tester+0xf4>

		myVecIn[i] = rand() % 65536 - 32768;
 8000890:	f002 ff50 	bl	8003734 <rand>
 8000894:	4603      	mov	r3, r0
 8000896:	425a      	negs	r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	b292      	uxth	r2, r2
 800089c:	bf58      	it	pl
 800089e:	4253      	negpl	r3, r2
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	8aba      	ldrh	r2, [r7, #20]
 80008aa:	b219      	sxth	r1, r3
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i = 0; i < bufferSize; i++) {
 80008b2:	8abb      	ldrh	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	82bb      	strh	r3, [r7, #20]
 80008b8:	8aba      	ldrh	r2, [r7, #20]
 80008ba:	8afb      	ldrh	r3, [r7, #22]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3e7      	bcc.n	8000890 <asm_ecoV3_tester+0xcc>
	}

	DWT->CYCCNT = 0;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <asm_ecoV3_tester+0x128>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]

	asm_ecoV3(myVecIn, myVecOut, bufferSize, samplingRate, delay_ms);
 80008c6:	8b39      	ldrh	r1, [r7, #24]
 80008c8:	8afa      	ldrh	r2, [r7, #22]
 80008ca:	8b7b      	ldrh	r3, [r7, #26]
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	460b      	mov	r3, r1
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	6938      	ldr	r0, [r7, #16]
 80008d4:	f7ff fd76 	bl	80003c4 <asm_ecoV3>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 37495 ciclos
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <asm_ecoV3_tester+0x128>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	46b5      	mov	sp, r6
}
 80008e0:	bf00      	nop
 80008e2:	3724      	adds	r7, #36	; 0x24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008ea:	bf00      	nop
 80008ec:	e0001000 	.word	0xe0001000

080008f0 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80008f6:	f3ef 8314 	mrs	r3, CONTROL
 80008fa:	607b      	str	r3, [r7, #4]
  return(result);
 80008fc:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80008fe:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	f383 8814 	msr	CONTROL, r3
}
 8000912:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000914:	f3ef 8314 	mrs	r3, CONTROL
 8000918:	60fb      	str	r3, [r7, #12]
  return(result);
 800091a:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 800091c:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	f383 8814 	msr	CONTROL, r3
}
 8000930:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000932:	f3ef 8314 	mrs	r3, CONTROL
 8000936:	617b      	str	r3, [r7, #20]
  return(result);
 8000938:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 800093a:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 800093c:	f7ff fc58 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000940:	f3ef 8314 	mrs	r3, CONTROL
 8000944:	61bb      	str	r3, [r7, #24]
  return(result);
 8000946:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000948:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fcaa 	bl	80012b0 <HAL_Init>
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <main+0x34>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <main+0x34>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000968:	f000 f810 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096c:	f000 f91e 	bl	8000bac <MX_GPIO_Init>
  MX_ETH_Init();
 8000970:	f000 f876 	bl	8000a60 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000974:	f000 f8c2 	bl	8000afc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000978:	f000 f8ea 	bl	8000b50 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  PrivilegiosSVC();
 800097c:	f7ff ffb8 	bl	80008f0 <PrivilegiosSVC>
  //asm_max_tester(); 					// EJERCICIO 7
  //asm_downsampleM_tester();			// EJERCICIO 8
  //asm_invertir_tester();				// EJERCICIO 9
  //asm_ecoV1_tester();					// EJERCICIO 10.1
  //asm_ecoV2_tester();					// EJERCICIO 10.2
  asm_ecoV3_tester();					// EJERCICIO 10.3
 8000980:	f7ff ff20 	bl	80007c4 <asm_ecoV3_tester>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000984:	e7fe      	b.n	8000984 <main+0x30>
 8000986:	bf00      	nop
 8000988:	e0001000 	.word	0xe0001000

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fe94 	bl	80036c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <SystemClock_Config+0xcc>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <SystemClock_Config+0xd0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a00:	23a8      	movs	r3, #168	; 0xa8
 8000a02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fbd3 	bl	80021bc <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a1c:	f000 f974 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fe34 	bl	80026ac <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a4a:	f000 f95d 	bl	8000d08 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	; 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_ETH_Init+0x84>)
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <MX_ETH_Init+0x88>)
 8000a68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <MX_ETH_Init+0x8c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_ETH_Init+0x8c>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_ETH_Init+0x8c>)
 8000a78:	22e1      	movs	r2, #225	; 0xe1
 8000a7a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_ETH_Init+0x8c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_ETH_Init+0x8c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_ETH_Init+0x8c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_ETH_Init+0x84>)
 8000a90:	4a16      	ldr	r2, [pc, #88]	; (8000aec <MX_ETH_Init+0x8c>)
 8000a92:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_ETH_Init+0x84>)
 8000a96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a9a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_ETH_Init+0x84>)
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <MX_ETH_Init+0x90>)
 8000aa0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_ETH_Init+0x84>)
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <MX_ETH_Init+0x94>)
 8000aa6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_ETH_Init+0x84>)
 8000aaa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_ETH_Init+0x84>)
 8000ab2:	f000 fd79 	bl	80015a8 <HAL_ETH_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000abc:	f000 f924 	bl	8000d08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ac0:	2238      	movs	r2, #56	; 0x38
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_ETH_Init+0x98>)
 8000ac6:	f002 fdff 	bl	80036c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_ETH_Init+0x98>)
 8000acc:	2221      	movs	r2, #33	; 0x21
 8000ace:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_ETH_Init+0x98>)
 8000ad2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ad6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_ETH_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000204 	.word	0x20000204
 8000ae8:	40028000 	.word	0x40028000
 8000aec:	20000804 	.word	0x20000804
 8000af0:	20000164 	.word	0x20000164
 8000af4:	200000c4 	.word	0x200000c4
 8000af8:	2000008c 	.word	0x2000008c

08000afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_USART3_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b34:	f001 ffda 	bl	8002aec <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 f8e3 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200002b4 	.word	0x200002b4
 8000b4c:	40004800 	.word	0x40004800

08000b50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b94:	f001 f9f5 	bl	8001f82 <HAL_PCD_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b9e:	f000 f8b3 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200002f8 	.word	0x200002f8

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a36      	ldr	r2, [pc, #216]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c70:	4822      	ldr	r0, [pc, #136]	; (8000cfc <MX_GPIO_Init+0x150>)
 8000c72:	f001 f96d 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <MX_GPIO_Init+0x154>)
 8000c7c:	f001 f968 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	481b      	ldr	r0, [pc, #108]	; (8000d04 <MX_GPIO_Init+0x158>)
 8000c98:	f000 ffae 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_GPIO_Init+0x150>)
 8000cb6:	f000 ff9f 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MX_GPIO_Init+0x154>)
 8000cd2:	f000 ff91 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_GPIO_Init+0x154>)
 8000cea:	f000 ff85 	bl	8001bf8 <HAL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	; 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40021800 	.word	0x40021800
 8000d04:	40020800 	.word	0x40020800

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a55      	ldr	r2, [pc, #340]	; (8000ed8 <HAL_ETH_MspInit+0x174>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	f040 80a4 	bne.w	8000ed0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	4b53      	ldr	r3, [pc, #332]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a52      	ldr	r2, [pc, #328]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b50      	ldr	r3, [pc, #320]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b49      	ldr	r3, [pc, #292]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	4b45      	ldr	r3, [pc, #276]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a44      	ldr	r2, [pc, #272]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	4b37      	ldr	r3, [pc, #220]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a36      	ldr	r2, [pc, #216]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b30      	ldr	r3, [pc, #192]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a2f      	ldr	r2, [pc, #188]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <HAL_ETH_MspInit+0x17c>)
 8000e68:	f000 fec6 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e6c:	2386      	movs	r3, #134	; 0x86
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <HAL_ETH_MspInit+0x180>)
 8000e88:	f000 feb6 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_ETH_MspInit+0x184>)
 8000eaa:	f000 fea5 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000ecc:	f000 fe94 	bl	8001bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40028000 	.word	0x40028000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40021800 	.word	0x40021800

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_UART_MspInit+0x84>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12c      	bne.n	8000f6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_UART_MspInit+0x88>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_UART_MspInit+0x88>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0x88>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_UART_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_UART_MspInit+0x88>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_UART_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f68:	f000 fe46 	bl	8001bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40004800 	.word	0x40004800
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020c00 	.word	0x40020c00

08000f80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fa0:	d13f      	bne.n	8001022 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <HAL_PCD_MspInit+0xac>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a20      	ldr	r2, [pc, #128]	; (800102c <HAL_PCD_MspInit+0xac>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_PCD_MspInit+0xac>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fbe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <HAL_PCD_MspInit+0xb0>)
 8000fdc:	f000 fe0c 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480e      	ldr	r0, [pc, #56]	; (8001030 <HAL_PCD_MspInit+0xb0>)
 8000ff6:	f000 fdff 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_PCD_MspInit+0xac>)
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_PCD_MspInit+0xac>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6353      	str	r3, [r2, #52]	; 0x34
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_PCD_MspInit+0xac>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_PCD_MspInit+0xac>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_PCD_MspInit+0xac>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001058:	f3ef 8314 	mrs	r3, CONTROL
 800105c:	607b      	str	r3, [r7, #4]
  return(result);
 800105e:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001060:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f383 8814 	msr	CONTROL, r3
}
 8001074:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 f957 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
	return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_kill>:

int _kill(int pid, int sig)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010c4:	f002 fad6 	bl	8003674 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2216      	movs	r2, #22
 80010cc:	601a      	str	r2, [r3, #0]
	return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_exit>:

void _exit (int status)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffe7 	bl	80010ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80010ec:	e7fe      	b.n	80010ec <_exit+0x12>

080010ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e00a      	b.n	8001116 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001100:	f3af 8000 	nop.w
 8001104:	4601      	mov	r1, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	60ba      	str	r2, [r7, #8]
 800110c:	b2ca      	uxtb	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbf0      	blt.n	8001100 <_read+0x12>
	}

return len;
 800111e:	687b      	ldr	r3, [r7, #4]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e009      	b.n	800114e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbf1      	blt.n	800113a <_write+0x12>
	}
	return len;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_close>:

int _close(int file)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	return -1;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001188:	605a      	str	r2, [r3, #4]
	return 0;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_isatty>:

int _isatty(int file)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	return 1;
 80011a0:	2301      	movs	r3, #1
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
	return 0;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f002 fa3c 	bl	8003674 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20030000 	.word	0x20030000
 8001228:	00000400 	.word	0x00000400
 800122c:	2000080c 	.word	0x2000080c
 8001230:	20000828 	.word	0x20000828

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001258:	bf00      	nop
  nop
 800125a:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd5 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f002 f9f9 	bl	8003680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fb61 	bl	8000954 <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001294:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a0:	0800492c 	.word	0x0800492c
  ldr r2, =_sbss
 80012a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012a8:	20000824 	.word	0x20000824

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_Init+0x40>)
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_Init+0x40>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x40>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f931 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fd16 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f93b 	bl	800158e <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001330:	f000 f911 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	20000008 	.word	0x20000008
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	20000810 	.word	0x20000810

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000810 	.word	0x20000810

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff47 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff5c 	bl	8001424 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff8e 	bl	8001494 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffb0 	bl	80014fc <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06c      	b.n	8001694 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d106      	bne.n	80015d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2223      	movs	r2, #35	; 0x23
 80015c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fbc9 	bl	8000d64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_ETH_Init+0xf4>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_ETH_Init+0xf4>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b2e      	ldr	r3, [pc, #184]	; (800169c <HAL_ETH_Init+0xf4>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_ETH_Init+0xf8>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a2b      	ldr	r2, [pc, #172]	; (80016a0 <HAL_ETH_Init+0xf8>)
 80015f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <HAL_ETH_Init+0xf8>)
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	4927      	ldr	r1, [pc, #156]	; (80016a0 <HAL_ETH_Init+0xf8>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_ETH_Init+0xf8>)
 800160a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001622:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001624:	f7ff feaa 	bl	800137c <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800162a:	e011      	b.n	8001650 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800162c:	f7ff fea6 	bl	800137c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800163a:	d909      	bls.n	8001650 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2204      	movs	r2, #4
 8001640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	22e0      	movs	r2, #224	; 0xe0
 8001648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e021      	b.n	8001694 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1e4      	bne.n	800162c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f958 	bl	8001918 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f9ff 	bl	8001a6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fa55 	bl	8001b1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	461a      	mov	r2, r3
 800167a:	2100      	movs	r1, #0
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f9bd 	bl	80019fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2210      	movs	r2, #16
 800168e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800

080016a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4b51      	ldr	r3, [pc, #324]	; (8001800 <ETH_SetMACConfig+0x15c>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7c1b      	ldrb	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <ETH_SetMACConfig+0x28>
 80016c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016ca:	e000      	b.n	80016ce <ETH_SetMACConfig+0x2a>
 80016cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	7c5b      	ldrb	r3, [r3, #17]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <ETH_SetMACConfig+0x38>
 80016d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016da:	e000      	b.n	80016de <ETH_SetMACConfig+0x3a>
 80016dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	7fdb      	ldrb	r3, [r3, #31]
 80016ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80016ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	7f92      	ldrb	r2, [r2, #30]
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	d102      	bne.n	8001702 <ETH_SetMACConfig+0x5e>
 80016fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001700:	e000      	b.n	8001704 <ETH_SetMACConfig+0x60>
 8001702:	2200      	movs	r2, #0
                        macconf->Speed |
 8001704:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	7f1b      	ldrb	r3, [r3, #28]
 800170a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800170c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001712:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	791b      	ldrb	r3, [r3, #4]
 8001718:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800171a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001722:	2a00      	cmp	r2, #0
 8001724:	d102      	bne.n	800172c <ETH_SetMACConfig+0x88>
 8001726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172a:	e000      	b.n	800172e <ETH_SetMACConfig+0x8a>
 800172c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800172e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	7bdb      	ldrb	r3, [r3, #15]
 8001734:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001736:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800173c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001744:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001746:	4313      	orrs	r3, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff fe18 	bl	8001394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	f64f 7341 	movw	r3, #65345	; 0xff41
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001782:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800178a:	2a00      	cmp	r2, #0
 800178c:	d101      	bne.n	8001792 <ETH_SetMACConfig+0xee>
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	e000      	b.n	8001794 <ETH_SetMACConfig+0xf0>
 8001792:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001794:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800179a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80017a2:	2a01      	cmp	r2, #1
 80017a4:	d101      	bne.n	80017aa <ETH_SetMACConfig+0x106>
 80017a6:	2208      	movs	r2, #8
 80017a8:	e000      	b.n	80017ac <ETH_SetMACConfig+0x108>
 80017aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80017ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d101      	bne.n	80017bc <ETH_SetMACConfig+0x118>
 80017b8:	2204      	movs	r2, #4
 80017ba:	e000      	b.n	80017be <ETH_SetMACConfig+0x11a>
 80017bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80017be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80017c6:	2a01      	cmp	r2, #1
 80017c8:	d101      	bne.n	80017ce <ETH_SetMACConfig+0x12a>
 80017ca:	2202      	movs	r2, #2
 80017cc:	e000      	b.n	80017d0 <ETH_SetMACConfig+0x12c>
 80017ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017d0:	4313      	orrs	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fdd3 	bl	8001394 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	619a      	str	r2, [r3, #24]
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	ff20810f 	.word	0xff20810f

08001804 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <ETH_SetDMAConfig+0x110>)
 800181e:	4013      	ands	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	7b1b      	ldrb	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <ETH_SetDMAConfig+0x2c>
 800182a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800182e:	e000      	b.n	8001832 <ETH_SetDMAConfig+0x2e>
 8001830:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	7b5b      	ldrb	r3, [r3, #13]
 8001836:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001838:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	7f52      	ldrb	r2, [r2, #29]
 800183e:	2a00      	cmp	r2, #0
 8001840:	d102      	bne.n	8001848 <ETH_SetDMAConfig+0x44>
 8001842:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001846:	e000      	b.n	800184a <ETH_SetDMAConfig+0x46>
 8001848:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800184a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7b9b      	ldrb	r3, [r3, #14]
 8001850:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001852:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001858:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	7f1b      	ldrb	r3, [r3, #28]
 800185e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001860:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	7f9b      	ldrb	r3, [r3, #30]
 8001866:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001868:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800186e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001876:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001878:	4313      	orrs	r3, r2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fd7a 	bl	8001394 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	791b      	ldrb	r3, [r3, #4]
 80018b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80018be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80018ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f7ff fd4b 	bl	8001394 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	f8de3f23 	.word	0xf8de3f23

08001918 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0a6      	sub	sp, #152	; 0x98
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001920:	2301      	movs	r3, #1
 8001922:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800192c:	2300      	movs	r3, #0
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001954:	2300      	movs	r3, #0
 8001956:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800195e:	2300      	movs	r3, #0
 8001960:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800197a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001984:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800198c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fe86 	bl	80016a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001998:	2301      	movs	r3, #1
 800199a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800199c:	2301      	movs	r3, #1
 800199e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019c4:	2301      	movs	r3, #1
 80019c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff08 	bl	8001804 <ETH_SetDMAConfig>
}
 80019f4:	bf00      	nop
 80019f6:	3798      	adds	r7, #152	; 0x98
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3305      	adds	r3, #5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	3204      	adds	r2, #4
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <ETH_MACAddressConfig+0x68>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3303      	adds	r3, #3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	061a      	lsls	r2, r3, #24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3302      	adds	r3, #2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	4313      	orrs	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <ETH_MACAddressConfig+0x6c>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	6013      	str	r3, [r2, #0]
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40028040 	.word	0x40028040
 8001a68:	40028044 	.word	0x40028044

08001a6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e03e      	b.n	8001af8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68d9      	ldr	r1, [r3, #12]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	3206      	adds	r2, #6
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d80c      	bhi.n	8001adc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68d9      	ldr	r1, [r3, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	e004      	b.n	8001ae6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3301      	adds	r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d9bd      	bls.n	8001a7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b10:	611a      	str	r2, [r3, #16]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e046      	b.n	8001bba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6919      	ldr	r1, [r3, #16]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	3212      	adds	r2, #18
 8001b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d80c      	bhi.n	8001baa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	e004      	b.n	8001bb4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d9b5      	bls.n	8001b2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	60da      	str	r2, [r3, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e177      	b.n	8001f04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 8166 	bne.w	8001efe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d130      	bne.n	8001cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d017      	beq.n	8001ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80c0 	beq.w	8001efe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a65      	ldr	r2, [pc, #404]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_GPIO_Init+0x324>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a61      	ldr	r2, [pc, #388]	; (8001f20 <HAL_GPIO_Init+0x328>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <HAL_GPIO_Init+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d037      	beq.n	8001e36 <HAL_GPIO_Init+0x23e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_GPIO_Init+0x330>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_GPIO_Init+0x23a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a56      	ldr	r2, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x334>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d02b      	beq.n	8001e2e <HAL_GPIO_Init+0x236>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a55      	ldr	r2, [pc, #340]	; (8001f30 <HAL_GPIO_Init+0x338>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_Init+0x232>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <HAL_GPIO_Init+0x33c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <HAL_GPIO_Init+0x22e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <HAL_GPIO_Init+0x340>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x22a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_GPIO_Init+0x344>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_GPIO_Init+0x348>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x34c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_GPIO_Init+0x350>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001e0e:	2309      	movs	r3, #9
 8001e10:	e012      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e12:	230a      	movs	r3, #10
 8001e14:	e010      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00e      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x240>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x328>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <HAL_GPIO_Init+0x354>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae84 	bls.w	8001c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40021c00 	.word	0x40021c00
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40022400 	.word	0x40022400
 8001f4c:	40013c00 	.word	0x40013c00

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f84:	b08f      	sub	sp, #60	; 0x3c
 8001f86:	af0a      	add	r7, sp, #40	; 0x28
 8001f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e10f      	b.n	80021b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe ffe6 	bl	8000f80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 f8ad 	bl	8003132 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	687e      	ldr	r6, [r7, #4]
 8001fe0:	466d      	mov	r5, sp
 8001fe2:	f106 0410 	add.w	r4, r6, #16
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff6:	1d33      	adds	r3, r6, #4
 8001ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffa:	6838      	ldr	r0, [r7, #0]
 8001ffc:	f001 f838 	bl	8003070 <USB_CoreInit>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0d0      	b.n	80021b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f001 f89b 	bl	8003154 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e04a      	b.n	80020ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	333d      	adds	r3, #61	; 0x3d
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	333c      	adds	r3, #60	; 0x3c
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	b298      	uxth	r0, r3
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3344      	adds	r3, #68	; 0x44
 8002060:	4602      	mov	r2, r0
 8002062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3340      	adds	r3, #64	; 0x40
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3348      	adds	r3, #72	; 0x48
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	334c      	adds	r3, #76	; 0x4c
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	3354      	adds	r3, #84	; 0x54
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3301      	adds	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3af      	bcc.n	8002024 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e044      	b.n	8002154 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	3301      	adds	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d3b5      	bcc.n	80020ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	687e      	ldr	r6, [r7, #4]
 8002166:	466d      	mov	r5, sp
 8002168:	f106 0410 	add.w	r4, r6, #16
 800216c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002178:	e885 0003 	stmia.w	r5, {r0, r1}
 800217c:	1d33      	adds	r3, r6, #4
 800217e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002180:	6838      	ldr	r0, [r7, #0]
 8002182:	f001 f833 	bl	80031ec <USB_DevInit>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e00d      	b.n	80021b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f9fe 	bl	80035ae <USB_DevDisconnect>

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e267      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00c      	beq.n	8002200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4b85      	ldr	r3, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b82      	ldr	r3, [pc, #520]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e242      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x74>
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a75      	ldr	r2, [pc, #468]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b70      	ldr	r3, [pc, #448]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6f      	ldr	r2, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b6d      	ldr	r3, [pc, #436]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6c      	ldr	r2, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002254:	4b69      	ldr	r3, [pc, #420]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a68      	ldr	r2, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a65      	ldr	r2, [pc, #404]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f882 	bl	800137c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff f87e 	bl	800137c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e207      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xc0>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff f86e 	bl	800137c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff f86a 	bl	800137c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1f3      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d2:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ea:	4b44      	ldr	r3, [pc, #272]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1c7      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4937      	ldr	r1, [pc, #220]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	e03a      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_RCC_OscConfig+0x244>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff f823 	bl	800137c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff f81f 	bl	800137c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1a8      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4925      	ldr	r1, [pc, #148]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x244>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f802 	bl	800137c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237c:	f7fe fffe 	bl	800137c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e187      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d036      	beq.n	8002414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_RCC_OscConfig+0x248>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe ffe2 	bl	800137c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe ffde 	bl	800137c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e167      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x240>)
 80023d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x200>
 80023da:	e01b      	b.n	8002414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_OscConfig+0x248>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7fe ffcb 	bl	800137c <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	e00e      	b.n	8002408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7fe ffc7 	bl	800137c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d907      	bls.n	8002408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e150      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000
 8002404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b88      	ldr	r3, [pc, #544]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800240a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ea      	bne.n	80023ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8097 	beq.w	8002550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b7d      	ldr	r3, [pc, #500]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a7c      	ldr	r2, [pc, #496]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b77      	ldr	r3, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b74      	ldr	r3, [pc, #464]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a73      	ldr	r2, [pc, #460]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7fe ff87 	bl	800137c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe ff83 	bl	800137c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e10c      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x474>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2ea>
 8002498:	4b64      	ldr	r3, [pc, #400]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a63      	ldr	r2, [pc, #396]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	e01c      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x30c>
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	4a5e      	ldr	r2, [pc, #376]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a5b      	ldr	r2, [pc, #364]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024c8:	4b58      	ldr	r3, [pc, #352]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a57      	ldr	r2, [pc, #348]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	4b55      	ldr	r3, [pc, #340]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a54      	ldr	r2, [pc, #336]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80024da:	f023 0304 	bic.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe ff48 	bl	800137c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe ff44 	bl	800137c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0cb      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ee      	beq.n	80024f0 <HAL_RCC_OscConfig+0x334>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7fe ff32 	bl	800137c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7fe ff2e 	bl	800137c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0b5      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ee      	bne.n	800251c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a38      	ldr	r2, [pc, #224]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800254a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a1 	beq.w	800269c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_RCC_OscConfig+0x470>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d05c      	beq.n	8002620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d141      	bne.n	80025f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe ff02 	bl	800137c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fefe 	bl	800137c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e087      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	491b      	ldr	r1, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fed7 	bl	800137c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d2:	f7fe fed3 	bl	800137c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e05c      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_OscConfig+0x470>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x416>
 80025f0:	e054      	b.n	800269c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_RCC_OscConfig+0x478>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fec0 	bl	800137c <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002600:	f7fe febc 	bl	800137c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e045      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_RCC_OscConfig+0x470>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d107      	bne.n	8002638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e038      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000
 8002634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x4ec>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d028      	beq.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d121      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d11a      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800266e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002670:	4293      	cmp	r3, r2
 8002672:	d111      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	3b01      	subs	r3, #1
 8002682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0cc      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b68      	ldr	r3, [pc, #416]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d90c      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b65      	ldr	r3, [pc, #404]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d044      	beq.n	80027cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d119      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	2b03      	cmp	r3, #3
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e067      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4934      	ldr	r1, [pc, #208]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7fe fdee 	bl	800137c <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe fdea 	bl	800137c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f821 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fd4e 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00
 8002868:	40023800 	.word	0x40023800
 800286c:	080047bc 	.word	0x080047bc
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287c:	b094      	sub	sp, #80	; 0x50
 800287e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	647b      	str	r3, [r7, #68]	; 0x44
 8002884:	2300      	movs	r3, #0
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002888:	2300      	movs	r3, #0
 800288a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002890:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d00d      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x40>
 800289c:	2b08      	cmp	r3, #8
 800289e:	f200 80e1 	bhi.w	8002a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x34>
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028aa:	e0db      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028b0:	e0db      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b2:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b6:	e0d8      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ce:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	099b      	lsrs	r3, r3, #6
 80028d4:	2200      	movs	r2, #0
 80028d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e0:	633b      	str	r3, [r7, #48]	; 0x30
 80028e2:	2300      	movs	r3, #0
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
 80028e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	6139      	str	r1, [r7, #16]
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800291c:	4659      	mov	r1, fp
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4651      	mov	r1, sl
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4651      	mov	r1, sl
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4651      	mov	r1, sl
 800292c:	ebb2 0801 	subs.w	r8, r2, r1
 8002930:	4659      	mov	r1, fp
 8002932:	eb63 0901 	sbc.w	r9, r3, r1
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800294a:	4690      	mov	r8, r2
 800294c:	4699      	mov	r9, r3
 800294e:	4623      	mov	r3, r4
 8002950:	eb18 0303 	adds.w	r3, r8, r3
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	462b      	mov	r3, r5
 8002958:	eb49 0303 	adc.w	r3, r9, r3
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800296a:	4629      	mov	r1, r5
 800296c:	024b      	lsls	r3, r1, #9
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002974:	4621      	mov	r1, r4
 8002976:	024a      	lsls	r2, r1, #9
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297e:	2200      	movs	r2, #0
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
 8002982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002988:	f7fd fd9a 	bl	80004c0 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002994:	e058      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	2200      	movs	r2, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	4611      	mov	r1, r2
 80029a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	f04f 0000 	mov.w	r0, #0
 80029b8:	f04f 0100 	mov.w	r1, #0
 80029bc:	0159      	lsls	r1, r3, #5
 80029be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c2:	0150      	lsls	r0, r2, #5
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4641      	mov	r1, r8
 80029ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029e8:	ebb2 040a 	subs.w	r4, r2, sl
 80029ec:	eb63 050b 	sbc.w	r5, r3, fp
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	00eb      	lsls	r3, r5, #3
 80029fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fe:	00e2      	lsls	r2, r4, #3
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	18e3      	adds	r3, r4, r3
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	eb45 0303 	adc.w	r3, r5, r3
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1e:	4629      	mov	r1, r5
 8002a20:	028b      	lsls	r3, r1, #10
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a28:	4621      	mov	r1, r4
 8002a2a:	028a      	lsls	r2, r1, #10
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a32:	2200      	movs	r2, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	61fa      	str	r2, [r7, #28]
 8002a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3c:	f7fd fd40 	bl	80004c0 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3750      	adds	r7, #80	; 0x50
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	080047cc 	.word	0x080047cc

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff ffdc 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0b5b      	lsrs	r3, r3, #13
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	080047cc 	.word	0x080047cc

08002aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e03f      	b.n	8002b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe f9ec 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f829 	bl	8002b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b0c0      	sub	sp, #256	; 0x100
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	68d9      	ldr	r1, [r3, #12]
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	ea40 0301 	orr.w	r3, r0, r1
 8002bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002be0:	f021 010c 	bic.w	r1, r1, #12
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	6999      	ldr	r1, [r3, #24]
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	ea40 0301 	orr.w	r3, r0, r1
 8002c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b8f      	ldr	r3, [pc, #572]	; (8002e54 <UART_SetConfig+0x2cc>)
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d005      	beq.n	8002c28 <UART_SetConfig+0xa0>
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d104      	bne.n	8002c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c28:	f7ff ff4c 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8002c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c30:	e003      	b.n	8002c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c32:	f7ff ff33 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8002c36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c44:	f040 810c 	bne.w	8002e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	1891      	adds	r1, r2, r2
 8002c60:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c62:	415b      	adcs	r3, r3
 8002c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	eb12 0801 	adds.w	r8, r2, r1
 8002c70:	4629      	mov	r1, r5
 8002c72:	eb43 0901 	adc.w	r9, r3, r1
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	eb18 0303 	adds.w	r3, r8, r3
 8002c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c98:	462b      	mov	r3, r5
 8002c9a:	eb49 0303 	adc.w	r3, r9, r3
 8002c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	18db      	adds	r3, r3, r3
 8002cba:	653b      	str	r3, [r7, #80]	; 0x50
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	eb42 0303 	adc.w	r3, r2, r3
 8002cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ccc:	f7fd fbf8 	bl	80004c0 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	011c      	lsls	r4, r3, #4
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d00:	4641      	mov	r1, r8
 8002d02:	eb12 0a01 	adds.w	sl, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb43 0b01 	adc.w	fp, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d20:	4692      	mov	sl, r2
 8002d22:	469b      	mov	fp, r3
 8002d24:	4643      	mov	r3, r8
 8002d26:	eb1a 0303 	adds.w	r3, sl, r3
 8002d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	eb4b 0303 	adc.w	r3, fp, r3
 8002d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	18db      	adds	r3, r3, r3
 8002d50:	643b      	str	r3, [r7, #64]	; 0x40
 8002d52:	4613      	mov	r3, r2
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d62:	f7fd fbad 	bl	80004c0 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2264      	movs	r2, #100	; 0x64
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	1acb      	subs	r3, r1, r3
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002d84:	fba3 2302 	umull	r2, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d90:	441c      	add	r4, r3
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dac:	415b      	adcs	r3, r3
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6339      	str	r1, [r7, #48]	; 0x30
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002de8:	464b      	mov	r3, r9
 8002dea:	460a      	mov	r2, r1
 8002dec:	eb42 0303 	adc.w	r3, r2, r3
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e08:	460b      	mov	r3, r1
 8002e0a:	18db      	adds	r3, r3, r3
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0e:	4613      	mov	r3, r2
 8002e10:	eb42 0303 	adc.w	r3, r2, r3
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e1e:	f7fd fb4f 	bl	80004c0 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002e28:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2164      	movs	r1, #100	; 0x64
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	3332      	adds	r3, #50	; 0x32
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 0207 	and.w	r2, r3, #7
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4422      	add	r2, r4
 8002e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e50:	e105      	b.n	800305e <UART_SetConfig+0x4d6>
 8002e52:	bf00      	nop
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e72:	4642      	mov	r2, r8
 8002e74:	464b      	mov	r3, r9
 8002e76:	1891      	adds	r1, r2, r2
 8002e78:	6239      	str	r1, [r7, #32]
 8002e7a:	415b      	adcs	r3, r3
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e82:	4641      	mov	r1, r8
 8002e84:	1854      	adds	r4, r2, r1
 8002e86:	4649      	mov	r1, r9
 8002e88:	eb43 0501 	adc.w	r5, r3, r1
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	00eb      	lsls	r3, r5, #3
 8002e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9a:	00e2      	lsls	r2, r4, #3
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4643      	mov	r3, r8
 8002ea2:	18e3      	adds	r3, r4, r3
 8002ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	eb45 0303 	adc.w	r3, r5, r3
 8002eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ece:	4629      	mov	r1, r5
 8002ed0:	008b      	lsls	r3, r1, #2
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed8:	4621      	mov	r1, r4
 8002eda:	008a      	lsls	r2, r1, #2
 8002edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ee0:	f7fd faee 	bl	80004c0 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4b60      	ldr	r3, [pc, #384]	; (800306c <UART_SetConfig+0x4e4>)
 8002eea:	fba3 2302 	umull	r2, r3, r3, r2
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	011c      	lsls	r4, r3, #4
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002efc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	1891      	adds	r1, r2, r2
 8002f0a:	61b9      	str	r1, [r7, #24]
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f14:	4641      	mov	r1, r8
 8002f16:	1851      	adds	r1, r2, r1
 8002f18:	6139      	str	r1, [r7, #16]
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	414b      	adcs	r3, r1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	00cb      	lsls	r3, r1, #3
 8002f30:	4651      	mov	r1, sl
 8002f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f36:	4651      	mov	r1, sl
 8002f38:	00ca      	lsls	r2, r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4642      	mov	r2, r8
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f48:	464b      	mov	r3, r9
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	eb42 0303 	adc.w	r3, r2, r3
 8002f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	008b      	lsls	r3, r1, #2
 8002f70:	4641      	mov	r1, r8
 8002f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f76:	4641      	mov	r1, r8
 8002f78:	008a      	lsls	r2, r1, #2
 8002f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f7e:	f7fd fa9f 	bl	80004c0 <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <UART_SetConfig+0x4e4>)
 8002f88:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	2164      	movs	r1, #100	; 0x64
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	3332      	adds	r3, #50	; 0x32
 8002f9a:	4a34      	ldr	r2, [pc, #208]	; (800306c <UART_SetConfig+0x4e4>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa6:	441c      	add	r4, r3
 8002fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fac:	2200      	movs	r2, #0
 8002fae:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	464b      	mov	r3, r9
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1851      	adds	r1, r2, r1
 8002fca:	6039      	str	r1, [r7, #0]
 8002fcc:	4649      	mov	r1, r9
 8002fce:	414b      	adcs	r3, r1
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fde:	4659      	mov	r1, fp
 8002fe0:	00cb      	lsls	r3, r1, #3
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe8:	4651      	mov	r1, sl
 8002fea:	00ca      	lsls	r2, r1, #3
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4642      	mov	r2, r8
 8002ff4:	189b      	adds	r3, r3, r2
 8002ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	eb42 0303 	adc.w	r3, r2, r3
 8003000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	663b      	str	r3, [r7, #96]	; 0x60
 800300c:	667a      	str	r2, [r7, #100]	; 0x64
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800301a:	4649      	mov	r1, r9
 800301c:	008b      	lsls	r3, r1, #2
 800301e:	4641      	mov	r1, r8
 8003020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003024:	4641      	mov	r1, r8
 8003026:	008a      	lsls	r2, r1, #2
 8003028:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800302c:	f7fd fa48 	bl	80004c0 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <UART_SetConfig+0x4e4>)
 8003036:	fba3 1302 	umull	r1, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2164      	movs	r1, #100	; 0x64
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	3332      	adds	r3, #50	; 0x32
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <UART_SetConfig+0x4e4>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4422      	add	r2, r4
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306a:	bf00      	nop
 800306c:	51eb851f 	.word	0x51eb851f

08003070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003070:	b084      	sub	sp, #16
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	f107 001c 	add.w	r0, r7, #28
 800307e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d122      	bne.n	80030ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800309c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80030b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d105      	bne.n	80030c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 faa2 	bl	800360c <USB_CoreReset>
 80030c8:	4603      	mov	r3, r0
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e01a      	b.n	8003104 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa96 	bl	800360c <USB_CoreReset>
 80030e0:	4603      	mov	r3, r0
 80030e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
 80030f6:	e005      	b.n	8003104 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	2b01      	cmp	r3, #1
 8003108:	d10b      	bne.n	8003122 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f043 0206 	orr.w	r2, r3, #6
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800312e:	b004      	add	sp, #16
 8003130:	4770      	bx	lr

08003132 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0201 	bic.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d115      	bne.n	80031a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003182:	2001      	movs	r0, #1
 8003184:	f7fe f906 	bl	8001394 <HAL_Delay>
      ms++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa2e 	bl	80035f0 <USB_GetMode>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d01e      	beq.n	80031d8 <USB_SetCurrentMode+0x84>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b31      	cmp	r3, #49	; 0x31
 800319e:	d9f0      	bls.n	8003182 <USB_SetCurrentMode+0x2e>
 80031a0:	e01a      	b.n	80031d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d115      	bne.n	80031d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7fe f8ed 	bl	8001394 <HAL_Delay>
      ms++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3301      	adds	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa15 	bl	80035f0 <USB_GetMode>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <USB_SetCurrentMode+0x84>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b31      	cmp	r3, #49	; 0x31
 80031d0:	d9f0      	bls.n	80031b4 <USB_SetCurrentMode+0x60>
 80031d2:	e001      	b.n	80031d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e005      	b.n	80031e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b32      	cmp	r3, #50	; 0x32
 80031dc:	d101      	bne.n	80031e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031ec:	b084      	sub	sp, #16
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e009      	b.n	8003220 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	3340      	adds	r3, #64	; 0x40
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	2200      	movs	r2, #0
 8003218:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3301      	adds	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b0e      	cmp	r3, #14
 8003224:	d9f2      	bls.n	800320c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11c      	bne.n	8003266 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323a:	f043 0302 	orr.w	r3, r3, #2
 800323e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
 8003264:	e00b      	b.n	800327e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003284:	461a      	mov	r2, r3
 8003286:	2300      	movs	r3, #0
 8003288:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003290:	4619      	mov	r1, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	461a      	mov	r2, r3
 800329a:	680b      	ldr	r3, [r1, #0]
 800329c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10c      	bne.n	80032be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032aa:	2100      	movs	r1, #0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f965 	bl	800357c <USB_SetDevSpeed>
 80032b2:	e008      	b.n	80032c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032b4:	2101      	movs	r1, #1
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f960 	bl	800357c <USB_SetDevSpeed>
 80032bc:	e003      	b.n	80032c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032be:	2103      	movs	r1, #3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f95b 	bl	800357c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032c6:	2110      	movs	r1, #16
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8f3 	bl	80034b4 <USB_FlushTxFifo>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f91f 	bl	800351c <USB_FlushRxFifo>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fa:	461a      	mov	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	461a      	mov	r2, r3
 8003308:	2300      	movs	r3, #0
 800330a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e043      	b.n	800339a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003328:	d118      	bne.n	800335c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e013      	b.n	800336e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003352:	461a      	mov	r2, r3
 8003354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e008      	b.n	800336e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003368:	461a      	mov	r2, r3
 800336a:	2300      	movs	r3, #0
 800336c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	461a      	mov	r2, r3
 800337c:	2300      	movs	r3, #0
 800337e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338c:	461a      	mov	r2, r3
 800338e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003392:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3301      	adds	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d3b7      	bcc.n	8003312 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	e043      	b.n	8003430 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033be:	d118      	bne.n	80033f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e013      	b.n	8003404 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e008      	b.n	8003404 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2300      	movs	r3, #0
 8003402:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	2300      	movs	r3, #0
 8003414:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003428:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	3301      	adds	r3, #1
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	429a      	cmp	r2, r3
 8003436:	d3b7      	bcc.n	80033a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800344a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <USB_DevInit+0x2c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f043 0208 	orr.w	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034ac:	b004      	add	sp, #16
 80034ae:	4770      	bx	lr
 80034b0:	803c3800 	.word	0x803c3800

080034b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <USB_FlushTxFifo+0x64>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e01b      	b.n	800350c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	daf2      	bge.n	80034c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	019b      	lsls	r3, r3, #6
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <USB_FlushTxFifo+0x64>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e006      	b.n	800350c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	d0f0      	beq.n	80034ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	00030d40 	.word	0x00030d40

0800351c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <USB_FlushRxFifo+0x5c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e018      	b.n	800356c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	daf2      	bge.n	8003528 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2210      	movs	r2, #16
 800354a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a08      	ldr	r2, [pc, #32]	; (8003578 <USB_FlushRxFifo+0x5c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e006      	b.n	800356c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b10      	cmp	r3, #16
 8003568:	d0f0      	beq.n	800354c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	00030d40 	.word	0x00030d40

0800357c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	68f9      	ldr	r1, [r7, #12]
 8003598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80035c8:	f023 0303 	bic.w	r3, r3, #3
 80035cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0301 	and.w	r3, r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <USB_CoreReset+0x64>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e01b      	b.n	8003662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	daf2      	bge.n	8003618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <USB_CoreReset+0x64>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e006      	b.n	8003662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d0f0      	beq.n	8003642 <USB_CoreReset+0x36>

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	00030d40 	.word	0x00030d40

08003674 <__errno>:
 8003674:	4b01      	ldr	r3, [pc, #4]	; (800367c <__errno+0x8>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	2000000c 	.word	0x2000000c

08003680 <__libc_init_array>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4d0d      	ldr	r5, [pc, #52]	; (80036b8 <__libc_init_array+0x38>)
 8003684:	4c0d      	ldr	r4, [pc, #52]	; (80036bc <__libc_init_array+0x3c>)
 8003686:	1b64      	subs	r4, r4, r5
 8003688:	10a4      	asrs	r4, r4, #2
 800368a:	2600      	movs	r6, #0
 800368c:	42a6      	cmp	r6, r4
 800368e:	d109      	bne.n	80036a4 <__libc_init_array+0x24>
 8003690:	4d0b      	ldr	r5, [pc, #44]	; (80036c0 <__libc_init_array+0x40>)
 8003692:	4c0c      	ldr	r4, [pc, #48]	; (80036c4 <__libc_init_array+0x44>)
 8003694:	f001 f886 	bl	80047a4 <_init>
 8003698:	1b64      	subs	r4, r4, r5
 800369a:	10a4      	asrs	r4, r4, #2
 800369c:	2600      	movs	r6, #0
 800369e:	42a6      	cmp	r6, r4
 80036a0:	d105      	bne.n	80036ae <__libc_init_array+0x2e>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a8:	4798      	blx	r3
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7ee      	b.n	800368c <__libc_init_array+0xc>
 80036ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b2:	4798      	blx	r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	e7f2      	b.n	800369e <__libc_init_array+0x1e>
 80036b8:	08004924 	.word	0x08004924
 80036bc:	08004924 	.word	0x08004924
 80036c0:	08004924 	.word	0x08004924
 80036c4:	08004928 	.word	0x08004928

080036c8 <memset>:
 80036c8:	4402      	add	r2, r0
 80036ca:	4603      	mov	r3, r0
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	f803 1b01 	strb.w	r1, [r3], #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <srand>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <srand+0x44>)
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80036e0:	4604      	mov	r4, r0
 80036e2:	b9b3      	cbnz	r3, 8003712 <srand+0x3a>
 80036e4:	2018      	movs	r0, #24
 80036e6:	f000 f893 	bl	8003810 <malloc>
 80036ea:	4602      	mov	r2, r0
 80036ec:	63a8      	str	r0, [r5, #56]	; 0x38
 80036ee:	b920      	cbnz	r0, 80036fa <srand+0x22>
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <srand+0x48>)
 80036f2:	480c      	ldr	r0, [pc, #48]	; (8003724 <srand+0x4c>)
 80036f4:	2142      	movs	r1, #66	; 0x42
 80036f6:	f000 f85b 	bl	80037b0 <__assert_func>
 80036fa:	490b      	ldr	r1, [pc, #44]	; (8003728 <srand+0x50>)
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <srand+0x54>)
 80036fe:	e9c0 1300 	strd	r1, r3, [r0]
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <srand+0x58>)
 8003704:	6083      	str	r3, [r0, #8]
 8003706:	230b      	movs	r3, #11
 8003708:	8183      	strh	r3, [r0, #12]
 800370a:	2100      	movs	r1, #0
 800370c:	2001      	movs	r0, #1
 800370e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003712:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003714:	2200      	movs	r2, #0
 8003716:	611c      	str	r4, [r3, #16]
 8003718:	615a      	str	r2, [r3, #20]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	2000000c 	.word	0x2000000c
 8003720:	080047d8 	.word	0x080047d8
 8003724:	080047ef 	.word	0x080047ef
 8003728:	abcd330e 	.word	0xabcd330e
 800372c:	e66d1234 	.word	0xe66d1234
 8003730:	0005deec 	.word	0x0005deec

08003734 <rand>:
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <rand+0x5c>)
 8003736:	b510      	push	{r4, lr}
 8003738:	681c      	ldr	r4, [r3, #0]
 800373a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800373c:	b9b3      	cbnz	r3, 800376c <rand+0x38>
 800373e:	2018      	movs	r0, #24
 8003740:	f000 f866 	bl	8003810 <malloc>
 8003744:	63a0      	str	r0, [r4, #56]	; 0x38
 8003746:	b928      	cbnz	r0, 8003754 <rand+0x20>
 8003748:	4602      	mov	r2, r0
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <rand+0x60>)
 800374c:	4812      	ldr	r0, [pc, #72]	; (8003798 <rand+0x64>)
 800374e:	214e      	movs	r1, #78	; 0x4e
 8003750:	f000 f82e 	bl	80037b0 <__assert_func>
 8003754:	4a11      	ldr	r2, [pc, #68]	; (800379c <rand+0x68>)
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <rand+0x6c>)
 8003758:	e9c0 2300 	strd	r2, r3, [r0]
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <rand+0x70>)
 800375e:	6083      	str	r3, [r0, #8]
 8003760:	230b      	movs	r3, #11
 8003762:	8183      	strh	r3, [r0, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	2300      	movs	r3, #0
 8003768:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800376c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <rand+0x74>)
 8003770:	6920      	ldr	r0, [r4, #16]
 8003772:	6963      	ldr	r3, [r4, #20]
 8003774:	490d      	ldr	r1, [pc, #52]	; (80037ac <rand+0x78>)
 8003776:	4342      	muls	r2, r0
 8003778:	fb01 2203 	mla	r2, r1, r3, r2
 800377c:	fba0 0101 	umull	r0, r1, r0, r1
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	eb42 0001 	adc.w	r0, r2, r1
 8003786:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800378a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800378e:	bd10      	pop	{r4, pc}
 8003790:	2000000c 	.word	0x2000000c
 8003794:	080047d8 	.word	0x080047d8
 8003798:	080047ef 	.word	0x080047ef
 800379c:	abcd330e 	.word	0xabcd330e
 80037a0:	e66d1234 	.word	0xe66d1234
 80037a4:	0005deec 	.word	0x0005deec
 80037a8:	5851f42d 	.word	0x5851f42d
 80037ac:	4c957f2d 	.word	0x4c957f2d

080037b0 <__assert_func>:
 80037b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037b2:	4614      	mov	r4, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <__assert_func+0x2c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4605      	mov	r5, r0
 80037bc:	68d8      	ldr	r0, [r3, #12]
 80037be:	b14c      	cbz	r4, 80037d4 <__assert_func+0x24>
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <__assert_func+0x30>)
 80037c2:	9100      	str	r1, [sp, #0]
 80037c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80037c8:	4906      	ldr	r1, [pc, #24]	; (80037e4 <__assert_func+0x34>)
 80037ca:	462b      	mov	r3, r5
 80037cc:	f000 f80e 	bl	80037ec <fiprintf>
 80037d0:	f000 fcc4 	bl	800415c <abort>
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <__assert_func+0x38>)
 80037d6:	461c      	mov	r4, r3
 80037d8:	e7f3      	b.n	80037c2 <__assert_func+0x12>
 80037da:	bf00      	nop
 80037dc:	2000000c 	.word	0x2000000c
 80037e0:	0800484a 	.word	0x0800484a
 80037e4:	08004857 	.word	0x08004857
 80037e8:	08004885 	.word	0x08004885

080037ec <fiprintf>:
 80037ec:	b40e      	push	{r1, r2, r3}
 80037ee:	b503      	push	{r0, r1, lr}
 80037f0:	4601      	mov	r1, r0
 80037f2:	ab03      	add	r3, sp, #12
 80037f4:	4805      	ldr	r0, [pc, #20]	; (800380c <fiprintf+0x20>)
 80037f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80037fa:	6800      	ldr	r0, [r0, #0]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	f000 f919 	bl	8003a34 <_vfiprintf_r>
 8003802:	b002      	add	sp, #8
 8003804:	f85d eb04 	ldr.w	lr, [sp], #4
 8003808:	b003      	add	sp, #12
 800380a:	4770      	bx	lr
 800380c:	2000000c 	.word	0x2000000c

08003810 <malloc>:
 8003810:	4b02      	ldr	r3, [pc, #8]	; (800381c <malloc+0xc>)
 8003812:	4601      	mov	r1, r0
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	f000 b86f 	b.w	80038f8 <_malloc_r>
 800381a:	bf00      	nop
 800381c:	2000000c 	.word	0x2000000c

08003820 <_free_r>:
 8003820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003822:	2900      	cmp	r1, #0
 8003824:	d044      	beq.n	80038b0 <_free_r+0x90>
 8003826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800382a:	9001      	str	r0, [sp, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f1a1 0404 	sub.w	r4, r1, #4
 8003832:	bfb8      	it	lt
 8003834:	18e4      	addlt	r4, r4, r3
 8003836:	f000 feb9 	bl	80045ac <__malloc_lock>
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <_free_r+0x94>)
 800383c:	9801      	ldr	r0, [sp, #4]
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	b933      	cbnz	r3, 8003850 <_free_r+0x30>
 8003842:	6063      	str	r3, [r4, #4]
 8003844:	6014      	str	r4, [r2, #0]
 8003846:	b003      	add	sp, #12
 8003848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800384c:	f000 beb4 	b.w	80045b8 <__malloc_unlock>
 8003850:	42a3      	cmp	r3, r4
 8003852:	d908      	bls.n	8003866 <_free_r+0x46>
 8003854:	6825      	ldr	r5, [r4, #0]
 8003856:	1961      	adds	r1, r4, r5
 8003858:	428b      	cmp	r3, r1
 800385a:	bf01      	itttt	eq
 800385c:	6819      	ldreq	r1, [r3, #0]
 800385e:	685b      	ldreq	r3, [r3, #4]
 8003860:	1949      	addeq	r1, r1, r5
 8003862:	6021      	streq	r1, [r4, #0]
 8003864:	e7ed      	b.n	8003842 <_free_r+0x22>
 8003866:	461a      	mov	r2, r3
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	b10b      	cbz	r3, 8003870 <_free_r+0x50>
 800386c:	42a3      	cmp	r3, r4
 800386e:	d9fa      	bls.n	8003866 <_free_r+0x46>
 8003870:	6811      	ldr	r1, [r2, #0]
 8003872:	1855      	adds	r5, r2, r1
 8003874:	42a5      	cmp	r5, r4
 8003876:	d10b      	bne.n	8003890 <_free_r+0x70>
 8003878:	6824      	ldr	r4, [r4, #0]
 800387a:	4421      	add	r1, r4
 800387c:	1854      	adds	r4, r2, r1
 800387e:	42a3      	cmp	r3, r4
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	d1e0      	bne.n	8003846 <_free_r+0x26>
 8003884:	681c      	ldr	r4, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	6053      	str	r3, [r2, #4]
 800388a:	4421      	add	r1, r4
 800388c:	6011      	str	r1, [r2, #0]
 800388e:	e7da      	b.n	8003846 <_free_r+0x26>
 8003890:	d902      	bls.n	8003898 <_free_r+0x78>
 8003892:	230c      	movs	r3, #12
 8003894:	6003      	str	r3, [r0, #0]
 8003896:	e7d6      	b.n	8003846 <_free_r+0x26>
 8003898:	6825      	ldr	r5, [r4, #0]
 800389a:	1961      	adds	r1, r4, r5
 800389c:	428b      	cmp	r3, r1
 800389e:	bf04      	itt	eq
 80038a0:	6819      	ldreq	r1, [r3, #0]
 80038a2:	685b      	ldreq	r3, [r3, #4]
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	bf04      	itt	eq
 80038a8:	1949      	addeq	r1, r1, r5
 80038aa:	6021      	streq	r1, [r4, #0]
 80038ac:	6054      	str	r4, [r2, #4]
 80038ae:	e7ca      	b.n	8003846 <_free_r+0x26>
 80038b0:	b003      	add	sp, #12
 80038b2:	bd30      	pop	{r4, r5, pc}
 80038b4:	20000814 	.word	0x20000814

080038b8 <sbrk_aligned>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4e0e      	ldr	r6, [pc, #56]	; (80038f4 <sbrk_aligned+0x3c>)
 80038bc:	460c      	mov	r4, r1
 80038be:	6831      	ldr	r1, [r6, #0]
 80038c0:	4605      	mov	r5, r0
 80038c2:	b911      	cbnz	r1, 80038ca <sbrk_aligned+0x12>
 80038c4:	f000 fb7a 	bl	8003fbc <_sbrk_r>
 80038c8:	6030      	str	r0, [r6, #0]
 80038ca:	4621      	mov	r1, r4
 80038cc:	4628      	mov	r0, r5
 80038ce:	f000 fb75 	bl	8003fbc <_sbrk_r>
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	d00a      	beq.n	80038ec <sbrk_aligned+0x34>
 80038d6:	1cc4      	adds	r4, r0, #3
 80038d8:	f024 0403 	bic.w	r4, r4, #3
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d007      	beq.n	80038f0 <sbrk_aligned+0x38>
 80038e0:	1a21      	subs	r1, r4, r0
 80038e2:	4628      	mov	r0, r5
 80038e4:	f000 fb6a 	bl	8003fbc <_sbrk_r>
 80038e8:	3001      	adds	r0, #1
 80038ea:	d101      	bne.n	80038f0 <sbrk_aligned+0x38>
 80038ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80038f0:	4620      	mov	r0, r4
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	20000818 	.word	0x20000818

080038f8 <_malloc_r>:
 80038f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038fc:	1ccd      	adds	r5, r1, #3
 80038fe:	f025 0503 	bic.w	r5, r5, #3
 8003902:	3508      	adds	r5, #8
 8003904:	2d0c      	cmp	r5, #12
 8003906:	bf38      	it	cc
 8003908:	250c      	movcc	r5, #12
 800390a:	2d00      	cmp	r5, #0
 800390c:	4607      	mov	r7, r0
 800390e:	db01      	blt.n	8003914 <_malloc_r+0x1c>
 8003910:	42a9      	cmp	r1, r5
 8003912:	d905      	bls.n	8003920 <_malloc_r+0x28>
 8003914:	230c      	movs	r3, #12
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	2600      	movs	r6, #0
 800391a:	4630      	mov	r0, r6
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003920:	4e2e      	ldr	r6, [pc, #184]	; (80039dc <_malloc_r+0xe4>)
 8003922:	f000 fe43 	bl	80045ac <__malloc_lock>
 8003926:	6833      	ldr	r3, [r6, #0]
 8003928:	461c      	mov	r4, r3
 800392a:	bb34      	cbnz	r4, 800397a <_malloc_r+0x82>
 800392c:	4629      	mov	r1, r5
 800392e:	4638      	mov	r0, r7
 8003930:	f7ff ffc2 	bl	80038b8 <sbrk_aligned>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	4604      	mov	r4, r0
 8003938:	d14d      	bne.n	80039d6 <_malloc_r+0xde>
 800393a:	6834      	ldr	r4, [r6, #0]
 800393c:	4626      	mov	r6, r4
 800393e:	2e00      	cmp	r6, #0
 8003940:	d140      	bne.n	80039c4 <_malloc_r+0xcc>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	4631      	mov	r1, r6
 8003946:	4638      	mov	r0, r7
 8003948:	eb04 0803 	add.w	r8, r4, r3
 800394c:	f000 fb36 	bl	8003fbc <_sbrk_r>
 8003950:	4580      	cmp	r8, r0
 8003952:	d13a      	bne.n	80039ca <_malloc_r+0xd2>
 8003954:	6821      	ldr	r1, [r4, #0]
 8003956:	3503      	adds	r5, #3
 8003958:	1a6d      	subs	r5, r5, r1
 800395a:	f025 0503 	bic.w	r5, r5, #3
 800395e:	3508      	adds	r5, #8
 8003960:	2d0c      	cmp	r5, #12
 8003962:	bf38      	it	cc
 8003964:	250c      	movcc	r5, #12
 8003966:	4629      	mov	r1, r5
 8003968:	4638      	mov	r0, r7
 800396a:	f7ff ffa5 	bl	80038b8 <sbrk_aligned>
 800396e:	3001      	adds	r0, #1
 8003970:	d02b      	beq.n	80039ca <_malloc_r+0xd2>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	442b      	add	r3, r5
 8003976:	6023      	str	r3, [r4, #0]
 8003978:	e00e      	b.n	8003998 <_malloc_r+0xa0>
 800397a:	6822      	ldr	r2, [r4, #0]
 800397c:	1b52      	subs	r2, r2, r5
 800397e:	d41e      	bmi.n	80039be <_malloc_r+0xc6>
 8003980:	2a0b      	cmp	r2, #11
 8003982:	d916      	bls.n	80039b2 <_malloc_r+0xba>
 8003984:	1961      	adds	r1, r4, r5
 8003986:	42a3      	cmp	r3, r4
 8003988:	6025      	str	r5, [r4, #0]
 800398a:	bf18      	it	ne
 800398c:	6059      	strne	r1, [r3, #4]
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	bf08      	it	eq
 8003992:	6031      	streq	r1, [r6, #0]
 8003994:	5162      	str	r2, [r4, r5]
 8003996:	604b      	str	r3, [r1, #4]
 8003998:	4638      	mov	r0, r7
 800399a:	f104 060b 	add.w	r6, r4, #11
 800399e:	f000 fe0b 	bl	80045b8 <__malloc_unlock>
 80039a2:	f026 0607 	bic.w	r6, r6, #7
 80039a6:	1d23      	adds	r3, r4, #4
 80039a8:	1af2      	subs	r2, r6, r3
 80039aa:	d0b6      	beq.n	800391a <_malloc_r+0x22>
 80039ac:	1b9b      	subs	r3, r3, r6
 80039ae:	50a3      	str	r3, [r4, r2]
 80039b0:	e7b3      	b.n	800391a <_malloc_r+0x22>
 80039b2:	6862      	ldr	r2, [r4, #4]
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	bf0c      	ite	eq
 80039b8:	6032      	streq	r2, [r6, #0]
 80039ba:	605a      	strne	r2, [r3, #4]
 80039bc:	e7ec      	b.n	8003998 <_malloc_r+0xa0>
 80039be:	4623      	mov	r3, r4
 80039c0:	6864      	ldr	r4, [r4, #4]
 80039c2:	e7b2      	b.n	800392a <_malloc_r+0x32>
 80039c4:	4634      	mov	r4, r6
 80039c6:	6876      	ldr	r6, [r6, #4]
 80039c8:	e7b9      	b.n	800393e <_malloc_r+0x46>
 80039ca:	230c      	movs	r3, #12
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4638      	mov	r0, r7
 80039d0:	f000 fdf2 	bl	80045b8 <__malloc_unlock>
 80039d4:	e7a1      	b.n	800391a <_malloc_r+0x22>
 80039d6:	6025      	str	r5, [r4, #0]
 80039d8:	e7de      	b.n	8003998 <_malloc_r+0xa0>
 80039da:	bf00      	nop
 80039dc:	20000814 	.word	0x20000814

080039e0 <__sfputc_r>:
 80039e0:	6893      	ldr	r3, [r2, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	b410      	push	{r4}
 80039e8:	6093      	str	r3, [r2, #8]
 80039ea:	da08      	bge.n	80039fe <__sfputc_r+0x1e>
 80039ec:	6994      	ldr	r4, [r2, #24]
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	db01      	blt.n	80039f6 <__sfputc_r+0x16>
 80039f2:	290a      	cmp	r1, #10
 80039f4:	d103      	bne.n	80039fe <__sfputc_r+0x1e>
 80039f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039fa:	f000 baef 	b.w	8003fdc <__swbuf_r>
 80039fe:	6813      	ldr	r3, [r2, #0]
 8003a00:	1c58      	adds	r0, r3, #1
 8003a02:	6010      	str	r0, [r2, #0]
 8003a04:	7019      	strb	r1, [r3, #0]
 8003a06:	4608      	mov	r0, r1
 8003a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <__sfputs_r>:
 8003a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a10:	4606      	mov	r6, r0
 8003a12:	460f      	mov	r7, r1
 8003a14:	4614      	mov	r4, r2
 8003a16:	18d5      	adds	r5, r2, r3
 8003a18:	42ac      	cmp	r4, r5
 8003a1a:	d101      	bne.n	8003a20 <__sfputs_r+0x12>
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	e007      	b.n	8003a30 <__sfputs_r+0x22>
 8003a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a24:	463a      	mov	r2, r7
 8003a26:	4630      	mov	r0, r6
 8003a28:	f7ff ffda 	bl	80039e0 <__sfputc_r>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d1f3      	bne.n	8003a18 <__sfputs_r+0xa>
 8003a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a34 <_vfiprintf_r>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	460d      	mov	r5, r1
 8003a3a:	b09d      	sub	sp, #116	; 0x74
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	4698      	mov	r8, r3
 8003a40:	4606      	mov	r6, r0
 8003a42:	b118      	cbz	r0, 8003a4c <_vfiprintf_r+0x18>
 8003a44:	6983      	ldr	r3, [r0, #24]
 8003a46:	b90b      	cbnz	r3, 8003a4c <_vfiprintf_r+0x18>
 8003a48:	f000 fcaa 	bl	80043a0 <__sinit>
 8003a4c:	4b89      	ldr	r3, [pc, #548]	; (8003c74 <_vfiprintf_r+0x240>)
 8003a4e:	429d      	cmp	r5, r3
 8003a50:	d11b      	bne.n	8003a8a <_vfiprintf_r+0x56>
 8003a52:	6875      	ldr	r5, [r6, #4]
 8003a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a56:	07d9      	lsls	r1, r3, #31
 8003a58:	d405      	bmi.n	8003a66 <_vfiprintf_r+0x32>
 8003a5a:	89ab      	ldrh	r3, [r5, #12]
 8003a5c:	059a      	lsls	r2, r3, #22
 8003a5e:	d402      	bmi.n	8003a66 <_vfiprintf_r+0x32>
 8003a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a62:	f000 fd3b 	bl	80044dc <__retarget_lock_acquire_recursive>
 8003a66:	89ab      	ldrh	r3, [r5, #12]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	d501      	bpl.n	8003a70 <_vfiprintf_r+0x3c>
 8003a6c:	692b      	ldr	r3, [r5, #16]
 8003a6e:	b9eb      	cbnz	r3, 8003aac <_vfiprintf_r+0x78>
 8003a70:	4629      	mov	r1, r5
 8003a72:	4630      	mov	r0, r6
 8003a74:	f000 fb04 	bl	8004080 <__swsetup_r>
 8003a78:	b1c0      	cbz	r0, 8003aac <_vfiprintf_r+0x78>
 8003a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a7c:	07dc      	lsls	r4, r3, #31
 8003a7e:	d50e      	bpl.n	8003a9e <_vfiprintf_r+0x6a>
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a84:	b01d      	add	sp, #116	; 0x74
 8003a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8a:	4b7b      	ldr	r3, [pc, #492]	; (8003c78 <_vfiprintf_r+0x244>)
 8003a8c:	429d      	cmp	r5, r3
 8003a8e:	d101      	bne.n	8003a94 <_vfiprintf_r+0x60>
 8003a90:	68b5      	ldr	r5, [r6, #8]
 8003a92:	e7df      	b.n	8003a54 <_vfiprintf_r+0x20>
 8003a94:	4b79      	ldr	r3, [pc, #484]	; (8003c7c <_vfiprintf_r+0x248>)
 8003a96:	429d      	cmp	r5, r3
 8003a98:	bf08      	it	eq
 8003a9a:	68f5      	ldreq	r5, [r6, #12]
 8003a9c:	e7da      	b.n	8003a54 <_vfiprintf_r+0x20>
 8003a9e:	89ab      	ldrh	r3, [r5, #12]
 8003aa0:	0598      	lsls	r0, r3, #22
 8003aa2:	d4ed      	bmi.n	8003a80 <_vfiprintf_r+0x4c>
 8003aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003aa6:	f000 fd1a 	bl	80044de <__retarget_lock_release_recursive>
 8003aaa:	e7e9      	b.n	8003a80 <_vfiprintf_r+0x4c>
 8003aac:	2300      	movs	r3, #0
 8003aae:	9309      	str	r3, [sp, #36]	; 0x24
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aba:	2330      	movs	r3, #48	; 0x30
 8003abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c80 <_vfiprintf_r+0x24c>
 8003ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ac4:	f04f 0901 	mov.w	r9, #1
 8003ac8:	4623      	mov	r3, r4
 8003aca:	469a      	mov	sl, r3
 8003acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ad0:	b10a      	cbz	r2, 8003ad6 <_vfiprintf_r+0xa2>
 8003ad2:	2a25      	cmp	r2, #37	; 0x25
 8003ad4:	d1f9      	bne.n	8003aca <_vfiprintf_r+0x96>
 8003ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8003ada:	d00b      	beq.n	8003af4 <_vfiprintf_r+0xc0>
 8003adc:	465b      	mov	r3, fp
 8003ade:	4622      	mov	r2, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f7ff ff93 	bl	8003a0e <__sfputs_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	f000 80aa 	beq.w	8003c42 <_vfiprintf_r+0x20e>
 8003aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003af0:	445a      	add	r2, fp
 8003af2:	9209      	str	r2, [sp, #36]	; 0x24
 8003af4:	f89a 3000 	ldrb.w	r3, [sl]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80a2 	beq.w	8003c42 <_vfiprintf_r+0x20e>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b08:	f10a 0a01 	add.w	sl, sl, #1
 8003b0c:	9304      	str	r3, [sp, #16]
 8003b0e:	9307      	str	r3, [sp, #28]
 8003b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b14:	931a      	str	r3, [sp, #104]	; 0x68
 8003b16:	4654      	mov	r4, sl
 8003b18:	2205      	movs	r2, #5
 8003b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b1e:	4858      	ldr	r0, [pc, #352]	; (8003c80 <_vfiprintf_r+0x24c>)
 8003b20:	f7fc fc7e 	bl	8000420 <memchr>
 8003b24:	9a04      	ldr	r2, [sp, #16]
 8003b26:	b9d8      	cbnz	r0, 8003b60 <_vfiprintf_r+0x12c>
 8003b28:	06d1      	lsls	r1, r2, #27
 8003b2a:	bf44      	itt	mi
 8003b2c:	2320      	movmi	r3, #32
 8003b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b32:	0713      	lsls	r3, r2, #28
 8003b34:	bf44      	itt	mi
 8003b36:	232b      	movmi	r3, #43	; 0x2b
 8003b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b40:	2b2a      	cmp	r3, #42	; 0x2a
 8003b42:	d015      	beq.n	8003b70 <_vfiprintf_r+0x13c>
 8003b44:	9a07      	ldr	r2, [sp, #28]
 8003b46:	4654      	mov	r4, sl
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f04f 0c0a 	mov.w	ip, #10
 8003b4e:	4621      	mov	r1, r4
 8003b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b54:	3b30      	subs	r3, #48	; 0x30
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d94e      	bls.n	8003bf8 <_vfiprintf_r+0x1c4>
 8003b5a:	b1b0      	cbz	r0, 8003b8a <_vfiprintf_r+0x156>
 8003b5c:	9207      	str	r2, [sp, #28]
 8003b5e:	e014      	b.n	8003b8a <_vfiprintf_r+0x156>
 8003b60:	eba0 0308 	sub.w	r3, r0, r8
 8003b64:	fa09 f303 	lsl.w	r3, r9, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	9304      	str	r3, [sp, #16]
 8003b6c:	46a2      	mov	sl, r4
 8003b6e:	e7d2      	b.n	8003b16 <_vfiprintf_r+0xe2>
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	1d19      	adds	r1, r3, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	9103      	str	r1, [sp, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bfbb      	ittet	lt
 8003b7c:	425b      	neglt	r3, r3
 8003b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003b82:	9307      	strge	r3, [sp, #28]
 8003b84:	9307      	strlt	r3, [sp, #28]
 8003b86:	bfb8      	it	lt
 8003b88:	9204      	strlt	r2, [sp, #16]
 8003b8a:	7823      	ldrb	r3, [r4, #0]
 8003b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b8e:	d10c      	bne.n	8003baa <_vfiprintf_r+0x176>
 8003b90:	7863      	ldrb	r3, [r4, #1]
 8003b92:	2b2a      	cmp	r3, #42	; 0x2a
 8003b94:	d135      	bne.n	8003c02 <_vfiprintf_r+0x1ce>
 8003b96:	9b03      	ldr	r3, [sp, #12]
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	9203      	str	r2, [sp, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bfb8      	it	lt
 8003ba2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ba6:	3402      	adds	r4, #2
 8003ba8:	9305      	str	r3, [sp, #20]
 8003baa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003c90 <_vfiprintf_r+0x25c>
 8003bae:	7821      	ldrb	r1, [r4, #0]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4650      	mov	r0, sl
 8003bb4:	f7fc fc34 	bl	8000420 <memchr>
 8003bb8:	b140      	cbz	r0, 8003bcc <_vfiprintf_r+0x198>
 8003bba:	2340      	movs	r3, #64	; 0x40
 8003bbc:	eba0 000a 	sub.w	r0, r0, sl
 8003bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8003bc4:	9b04      	ldr	r3, [sp, #16]
 8003bc6:	4303      	orrs	r3, r0
 8003bc8:	3401      	adds	r4, #1
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd0:	482c      	ldr	r0, [pc, #176]	; (8003c84 <_vfiprintf_r+0x250>)
 8003bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bd6:	2206      	movs	r2, #6
 8003bd8:	f7fc fc22 	bl	8000420 <memchr>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d03f      	beq.n	8003c60 <_vfiprintf_r+0x22c>
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <_vfiprintf_r+0x254>)
 8003be2:	bb1b      	cbnz	r3, 8003c2c <_vfiprintf_r+0x1f8>
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	3307      	adds	r3, #7
 8003be8:	f023 0307 	bic.w	r3, r3, #7
 8003bec:	3308      	adds	r3, #8
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bf2:	443b      	add	r3, r7
 8003bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf6:	e767      	b.n	8003ac8 <_vfiprintf_r+0x94>
 8003bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e7a5      	b.n	8003b4e <_vfiprintf_r+0x11a>
 8003c02:	2300      	movs	r3, #0
 8003c04:	3401      	adds	r4, #1
 8003c06:	9305      	str	r3, [sp, #20]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f04f 0c0a 	mov.w	ip, #10
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c14:	3a30      	subs	r2, #48	; 0x30
 8003c16:	2a09      	cmp	r2, #9
 8003c18:	d903      	bls.n	8003c22 <_vfiprintf_r+0x1ee>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0c5      	beq.n	8003baa <_vfiprintf_r+0x176>
 8003c1e:	9105      	str	r1, [sp, #20]
 8003c20:	e7c3      	b.n	8003baa <_vfiprintf_r+0x176>
 8003c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c26:	4604      	mov	r4, r0
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e7f0      	b.n	8003c0e <_vfiprintf_r+0x1da>
 8003c2c:	ab03      	add	r3, sp, #12
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	462a      	mov	r2, r5
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <_vfiprintf_r+0x258>)
 8003c34:	a904      	add	r1, sp, #16
 8003c36:	4630      	mov	r0, r6
 8003c38:	f3af 8000 	nop.w
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	1c78      	adds	r0, r7, #1
 8003c40:	d1d6      	bne.n	8003bf0 <_vfiprintf_r+0x1bc>
 8003c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c44:	07d9      	lsls	r1, r3, #31
 8003c46:	d405      	bmi.n	8003c54 <_vfiprintf_r+0x220>
 8003c48:	89ab      	ldrh	r3, [r5, #12]
 8003c4a:	059a      	lsls	r2, r3, #22
 8003c4c:	d402      	bmi.n	8003c54 <_vfiprintf_r+0x220>
 8003c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c50:	f000 fc45 	bl	80044de <__retarget_lock_release_recursive>
 8003c54:	89ab      	ldrh	r3, [r5, #12]
 8003c56:	065b      	lsls	r3, r3, #25
 8003c58:	f53f af12 	bmi.w	8003a80 <_vfiprintf_r+0x4c>
 8003c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c5e:	e711      	b.n	8003a84 <_vfiprintf_r+0x50>
 8003c60:	ab03      	add	r3, sp, #12
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	462a      	mov	r2, r5
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <_vfiprintf_r+0x258>)
 8003c68:	a904      	add	r1, sp, #16
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f000 f880 	bl	8003d70 <_printf_i>
 8003c70:	e7e4      	b.n	8003c3c <_vfiprintf_r+0x208>
 8003c72:	bf00      	nop
 8003c74:	080048dc 	.word	0x080048dc
 8003c78:	080048fc 	.word	0x080048fc
 8003c7c:	080048bc 	.word	0x080048bc
 8003c80:	08004886 	.word	0x08004886
 8003c84:	08004890 	.word	0x08004890
 8003c88:	00000000 	.word	0x00000000
 8003c8c:	08003a0f 	.word	0x08003a0f
 8003c90:	0800488c 	.word	0x0800488c

08003c94 <_printf_common>:
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	4616      	mov	r6, r2
 8003c9a:	4699      	mov	r9, r3
 8003c9c:	688a      	ldr	r2, [r1, #8]
 8003c9e:	690b      	ldr	r3, [r1, #16]
 8003ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	bfb8      	it	lt
 8003ca8:	4613      	movlt	r3, r2
 8003caa:	6033      	str	r3, [r6, #0]
 8003cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	b10a      	cbz	r2, 8003cba <_printf_common+0x26>
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	0699      	lsls	r1, r3, #26
 8003cbe:	bf42      	ittt	mi
 8003cc0:	6833      	ldrmi	r3, [r6, #0]
 8003cc2:	3302      	addmi	r3, #2
 8003cc4:	6033      	strmi	r3, [r6, #0]
 8003cc6:	6825      	ldr	r5, [r4, #0]
 8003cc8:	f015 0506 	ands.w	r5, r5, #6
 8003ccc:	d106      	bne.n	8003cdc <_printf_common+0x48>
 8003cce:	f104 0a19 	add.w	sl, r4, #25
 8003cd2:	68e3      	ldr	r3, [r4, #12]
 8003cd4:	6832      	ldr	r2, [r6, #0]
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	42ab      	cmp	r3, r5
 8003cda:	dc26      	bgt.n	8003d2a <_printf_common+0x96>
 8003cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ce0:	1e13      	subs	r3, r2, #0
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	bf18      	it	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	0692      	lsls	r2, r2, #26
 8003cea:	d42b      	bmi.n	8003d44 <_printf_common+0xb0>
 8003cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	47c0      	blx	r8
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d01e      	beq.n	8003d38 <_printf_common+0xa4>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	68e5      	ldr	r5, [r4, #12]
 8003cfe:	6832      	ldr	r2, [r6, #0]
 8003d00:	f003 0306 	and.w	r3, r3, #6
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	bf08      	it	eq
 8003d08:	1aad      	subeq	r5, r5, r2
 8003d0a:	68a3      	ldr	r3, [r4, #8]
 8003d0c:	6922      	ldr	r2, [r4, #16]
 8003d0e:	bf0c      	ite	eq
 8003d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d14:	2500      	movne	r5, #0
 8003d16:	4293      	cmp	r3, r2
 8003d18:	bfc4      	itt	gt
 8003d1a:	1a9b      	subgt	r3, r3, r2
 8003d1c:	18ed      	addgt	r5, r5, r3
 8003d1e:	2600      	movs	r6, #0
 8003d20:	341a      	adds	r4, #26
 8003d22:	42b5      	cmp	r5, r6
 8003d24:	d11a      	bne.n	8003d5c <_printf_common+0xc8>
 8003d26:	2000      	movs	r0, #0
 8003d28:	e008      	b.n	8003d3c <_printf_common+0xa8>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4652      	mov	r2, sl
 8003d2e:	4649      	mov	r1, r9
 8003d30:	4638      	mov	r0, r7
 8003d32:	47c0      	blx	r8
 8003d34:	3001      	adds	r0, #1
 8003d36:	d103      	bne.n	8003d40 <_printf_common+0xac>
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d40:	3501      	adds	r5, #1
 8003d42:	e7c6      	b.n	8003cd2 <_printf_common+0x3e>
 8003d44:	18e1      	adds	r1, r4, r3
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	2030      	movs	r0, #48	; 0x30
 8003d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d4e:	4422      	add	r2, r4
 8003d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d58:	3302      	adds	r3, #2
 8003d5a:	e7c7      	b.n	8003cec <_printf_common+0x58>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	4622      	mov	r2, r4
 8003d60:	4649      	mov	r1, r9
 8003d62:	4638      	mov	r0, r7
 8003d64:	47c0      	blx	r8
 8003d66:	3001      	adds	r0, #1
 8003d68:	d0e6      	beq.n	8003d38 <_printf_common+0xa4>
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7d9      	b.n	8003d22 <_printf_common+0x8e>
	...

08003d70 <_printf_i>:
 8003d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d74:	7e0f      	ldrb	r7, [r1, #24]
 8003d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d78:	2f78      	cmp	r7, #120	; 0x78
 8003d7a:	4691      	mov	r9, r2
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	469a      	mov	sl, r3
 8003d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d86:	d807      	bhi.n	8003d98 <_printf_i+0x28>
 8003d88:	2f62      	cmp	r7, #98	; 0x62
 8003d8a:	d80a      	bhi.n	8003da2 <_printf_i+0x32>
 8003d8c:	2f00      	cmp	r7, #0
 8003d8e:	f000 80d8 	beq.w	8003f42 <_printf_i+0x1d2>
 8003d92:	2f58      	cmp	r7, #88	; 0x58
 8003d94:	f000 80a3 	beq.w	8003ede <_printf_i+0x16e>
 8003d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003da0:	e03a      	b.n	8003e18 <_printf_i+0xa8>
 8003da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003da6:	2b15      	cmp	r3, #21
 8003da8:	d8f6      	bhi.n	8003d98 <_printf_i+0x28>
 8003daa:	a101      	add	r1, pc, #4	; (adr r1, 8003db0 <_printf_i+0x40>)
 8003dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e1d 	.word	0x08003e1d
 8003db8:	08003d99 	.word	0x08003d99
 8003dbc:	08003d99 	.word	0x08003d99
 8003dc0:	08003d99 	.word	0x08003d99
 8003dc4:	08003d99 	.word	0x08003d99
 8003dc8:	08003e1d 	.word	0x08003e1d
 8003dcc:	08003d99 	.word	0x08003d99
 8003dd0:	08003d99 	.word	0x08003d99
 8003dd4:	08003d99 	.word	0x08003d99
 8003dd8:	08003d99 	.word	0x08003d99
 8003ddc:	08003f29 	.word	0x08003f29
 8003de0:	08003e4d 	.word	0x08003e4d
 8003de4:	08003f0b 	.word	0x08003f0b
 8003de8:	08003d99 	.word	0x08003d99
 8003dec:	08003d99 	.word	0x08003d99
 8003df0:	08003f4b 	.word	0x08003f4b
 8003df4:	08003d99 	.word	0x08003d99
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003d99 	.word	0x08003d99
 8003e00:	08003d99 	.word	0x08003d99
 8003e04:	08003f13 	.word	0x08003f13
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	1d1a      	adds	r2, r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	602a      	str	r2, [r5, #0]
 8003e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0a3      	b.n	8003f64 <_printf_i+0x1f4>
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	6829      	ldr	r1, [r5, #0]
 8003e20:	0606      	lsls	r6, r0, #24
 8003e22:	f101 0304 	add.w	r3, r1, #4
 8003e26:	d50a      	bpl.n	8003e3e <_printf_i+0xce>
 8003e28:	680e      	ldr	r6, [r1, #0]
 8003e2a:	602b      	str	r3, [r5, #0]
 8003e2c:	2e00      	cmp	r6, #0
 8003e2e:	da03      	bge.n	8003e38 <_printf_i+0xc8>
 8003e30:	232d      	movs	r3, #45	; 0x2d
 8003e32:	4276      	negs	r6, r6
 8003e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e38:	485e      	ldr	r0, [pc, #376]	; (8003fb4 <_printf_i+0x244>)
 8003e3a:	230a      	movs	r3, #10
 8003e3c:	e019      	b.n	8003e72 <_printf_i+0x102>
 8003e3e:	680e      	ldr	r6, [r1, #0]
 8003e40:	602b      	str	r3, [r5, #0]
 8003e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e46:	bf18      	it	ne
 8003e48:	b236      	sxthne	r6, r6
 8003e4a:	e7ef      	b.n	8003e2c <_printf_i+0xbc>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	1d19      	adds	r1, r3, #4
 8003e52:	6029      	str	r1, [r5, #0]
 8003e54:	0601      	lsls	r1, r0, #24
 8003e56:	d501      	bpl.n	8003e5c <_printf_i+0xec>
 8003e58:	681e      	ldr	r6, [r3, #0]
 8003e5a:	e002      	b.n	8003e62 <_printf_i+0xf2>
 8003e5c:	0646      	lsls	r6, r0, #25
 8003e5e:	d5fb      	bpl.n	8003e58 <_printf_i+0xe8>
 8003e60:	881e      	ldrh	r6, [r3, #0]
 8003e62:	4854      	ldr	r0, [pc, #336]	; (8003fb4 <_printf_i+0x244>)
 8003e64:	2f6f      	cmp	r7, #111	; 0x6f
 8003e66:	bf0c      	ite	eq
 8003e68:	2308      	moveq	r3, #8
 8003e6a:	230a      	movne	r3, #10
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e72:	6865      	ldr	r5, [r4, #4]
 8003e74:	60a5      	str	r5, [r4, #8]
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	bfa2      	ittt	ge
 8003e7a:	6821      	ldrge	r1, [r4, #0]
 8003e7c:	f021 0104 	bicge.w	r1, r1, #4
 8003e80:	6021      	strge	r1, [r4, #0]
 8003e82:	b90e      	cbnz	r6, 8003e88 <_printf_i+0x118>
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	d04d      	beq.n	8003f24 <_printf_i+0x1b4>
 8003e88:	4615      	mov	r5, r2
 8003e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e92:	5dc7      	ldrb	r7, [r0, r7]
 8003e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e98:	4637      	mov	r7, r6
 8003e9a:	42bb      	cmp	r3, r7
 8003e9c:	460e      	mov	r6, r1
 8003e9e:	d9f4      	bls.n	8003e8a <_printf_i+0x11a>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d10b      	bne.n	8003ebc <_printf_i+0x14c>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	07de      	lsls	r6, r3, #31
 8003ea8:	d508      	bpl.n	8003ebc <_printf_i+0x14c>
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	6861      	ldr	r1, [r4, #4]
 8003eae:	4299      	cmp	r1, r3
 8003eb0:	bfde      	ittt	le
 8003eb2:	2330      	movle	r3, #48	; 0x30
 8003eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ebc:	1b52      	subs	r2, r2, r5
 8003ebe:	6122      	str	r2, [r4, #16]
 8003ec0:	f8cd a000 	str.w	sl, [sp]
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	aa03      	add	r2, sp, #12
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f7ff fee2 	bl	8003c94 <_printf_common>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d14c      	bne.n	8003f6e <_printf_i+0x1fe>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed8:	b004      	add	sp, #16
 8003eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ede:	4835      	ldr	r0, [pc, #212]	; (8003fb4 <_printf_i+0x244>)
 8003ee0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ee4:	6829      	ldr	r1, [r5, #0]
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eec:	6029      	str	r1, [r5, #0]
 8003eee:	061d      	lsls	r5, r3, #24
 8003ef0:	d514      	bpl.n	8003f1c <_printf_i+0x1ac>
 8003ef2:	07df      	lsls	r7, r3, #31
 8003ef4:	bf44      	itt	mi
 8003ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8003efa:	6023      	strmi	r3, [r4, #0]
 8003efc:	b91e      	cbnz	r6, 8003f06 <_printf_i+0x196>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	f023 0320 	bic.w	r3, r3, #32
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	2310      	movs	r3, #16
 8003f08:	e7b0      	b.n	8003e6c <_printf_i+0xfc>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f043 0320 	orr.w	r3, r3, #32
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	2378      	movs	r3, #120	; 0x78
 8003f14:	4828      	ldr	r0, [pc, #160]	; (8003fb8 <_printf_i+0x248>)
 8003f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f1a:	e7e3      	b.n	8003ee4 <_printf_i+0x174>
 8003f1c:	0659      	lsls	r1, r3, #25
 8003f1e:	bf48      	it	mi
 8003f20:	b2b6      	uxthmi	r6, r6
 8003f22:	e7e6      	b.n	8003ef2 <_printf_i+0x182>
 8003f24:	4615      	mov	r5, r2
 8003f26:	e7bb      	b.n	8003ea0 <_printf_i+0x130>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	6826      	ldr	r6, [r4, #0]
 8003f2c:	6961      	ldr	r1, [r4, #20]
 8003f2e:	1d18      	adds	r0, r3, #4
 8003f30:	6028      	str	r0, [r5, #0]
 8003f32:	0635      	lsls	r5, r6, #24
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	d501      	bpl.n	8003f3c <_printf_i+0x1cc>
 8003f38:	6019      	str	r1, [r3, #0]
 8003f3a:	e002      	b.n	8003f42 <_printf_i+0x1d2>
 8003f3c:	0670      	lsls	r0, r6, #25
 8003f3e:	d5fb      	bpl.n	8003f38 <_printf_i+0x1c8>
 8003f40:	8019      	strh	r1, [r3, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	6123      	str	r3, [r4, #16]
 8003f46:	4615      	mov	r5, r2
 8003f48:	e7ba      	b.n	8003ec0 <_printf_i+0x150>
 8003f4a:	682b      	ldr	r3, [r5, #0]
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	602a      	str	r2, [r5, #0]
 8003f50:	681d      	ldr	r5, [r3, #0]
 8003f52:	6862      	ldr	r2, [r4, #4]
 8003f54:	2100      	movs	r1, #0
 8003f56:	4628      	mov	r0, r5
 8003f58:	f7fc fa62 	bl	8000420 <memchr>
 8003f5c:	b108      	cbz	r0, 8003f62 <_printf_i+0x1f2>
 8003f5e:	1b40      	subs	r0, r0, r5
 8003f60:	6060      	str	r0, [r4, #4]
 8003f62:	6863      	ldr	r3, [r4, #4]
 8003f64:	6123      	str	r3, [r4, #16]
 8003f66:	2300      	movs	r3, #0
 8003f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f6c:	e7a8      	b.n	8003ec0 <_printf_i+0x150>
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	462a      	mov	r2, r5
 8003f72:	4649      	mov	r1, r9
 8003f74:	4640      	mov	r0, r8
 8003f76:	47d0      	blx	sl
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d0ab      	beq.n	8003ed4 <_printf_i+0x164>
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	079b      	lsls	r3, r3, #30
 8003f80:	d413      	bmi.n	8003faa <_printf_i+0x23a>
 8003f82:	68e0      	ldr	r0, [r4, #12]
 8003f84:	9b03      	ldr	r3, [sp, #12]
 8003f86:	4298      	cmp	r0, r3
 8003f88:	bfb8      	it	lt
 8003f8a:	4618      	movlt	r0, r3
 8003f8c:	e7a4      	b.n	8003ed8 <_printf_i+0x168>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4632      	mov	r2, r6
 8003f92:	4649      	mov	r1, r9
 8003f94:	4640      	mov	r0, r8
 8003f96:	47d0      	blx	sl
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d09b      	beq.n	8003ed4 <_printf_i+0x164>
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	68e3      	ldr	r3, [r4, #12]
 8003fa0:	9903      	ldr	r1, [sp, #12]
 8003fa2:	1a5b      	subs	r3, r3, r1
 8003fa4:	42ab      	cmp	r3, r5
 8003fa6:	dcf2      	bgt.n	8003f8e <_printf_i+0x21e>
 8003fa8:	e7eb      	b.n	8003f82 <_printf_i+0x212>
 8003faa:	2500      	movs	r5, #0
 8003fac:	f104 0619 	add.w	r6, r4, #25
 8003fb0:	e7f5      	b.n	8003f9e <_printf_i+0x22e>
 8003fb2:	bf00      	nop
 8003fb4:	08004897 	.word	0x08004897
 8003fb8:	080048a8 	.word	0x080048a8

08003fbc <_sbrk_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d06      	ldr	r5, [pc, #24]	; (8003fd8 <_sbrk_r+0x1c>)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fd f8fe 	bl	80011c8 <_sbrk>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_sbrk_r+0x1a>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_sbrk_r+0x1a>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	20000820 	.word	0x20000820

08003fdc <__swbuf_r>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	460e      	mov	r6, r1
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	b118      	cbz	r0, 8003fee <__swbuf_r+0x12>
 8003fe6:	6983      	ldr	r3, [r0, #24]
 8003fe8:	b90b      	cbnz	r3, 8003fee <__swbuf_r+0x12>
 8003fea:	f000 f9d9 	bl	80043a0 <__sinit>
 8003fee:	4b21      	ldr	r3, [pc, #132]	; (8004074 <__swbuf_r+0x98>)
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	d12b      	bne.n	800404c <__swbuf_r+0x70>
 8003ff4:	686c      	ldr	r4, [r5, #4]
 8003ff6:	69a3      	ldr	r3, [r4, #24]
 8003ff8:	60a3      	str	r3, [r4, #8]
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	071a      	lsls	r2, r3, #28
 8003ffe:	d52f      	bpl.n	8004060 <__swbuf_r+0x84>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	b36b      	cbz	r3, 8004060 <__swbuf_r+0x84>
 8004004:	6923      	ldr	r3, [r4, #16]
 8004006:	6820      	ldr	r0, [r4, #0]
 8004008:	1ac0      	subs	r0, r0, r3
 800400a:	6963      	ldr	r3, [r4, #20]
 800400c:	b2f6      	uxtb	r6, r6
 800400e:	4283      	cmp	r3, r0
 8004010:	4637      	mov	r7, r6
 8004012:	dc04      	bgt.n	800401e <__swbuf_r+0x42>
 8004014:	4621      	mov	r1, r4
 8004016:	4628      	mov	r0, r5
 8004018:	f000 f92e 	bl	8004278 <_fflush_r>
 800401c:	bb30      	cbnz	r0, 800406c <__swbuf_r+0x90>
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	3b01      	subs	r3, #1
 8004022:	60a3      	str	r3, [r4, #8]
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	6022      	str	r2, [r4, #0]
 800402a:	701e      	strb	r6, [r3, #0]
 800402c:	6963      	ldr	r3, [r4, #20]
 800402e:	3001      	adds	r0, #1
 8004030:	4283      	cmp	r3, r0
 8004032:	d004      	beq.n	800403e <__swbuf_r+0x62>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	07db      	lsls	r3, r3, #31
 8004038:	d506      	bpl.n	8004048 <__swbuf_r+0x6c>
 800403a:	2e0a      	cmp	r6, #10
 800403c:	d104      	bne.n	8004048 <__swbuf_r+0x6c>
 800403e:	4621      	mov	r1, r4
 8004040:	4628      	mov	r0, r5
 8004042:	f000 f919 	bl	8004278 <_fflush_r>
 8004046:	b988      	cbnz	r0, 800406c <__swbuf_r+0x90>
 8004048:	4638      	mov	r0, r7
 800404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <__swbuf_r+0x9c>)
 800404e:	429c      	cmp	r4, r3
 8004050:	d101      	bne.n	8004056 <__swbuf_r+0x7a>
 8004052:	68ac      	ldr	r4, [r5, #8]
 8004054:	e7cf      	b.n	8003ff6 <__swbuf_r+0x1a>
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <__swbuf_r+0xa0>)
 8004058:	429c      	cmp	r4, r3
 800405a:	bf08      	it	eq
 800405c:	68ec      	ldreq	r4, [r5, #12]
 800405e:	e7ca      	b.n	8003ff6 <__swbuf_r+0x1a>
 8004060:	4621      	mov	r1, r4
 8004062:	4628      	mov	r0, r5
 8004064:	f000 f80c 	bl	8004080 <__swsetup_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	d0cb      	beq.n	8004004 <__swbuf_r+0x28>
 800406c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004070:	e7ea      	b.n	8004048 <__swbuf_r+0x6c>
 8004072:	bf00      	nop
 8004074:	080048dc 	.word	0x080048dc
 8004078:	080048fc 	.word	0x080048fc
 800407c:	080048bc 	.word	0x080048bc

08004080 <__swsetup_r>:
 8004080:	4b32      	ldr	r3, [pc, #200]	; (800414c <__swsetup_r+0xcc>)
 8004082:	b570      	push	{r4, r5, r6, lr}
 8004084:	681d      	ldr	r5, [r3, #0]
 8004086:	4606      	mov	r6, r0
 8004088:	460c      	mov	r4, r1
 800408a:	b125      	cbz	r5, 8004096 <__swsetup_r+0x16>
 800408c:	69ab      	ldr	r3, [r5, #24]
 800408e:	b913      	cbnz	r3, 8004096 <__swsetup_r+0x16>
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f985 	bl	80043a0 <__sinit>
 8004096:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <__swsetup_r+0xd0>)
 8004098:	429c      	cmp	r4, r3
 800409a:	d10f      	bne.n	80040bc <__swsetup_r+0x3c>
 800409c:	686c      	ldr	r4, [r5, #4]
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040a4:	0719      	lsls	r1, r3, #28
 80040a6:	d42c      	bmi.n	8004102 <__swsetup_r+0x82>
 80040a8:	06dd      	lsls	r5, r3, #27
 80040aa:	d411      	bmi.n	80040d0 <__swsetup_r+0x50>
 80040ac:	2309      	movs	r3, #9
 80040ae:	6033      	str	r3, [r6, #0]
 80040b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ba:	e03e      	b.n	800413a <__swsetup_r+0xba>
 80040bc:	4b25      	ldr	r3, [pc, #148]	; (8004154 <__swsetup_r+0xd4>)
 80040be:	429c      	cmp	r4, r3
 80040c0:	d101      	bne.n	80040c6 <__swsetup_r+0x46>
 80040c2:	68ac      	ldr	r4, [r5, #8]
 80040c4:	e7eb      	b.n	800409e <__swsetup_r+0x1e>
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <__swsetup_r+0xd8>)
 80040c8:	429c      	cmp	r4, r3
 80040ca:	bf08      	it	eq
 80040cc:	68ec      	ldreq	r4, [r5, #12]
 80040ce:	e7e6      	b.n	800409e <__swsetup_r+0x1e>
 80040d0:	0758      	lsls	r0, r3, #29
 80040d2:	d512      	bpl.n	80040fa <__swsetup_r+0x7a>
 80040d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d6:	b141      	cbz	r1, 80040ea <__swsetup_r+0x6a>
 80040d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040dc:	4299      	cmp	r1, r3
 80040de:	d002      	beq.n	80040e6 <__swsetup_r+0x66>
 80040e0:	4630      	mov	r0, r6
 80040e2:	f7ff fb9d 	bl	8003820 <_free_r>
 80040e6:	2300      	movs	r3, #0
 80040e8:	6363      	str	r3, [r4, #52]	; 0x34
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	2300      	movs	r3, #0
 80040f4:	6063      	str	r3, [r4, #4]
 80040f6:	6923      	ldr	r3, [r4, #16]
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f043 0308 	orr.w	r3, r3, #8
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	b94b      	cbnz	r3, 800411a <__swsetup_r+0x9a>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d003      	beq.n	800411a <__swsetup_r+0x9a>
 8004112:	4621      	mov	r1, r4
 8004114:	4630      	mov	r0, r6
 8004116:	f000 fa09 	bl	800452c <__smakebuf_r>
 800411a:	89a0      	ldrh	r0, [r4, #12]
 800411c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004120:	f010 0301 	ands.w	r3, r0, #1
 8004124:	d00a      	beq.n	800413c <__swsetup_r+0xbc>
 8004126:	2300      	movs	r3, #0
 8004128:	60a3      	str	r3, [r4, #8]
 800412a:	6963      	ldr	r3, [r4, #20]
 800412c:	425b      	negs	r3, r3
 800412e:	61a3      	str	r3, [r4, #24]
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	b943      	cbnz	r3, 8004146 <__swsetup_r+0xc6>
 8004134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004138:	d1ba      	bne.n	80040b0 <__swsetup_r+0x30>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	0781      	lsls	r1, r0, #30
 800413e:	bf58      	it	pl
 8004140:	6963      	ldrpl	r3, [r4, #20]
 8004142:	60a3      	str	r3, [r4, #8]
 8004144:	e7f4      	b.n	8004130 <__swsetup_r+0xb0>
 8004146:	2000      	movs	r0, #0
 8004148:	e7f7      	b.n	800413a <__swsetup_r+0xba>
 800414a:	bf00      	nop
 800414c:	2000000c 	.word	0x2000000c
 8004150:	080048dc 	.word	0x080048dc
 8004154:	080048fc 	.word	0x080048fc
 8004158:	080048bc 	.word	0x080048bc

0800415c <abort>:
 800415c:	b508      	push	{r3, lr}
 800415e:	2006      	movs	r0, #6
 8004160:	f000 fa58 	bl	8004614 <raise>
 8004164:	2001      	movs	r0, #1
 8004166:	f7fc ffb8 	bl	80010da <_exit>
	...

0800416c <__sflush_r>:
 800416c:	898a      	ldrh	r2, [r1, #12]
 800416e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004172:	4605      	mov	r5, r0
 8004174:	0710      	lsls	r0, r2, #28
 8004176:	460c      	mov	r4, r1
 8004178:	d458      	bmi.n	800422c <__sflush_r+0xc0>
 800417a:	684b      	ldr	r3, [r1, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	dc05      	bgt.n	800418c <__sflush_r+0x20>
 8004180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	dc02      	bgt.n	800418c <__sflush_r+0x20>
 8004186:	2000      	movs	r0, #0
 8004188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800418c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800418e:	2e00      	cmp	r6, #0
 8004190:	d0f9      	beq.n	8004186 <__sflush_r+0x1a>
 8004192:	2300      	movs	r3, #0
 8004194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004198:	682f      	ldr	r7, [r5, #0]
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	d032      	beq.n	8004204 <__sflush_r+0x98>
 800419e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	075a      	lsls	r2, r3, #29
 80041a4:	d505      	bpl.n	80041b2 <__sflush_r+0x46>
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	1ac0      	subs	r0, r0, r3
 80041aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041ac:	b10b      	cbz	r3, 80041b2 <__sflush_r+0x46>
 80041ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041b0:	1ac0      	subs	r0, r0, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	4602      	mov	r2, r0
 80041b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041b8:	6a21      	ldr	r1, [r4, #32]
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b0      	blx	r6
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	d106      	bne.n	80041d2 <__sflush_r+0x66>
 80041c4:	6829      	ldr	r1, [r5, #0]
 80041c6:	291d      	cmp	r1, #29
 80041c8:	d82c      	bhi.n	8004224 <__sflush_r+0xb8>
 80041ca:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <__sflush_r+0x108>)
 80041cc:	40ca      	lsrs	r2, r1
 80041ce:	07d6      	lsls	r6, r2, #31
 80041d0:	d528      	bpl.n	8004224 <__sflush_r+0xb8>
 80041d2:	2200      	movs	r2, #0
 80041d4:	6062      	str	r2, [r4, #4]
 80041d6:	04d9      	lsls	r1, r3, #19
 80041d8:	6922      	ldr	r2, [r4, #16]
 80041da:	6022      	str	r2, [r4, #0]
 80041dc:	d504      	bpl.n	80041e8 <__sflush_r+0x7c>
 80041de:	1c42      	adds	r2, r0, #1
 80041e0:	d101      	bne.n	80041e6 <__sflush_r+0x7a>
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	b903      	cbnz	r3, 80041e8 <__sflush_r+0x7c>
 80041e6:	6560      	str	r0, [r4, #84]	; 0x54
 80041e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ea:	602f      	str	r7, [r5, #0]
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d0ca      	beq.n	8004186 <__sflush_r+0x1a>
 80041f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041f4:	4299      	cmp	r1, r3
 80041f6:	d002      	beq.n	80041fe <__sflush_r+0x92>
 80041f8:	4628      	mov	r0, r5
 80041fa:	f7ff fb11 	bl	8003820 <_free_r>
 80041fe:	2000      	movs	r0, #0
 8004200:	6360      	str	r0, [r4, #52]	; 0x34
 8004202:	e7c1      	b.n	8004188 <__sflush_r+0x1c>
 8004204:	6a21      	ldr	r1, [r4, #32]
 8004206:	2301      	movs	r3, #1
 8004208:	4628      	mov	r0, r5
 800420a:	47b0      	blx	r6
 800420c:	1c41      	adds	r1, r0, #1
 800420e:	d1c7      	bne.n	80041a0 <__sflush_r+0x34>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0c4      	beq.n	80041a0 <__sflush_r+0x34>
 8004216:	2b1d      	cmp	r3, #29
 8004218:	d001      	beq.n	800421e <__sflush_r+0xb2>
 800421a:	2b16      	cmp	r3, #22
 800421c:	d101      	bne.n	8004222 <__sflush_r+0xb6>
 800421e:	602f      	str	r7, [r5, #0]
 8004220:	e7b1      	b.n	8004186 <__sflush_r+0x1a>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	e7ad      	b.n	8004188 <__sflush_r+0x1c>
 800422c:	690f      	ldr	r7, [r1, #16]
 800422e:	2f00      	cmp	r7, #0
 8004230:	d0a9      	beq.n	8004186 <__sflush_r+0x1a>
 8004232:	0793      	lsls	r3, r2, #30
 8004234:	680e      	ldr	r6, [r1, #0]
 8004236:	bf08      	it	eq
 8004238:	694b      	ldreq	r3, [r1, #20]
 800423a:	600f      	str	r7, [r1, #0]
 800423c:	bf18      	it	ne
 800423e:	2300      	movne	r3, #0
 8004240:	eba6 0807 	sub.w	r8, r6, r7
 8004244:	608b      	str	r3, [r1, #8]
 8004246:	f1b8 0f00 	cmp.w	r8, #0
 800424a:	dd9c      	ble.n	8004186 <__sflush_r+0x1a>
 800424c:	6a21      	ldr	r1, [r4, #32]
 800424e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004250:	4643      	mov	r3, r8
 8004252:	463a      	mov	r2, r7
 8004254:	4628      	mov	r0, r5
 8004256:	47b0      	blx	r6
 8004258:	2800      	cmp	r0, #0
 800425a:	dc06      	bgt.n	800426a <__sflush_r+0xfe>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004268:	e78e      	b.n	8004188 <__sflush_r+0x1c>
 800426a:	4407      	add	r7, r0
 800426c:	eba8 0800 	sub.w	r8, r8, r0
 8004270:	e7e9      	b.n	8004246 <__sflush_r+0xda>
 8004272:	bf00      	nop
 8004274:	20400001 	.word	0x20400001

08004278 <_fflush_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	690b      	ldr	r3, [r1, #16]
 800427c:	4605      	mov	r5, r0
 800427e:	460c      	mov	r4, r1
 8004280:	b913      	cbnz	r3, 8004288 <_fflush_r+0x10>
 8004282:	2500      	movs	r5, #0
 8004284:	4628      	mov	r0, r5
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	b118      	cbz	r0, 8004292 <_fflush_r+0x1a>
 800428a:	6983      	ldr	r3, [r0, #24]
 800428c:	b90b      	cbnz	r3, 8004292 <_fflush_r+0x1a>
 800428e:	f000 f887 	bl	80043a0 <__sinit>
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <_fflush_r+0x6c>)
 8004294:	429c      	cmp	r4, r3
 8004296:	d11b      	bne.n	80042d0 <_fflush_r+0x58>
 8004298:	686c      	ldr	r4, [r5, #4]
 800429a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ef      	beq.n	8004282 <_fflush_r+0xa>
 80042a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042a4:	07d0      	lsls	r0, r2, #31
 80042a6:	d404      	bmi.n	80042b2 <_fflush_r+0x3a>
 80042a8:	0599      	lsls	r1, r3, #22
 80042aa:	d402      	bmi.n	80042b2 <_fflush_r+0x3a>
 80042ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ae:	f000 f915 	bl	80044dc <__retarget_lock_acquire_recursive>
 80042b2:	4628      	mov	r0, r5
 80042b4:	4621      	mov	r1, r4
 80042b6:	f7ff ff59 	bl	800416c <__sflush_r>
 80042ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042bc:	07da      	lsls	r2, r3, #31
 80042be:	4605      	mov	r5, r0
 80042c0:	d4e0      	bmi.n	8004284 <_fflush_r+0xc>
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	d4dd      	bmi.n	8004284 <_fflush_r+0xc>
 80042c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ca:	f000 f908 	bl	80044de <__retarget_lock_release_recursive>
 80042ce:	e7d9      	b.n	8004284 <_fflush_r+0xc>
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <_fflush_r+0x70>)
 80042d2:	429c      	cmp	r4, r3
 80042d4:	d101      	bne.n	80042da <_fflush_r+0x62>
 80042d6:	68ac      	ldr	r4, [r5, #8]
 80042d8:	e7df      	b.n	800429a <_fflush_r+0x22>
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <_fflush_r+0x74>)
 80042dc:	429c      	cmp	r4, r3
 80042de:	bf08      	it	eq
 80042e0:	68ec      	ldreq	r4, [r5, #12]
 80042e2:	e7da      	b.n	800429a <_fflush_r+0x22>
 80042e4:	080048dc 	.word	0x080048dc
 80042e8:	080048fc 	.word	0x080048fc
 80042ec:	080048bc 	.word	0x080048bc

080042f0 <std>:
 80042f0:	2300      	movs	r3, #0
 80042f2:	b510      	push	{r4, lr}
 80042f4:	4604      	mov	r4, r0
 80042f6:	e9c0 3300 	strd	r3, r3, [r0]
 80042fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042fe:	6083      	str	r3, [r0, #8]
 8004300:	8181      	strh	r1, [r0, #12]
 8004302:	6643      	str	r3, [r0, #100]	; 0x64
 8004304:	81c2      	strh	r2, [r0, #14]
 8004306:	6183      	str	r3, [r0, #24]
 8004308:	4619      	mov	r1, r3
 800430a:	2208      	movs	r2, #8
 800430c:	305c      	adds	r0, #92	; 0x5c
 800430e:	f7ff f9db 	bl	80036c8 <memset>
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <std+0x38>)
 8004314:	6263      	str	r3, [r4, #36]	; 0x24
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <std+0x3c>)
 8004318:	62a3      	str	r3, [r4, #40]	; 0x28
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <std+0x40>)
 800431c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <std+0x44>)
 8004320:	6224      	str	r4, [r4, #32]
 8004322:	6323      	str	r3, [r4, #48]	; 0x30
 8004324:	bd10      	pop	{r4, pc}
 8004326:	bf00      	nop
 8004328:	0800464d 	.word	0x0800464d
 800432c:	0800466f 	.word	0x0800466f
 8004330:	080046a7 	.word	0x080046a7
 8004334:	080046cb 	.word	0x080046cb

08004338 <_cleanup_r>:
 8004338:	4901      	ldr	r1, [pc, #4]	; (8004340 <_cleanup_r+0x8>)
 800433a:	f000 b8af 	b.w	800449c <_fwalk_reent>
 800433e:	bf00      	nop
 8004340:	08004279 	.word	0x08004279

08004344 <__sfmoreglue>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	2268      	movs	r2, #104	; 0x68
 8004348:	1e4d      	subs	r5, r1, #1
 800434a:	4355      	muls	r5, r2
 800434c:	460e      	mov	r6, r1
 800434e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004352:	f7ff fad1 	bl	80038f8 <_malloc_r>
 8004356:	4604      	mov	r4, r0
 8004358:	b140      	cbz	r0, 800436c <__sfmoreglue+0x28>
 800435a:	2100      	movs	r1, #0
 800435c:	e9c0 1600 	strd	r1, r6, [r0]
 8004360:	300c      	adds	r0, #12
 8004362:	60a0      	str	r0, [r4, #8]
 8004364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004368:	f7ff f9ae 	bl	80036c8 <memset>
 800436c:	4620      	mov	r0, r4
 800436e:	bd70      	pop	{r4, r5, r6, pc}

08004370 <__sfp_lock_acquire>:
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <__sfp_lock_acquire+0x8>)
 8004372:	f000 b8b3 	b.w	80044dc <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	2000081d 	.word	0x2000081d

0800437c <__sfp_lock_release>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__sfp_lock_release+0x8>)
 800437e:	f000 b8ae 	b.w	80044de <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	2000081d 	.word	0x2000081d

08004388 <__sinit_lock_acquire>:
 8004388:	4801      	ldr	r0, [pc, #4]	; (8004390 <__sinit_lock_acquire+0x8>)
 800438a:	f000 b8a7 	b.w	80044dc <__retarget_lock_acquire_recursive>
 800438e:	bf00      	nop
 8004390:	2000081e 	.word	0x2000081e

08004394 <__sinit_lock_release>:
 8004394:	4801      	ldr	r0, [pc, #4]	; (800439c <__sinit_lock_release+0x8>)
 8004396:	f000 b8a2 	b.w	80044de <__retarget_lock_release_recursive>
 800439a:	bf00      	nop
 800439c:	2000081e 	.word	0x2000081e

080043a0 <__sinit>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	4604      	mov	r4, r0
 80043a4:	f7ff fff0 	bl	8004388 <__sinit_lock_acquire>
 80043a8:	69a3      	ldr	r3, [r4, #24]
 80043aa:	b11b      	cbz	r3, 80043b4 <__sinit+0x14>
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b0:	f7ff bff0 	b.w	8004394 <__sinit_lock_release>
 80043b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043b8:	6523      	str	r3, [r4, #80]	; 0x50
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <__sinit+0x68>)
 80043bc:	4a13      	ldr	r2, [pc, #76]	; (800440c <__sinit+0x6c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	bf04      	itt	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	61a3      	streq	r3, [r4, #24]
 80043ca:	4620      	mov	r0, r4
 80043cc:	f000 f820 	bl	8004410 <__sfp>
 80043d0:	6060      	str	r0, [r4, #4]
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 f81c 	bl	8004410 <__sfp>
 80043d8:	60a0      	str	r0, [r4, #8]
 80043da:	4620      	mov	r0, r4
 80043dc:	f000 f818 	bl	8004410 <__sfp>
 80043e0:	2200      	movs	r2, #0
 80043e2:	60e0      	str	r0, [r4, #12]
 80043e4:	2104      	movs	r1, #4
 80043e6:	6860      	ldr	r0, [r4, #4]
 80043e8:	f7ff ff82 	bl	80042f0 <std>
 80043ec:	68a0      	ldr	r0, [r4, #8]
 80043ee:	2201      	movs	r2, #1
 80043f0:	2109      	movs	r1, #9
 80043f2:	f7ff ff7d 	bl	80042f0 <std>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	2202      	movs	r2, #2
 80043fa:	2112      	movs	r1, #18
 80043fc:	f7ff ff78 	bl	80042f0 <std>
 8004400:	2301      	movs	r3, #1
 8004402:	61a3      	str	r3, [r4, #24]
 8004404:	e7d2      	b.n	80043ac <__sinit+0xc>
 8004406:	bf00      	nop
 8004408:	080047d4 	.word	0x080047d4
 800440c:	08004339 	.word	0x08004339

08004410 <__sfp>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	4607      	mov	r7, r0
 8004414:	f7ff ffac 	bl	8004370 <__sfp_lock_acquire>
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <__sfp+0x84>)
 800441a:	681e      	ldr	r6, [r3, #0]
 800441c:	69b3      	ldr	r3, [r6, #24]
 800441e:	b913      	cbnz	r3, 8004426 <__sfp+0x16>
 8004420:	4630      	mov	r0, r6
 8004422:	f7ff ffbd 	bl	80043a0 <__sinit>
 8004426:	3648      	adds	r6, #72	; 0x48
 8004428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800442c:	3b01      	subs	r3, #1
 800442e:	d503      	bpl.n	8004438 <__sfp+0x28>
 8004430:	6833      	ldr	r3, [r6, #0]
 8004432:	b30b      	cbz	r3, 8004478 <__sfp+0x68>
 8004434:	6836      	ldr	r6, [r6, #0]
 8004436:	e7f7      	b.n	8004428 <__sfp+0x18>
 8004438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800443c:	b9d5      	cbnz	r5, 8004474 <__sfp+0x64>
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <__sfp+0x88>)
 8004440:	60e3      	str	r3, [r4, #12]
 8004442:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004446:	6665      	str	r5, [r4, #100]	; 0x64
 8004448:	f000 f847 	bl	80044da <__retarget_lock_init_recursive>
 800444c:	f7ff ff96 	bl	800437c <__sfp_lock_release>
 8004450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004458:	6025      	str	r5, [r4, #0]
 800445a:	61a5      	str	r5, [r4, #24]
 800445c:	2208      	movs	r2, #8
 800445e:	4629      	mov	r1, r5
 8004460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004464:	f7ff f930 	bl	80036c8 <memset>
 8004468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800446c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004470:	4620      	mov	r0, r4
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004474:	3468      	adds	r4, #104	; 0x68
 8004476:	e7d9      	b.n	800442c <__sfp+0x1c>
 8004478:	2104      	movs	r1, #4
 800447a:	4638      	mov	r0, r7
 800447c:	f7ff ff62 	bl	8004344 <__sfmoreglue>
 8004480:	4604      	mov	r4, r0
 8004482:	6030      	str	r0, [r6, #0]
 8004484:	2800      	cmp	r0, #0
 8004486:	d1d5      	bne.n	8004434 <__sfp+0x24>
 8004488:	f7ff ff78 	bl	800437c <__sfp_lock_release>
 800448c:	230c      	movs	r3, #12
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	e7ee      	b.n	8004470 <__sfp+0x60>
 8004492:	bf00      	nop
 8004494:	080047d4 	.word	0x080047d4
 8004498:	ffff0001 	.word	0xffff0001

0800449c <_fwalk_reent>:
 800449c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a0:	4606      	mov	r6, r0
 80044a2:	4688      	mov	r8, r1
 80044a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044a8:	2700      	movs	r7, #0
 80044aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ae:	f1b9 0901 	subs.w	r9, r9, #1
 80044b2:	d505      	bpl.n	80044c0 <_fwalk_reent+0x24>
 80044b4:	6824      	ldr	r4, [r4, #0]
 80044b6:	2c00      	cmp	r4, #0
 80044b8:	d1f7      	bne.n	80044aa <_fwalk_reent+0xe>
 80044ba:	4638      	mov	r0, r7
 80044bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044c0:	89ab      	ldrh	r3, [r5, #12]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d907      	bls.n	80044d6 <_fwalk_reent+0x3a>
 80044c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ca:	3301      	adds	r3, #1
 80044cc:	d003      	beq.n	80044d6 <_fwalk_reent+0x3a>
 80044ce:	4629      	mov	r1, r5
 80044d0:	4630      	mov	r0, r6
 80044d2:	47c0      	blx	r8
 80044d4:	4307      	orrs	r7, r0
 80044d6:	3568      	adds	r5, #104	; 0x68
 80044d8:	e7e9      	b.n	80044ae <_fwalk_reent+0x12>

080044da <__retarget_lock_init_recursive>:
 80044da:	4770      	bx	lr

080044dc <__retarget_lock_acquire_recursive>:
 80044dc:	4770      	bx	lr

080044de <__retarget_lock_release_recursive>:
 80044de:	4770      	bx	lr

080044e0 <__swhatbuf_r>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	460e      	mov	r6, r1
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	2900      	cmp	r1, #0
 80044ea:	b096      	sub	sp, #88	; 0x58
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	da08      	bge.n	8004504 <__swhatbuf_r+0x24>
 80044f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	602a      	str	r2, [r5, #0]
 80044fa:	061a      	lsls	r2, r3, #24
 80044fc:	d410      	bmi.n	8004520 <__swhatbuf_r+0x40>
 80044fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004502:	e00e      	b.n	8004522 <__swhatbuf_r+0x42>
 8004504:	466a      	mov	r2, sp
 8004506:	f000 f907 	bl	8004718 <_fstat_r>
 800450a:	2800      	cmp	r0, #0
 800450c:	dbf1      	blt.n	80044f2 <__swhatbuf_r+0x12>
 800450e:	9a01      	ldr	r2, [sp, #4]
 8004510:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004514:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004518:	425a      	negs	r2, r3
 800451a:	415a      	adcs	r2, r3
 800451c:	602a      	str	r2, [r5, #0]
 800451e:	e7ee      	b.n	80044fe <__swhatbuf_r+0x1e>
 8004520:	2340      	movs	r3, #64	; 0x40
 8004522:	2000      	movs	r0, #0
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	b016      	add	sp, #88	; 0x58
 8004528:	bd70      	pop	{r4, r5, r6, pc}
	...

0800452c <__smakebuf_r>:
 800452c:	898b      	ldrh	r3, [r1, #12]
 800452e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004530:	079d      	lsls	r5, r3, #30
 8004532:	4606      	mov	r6, r0
 8004534:	460c      	mov	r4, r1
 8004536:	d507      	bpl.n	8004548 <__smakebuf_r+0x1c>
 8004538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	2301      	movs	r3, #1
 8004542:	6163      	str	r3, [r4, #20]
 8004544:	b002      	add	sp, #8
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	ab01      	add	r3, sp, #4
 800454a:	466a      	mov	r2, sp
 800454c:	f7ff ffc8 	bl	80044e0 <__swhatbuf_r>
 8004550:	9900      	ldr	r1, [sp, #0]
 8004552:	4605      	mov	r5, r0
 8004554:	4630      	mov	r0, r6
 8004556:	f7ff f9cf 	bl	80038f8 <_malloc_r>
 800455a:	b948      	cbnz	r0, 8004570 <__smakebuf_r+0x44>
 800455c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004560:	059a      	lsls	r2, r3, #22
 8004562:	d4ef      	bmi.n	8004544 <__smakebuf_r+0x18>
 8004564:	f023 0303 	bic.w	r3, r3, #3
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	e7e3      	b.n	8004538 <__smakebuf_r+0xc>
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <__smakebuf_r+0x7c>)
 8004572:	62b3      	str	r3, [r6, #40]	; 0x28
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	6020      	str	r0, [r4, #0]
 8004578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	9b00      	ldr	r3, [sp, #0]
 8004580:	6163      	str	r3, [r4, #20]
 8004582:	9b01      	ldr	r3, [sp, #4]
 8004584:	6120      	str	r0, [r4, #16]
 8004586:	b15b      	cbz	r3, 80045a0 <__smakebuf_r+0x74>
 8004588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800458c:	4630      	mov	r0, r6
 800458e:	f000 f8d5 	bl	800473c <_isatty_r>
 8004592:	b128      	cbz	r0, 80045a0 <__smakebuf_r+0x74>
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	89a0      	ldrh	r0, [r4, #12]
 80045a2:	4305      	orrs	r5, r0
 80045a4:	81a5      	strh	r5, [r4, #12]
 80045a6:	e7cd      	b.n	8004544 <__smakebuf_r+0x18>
 80045a8:	08004339 	.word	0x08004339

080045ac <__malloc_lock>:
 80045ac:	4801      	ldr	r0, [pc, #4]	; (80045b4 <__malloc_lock+0x8>)
 80045ae:	f7ff bf95 	b.w	80044dc <__retarget_lock_acquire_recursive>
 80045b2:	bf00      	nop
 80045b4:	2000081c 	.word	0x2000081c

080045b8 <__malloc_unlock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	; (80045c0 <__malloc_unlock+0x8>)
 80045ba:	f7ff bf90 	b.w	80044de <__retarget_lock_release_recursive>
 80045be:	bf00      	nop
 80045c0:	2000081c 	.word	0x2000081c

080045c4 <_raise_r>:
 80045c4:	291f      	cmp	r1, #31
 80045c6:	b538      	push	{r3, r4, r5, lr}
 80045c8:	4604      	mov	r4, r0
 80045ca:	460d      	mov	r5, r1
 80045cc:	d904      	bls.n	80045d8 <_raise_r+0x14>
 80045ce:	2316      	movs	r3, #22
 80045d0:	6003      	str	r3, [r0, #0]
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045da:	b112      	cbz	r2, 80045e2 <_raise_r+0x1e>
 80045dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045e0:	b94b      	cbnz	r3, 80045f6 <_raise_r+0x32>
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 f830 	bl	8004648 <_getpid_r>
 80045e8:	462a      	mov	r2, r5
 80045ea:	4601      	mov	r1, r0
 80045ec:	4620      	mov	r0, r4
 80045ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f2:	f000 b817 	b.w	8004624 <_kill_r>
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d00a      	beq.n	8004610 <_raise_r+0x4c>
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	d103      	bne.n	8004606 <_raise_r+0x42>
 80045fe:	2316      	movs	r3, #22
 8004600:	6003      	str	r3, [r0, #0]
 8004602:	2001      	movs	r0, #1
 8004604:	e7e7      	b.n	80045d6 <_raise_r+0x12>
 8004606:	2400      	movs	r4, #0
 8004608:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800460c:	4628      	mov	r0, r5
 800460e:	4798      	blx	r3
 8004610:	2000      	movs	r0, #0
 8004612:	e7e0      	b.n	80045d6 <_raise_r+0x12>

08004614 <raise>:
 8004614:	4b02      	ldr	r3, [pc, #8]	; (8004620 <raise+0xc>)
 8004616:	4601      	mov	r1, r0
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	f7ff bfd3 	b.w	80045c4 <_raise_r>
 800461e:	bf00      	nop
 8004620:	2000000c 	.word	0x2000000c

08004624 <_kill_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d07      	ldr	r5, [pc, #28]	; (8004644 <_kill_r+0x20>)
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	4611      	mov	r1, r2
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	f7fc fd42 	bl	80010ba <_kill>
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	d102      	bne.n	8004640 <_kill_r+0x1c>
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	b103      	cbz	r3, 8004640 <_kill_r+0x1c>
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	bf00      	nop
 8004644:	20000820 	.word	0x20000820

08004648 <_getpid_r>:
 8004648:	f7fc bd2f 	b.w	80010aa <_getpid>

0800464c <__sread>:
 800464c:	b510      	push	{r4, lr}
 800464e:	460c      	mov	r4, r1
 8004650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004654:	f000 f894 	bl	8004780 <_read_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	bfab      	itete	ge
 800465c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800465e:	89a3      	ldrhlt	r3, [r4, #12]
 8004660:	181b      	addge	r3, r3, r0
 8004662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004666:	bfac      	ite	ge
 8004668:	6563      	strge	r3, [r4, #84]	; 0x54
 800466a:	81a3      	strhlt	r3, [r4, #12]
 800466c:	bd10      	pop	{r4, pc}

0800466e <__swrite>:
 800466e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004672:	461f      	mov	r7, r3
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	05db      	lsls	r3, r3, #23
 8004678:	4605      	mov	r5, r0
 800467a:	460c      	mov	r4, r1
 800467c:	4616      	mov	r6, r2
 800467e:	d505      	bpl.n	800468c <__swrite+0x1e>
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	2302      	movs	r3, #2
 8004686:	2200      	movs	r2, #0
 8004688:	f000 f868 	bl	800475c <_lseek_r>
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004696:	81a3      	strh	r3, [r4, #12]
 8004698:	4632      	mov	r2, r6
 800469a:	463b      	mov	r3, r7
 800469c:	4628      	mov	r0, r5
 800469e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	f000 b817 	b.w	80046d4 <_write_r>

080046a6 <__sseek>:
 80046a6:	b510      	push	{r4, lr}
 80046a8:	460c      	mov	r4, r1
 80046aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ae:	f000 f855 	bl	800475c <_lseek_r>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	bf15      	itete	ne
 80046b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046c2:	81a3      	strheq	r3, [r4, #12]
 80046c4:	bf18      	it	ne
 80046c6:	81a3      	strhne	r3, [r4, #12]
 80046c8:	bd10      	pop	{r4, pc}

080046ca <__sclose>:
 80046ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ce:	f000 b813 	b.w	80046f8 <_close_r>
	...

080046d4 <_write_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4d07      	ldr	r5, [pc, #28]	; (80046f4 <_write_r+0x20>)
 80046d8:	4604      	mov	r4, r0
 80046da:	4608      	mov	r0, r1
 80046dc:	4611      	mov	r1, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	602a      	str	r2, [r5, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7fc fd20 	bl	8001128 <_write>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_write_r+0x1e>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_write_r+0x1e>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	20000820 	.word	0x20000820

080046f8 <_close_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4d06      	ldr	r5, [pc, #24]	; (8004714 <_close_r+0x1c>)
 80046fc:	2300      	movs	r3, #0
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	f7fc fd2c 	bl	8001160 <_close>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_close_r+0x1a>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_close_r+0x1a>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	20000820 	.word	0x20000820

08004718 <_fstat_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4d07      	ldr	r5, [pc, #28]	; (8004738 <_fstat_r+0x20>)
 800471c:	2300      	movs	r3, #0
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	f7fc fd27 	bl	8001178 <_fstat>
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	d102      	bne.n	8004734 <_fstat_r+0x1c>
 800472e:	682b      	ldr	r3, [r5, #0]
 8004730:	b103      	cbz	r3, 8004734 <_fstat_r+0x1c>
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	bd38      	pop	{r3, r4, r5, pc}
 8004736:	bf00      	nop
 8004738:	20000820 	.word	0x20000820

0800473c <_isatty_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d06      	ldr	r5, [pc, #24]	; (8004758 <_isatty_r+0x1c>)
 8004740:	2300      	movs	r3, #0
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f7fc fd26 	bl	8001198 <_isatty>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_isatty_r+0x1a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_isatty_r+0x1a>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	20000820 	.word	0x20000820

0800475c <_lseek_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d07      	ldr	r5, [pc, #28]	; (800477c <_lseek_r+0x20>)
 8004760:	4604      	mov	r4, r0
 8004762:	4608      	mov	r0, r1
 8004764:	4611      	mov	r1, r2
 8004766:	2200      	movs	r2, #0
 8004768:	602a      	str	r2, [r5, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	f7fc fd1f 	bl	80011ae <_lseek>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_lseek_r+0x1e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_lseek_r+0x1e>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	20000820 	.word	0x20000820

08004780 <_read_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	; (80047a0 <_read_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc fcad 	bl	80010ee <_read>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_read_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_read_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	20000820 	.word	0x20000820

080047a4 <_init>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr

080047b0 <_fini>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr
