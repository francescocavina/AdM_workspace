
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08005b70  08005b70  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb4  08005fb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fbc  08005fbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001044e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00010e1a  00000000  00000000  000304ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022b8  00000000  00000000  00041308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d70  00000000  00000000  000435c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dcada  00000000  00000000  00044330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000c68  00000000  00000000  00120e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000259ab  00000000  00000000  00121a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147423  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004258  00000000  00000000  00147474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005b58 	.word	0x08005b58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005b58 	.word	0x08005b58

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_zeros:
    	MOV R2, #0   						@ zero = 0
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <asm_zeros_loop>:
    asm_zeros_loop:							@ loop
    	SUBS R1, R1, #1						@ longitud -= 1
 80001fc:	3901      	subs	r1, #1
        STR R2, [R0, R1, LSL #2]			@ *(vector + longitud * 4) = zero
 80001fe:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
        BNE asm_zeros_loop					@ if longitud > 0 -> repetir bucle
 8000202:	d1fb      	bne.n	80001fc <asm_zeros_loop>
		BX LR								@ retornar a la función llamadora (caller)
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar32:
    	push {R4}							@ se gurda R4 en el stack
 8000206:	b410      	push	{r4}

08000208 <asm_productoEscalar32_loop>:
    asm_productoEscalar32_loop:				@ loop
    	SUBS R2, R2, #1						@ longitud -= 1
 8000208:	3a01      	subs	r2, #1
    	LDR R4, [R0, R2, LSL #2]			@ var = *(vectorIn + longitud * 4)
 800020a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	MUL R4, R4, R3						@ var = var * escalar
 800020e:	fb04 f403 	mul.w	r4, r4, r3
        STR R4, [R1, R2, LSL #2]			@ *(vectorOut + longitud * 4) = var
 8000212:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
        BNE asm_productoEscalar32_loop		@ if longitud > 0 -> repetir bucle
 8000216:	d1f7      	bne.n	8000208 <asm_productoEscalar32_loop>
        pop {R4}							@ se recupera el valor original de R4 desde el stack
 8000218:	bc10      	pop	{r4}
		BX LR								@ retornar a la función llamadora (caller)
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar16>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_productoEscalar16:
    	push {R4}							@ se gurda R4 en el stack
 800021c:	b410      	push	{r4}

0800021e <asm_productoEscalar16_loop>:
    asm_productoEscalar16_loop:				@ loop
		SUBS R2, R2, #1						@ longitud -= 1
 800021e:	3a01      	subs	r2, #1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
 8000220:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
		MUL R4, R4, R3						@ var = var * escalar
 8000224:	fb04 f403 	mul.w	r4, r4, r3
		STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
 8000228:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
		BNE asm_productoEscalar16_loop		@ if longitud > 0 -> repetir bucle
 800022c:	d1f7      	bne.n	800021e <asm_productoEscalar16_loop>
        pop {R4}							@ se recupera el valor original de R4 desde el stack
 800022e:	bc10      	pop	{r4}
		BX LR								@ retornar a la función llamadora (caller)
 8000230:	4770      	bx	lr

08000232 <asm_productoEscalar16Sat>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
    asm_productoEscalar16Sat:
    	push {R4}							@ se gurda R4 en el stack
 8000232:	b410      	push	{r4}

08000234 <asm_productoEscalar16Sat_loop>:
    asm_productoEscalar16Sat_loop:			@ loop
		SUBS R2, R2, #1						@ longitud -= 1
 8000234:	3a01      	subs	r2, #1
		LDRH R4, [R0, R2, LSL #1]			@ var = *(vectorIn + longitud * 4)
 8000236:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
		MUL R4, R4, R3						@ var = var * escalar
 800023a:	fb04 f403 	mul.w	r4, r4, r3
		USAT R4, #12, R4					@ saturación en el bit 12
 800023e:	f384 040c 	usat	r4, #12, r4
	    STRH R4, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 4) = var
 8000242:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	    BNE asm_productoEscalar16Sat_loop	@ if longitud > 0 -> repetir bucle
 8000246:	d1f5      	bne.n	8000234 <asm_productoEscalar16Sat_loop>
        pop {R4}							@ se recupera el valor original de R4 desde el stack
 8000248:	bc10      	pop	{r4}
		BX LR								@ retornar a la función llamadora (caller)
 800024a:	4770      	bx	lr

0800024c <asm_filtroVentana10>:
@
#define WINDOWSIZE 11

.thumb_func
	asm_filtroVentana10:
		PUSH {R4 - R9}						@ se resguardan registros en STACK
 800024c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
		SUB R2, R2, 1						@ longitudVectorIn--;
 8000250:	f1a2 0201 	sub.w	r2, r2, #1
		MOV R3, R2							@ i = longitudVectorIn;
 8000254:	4613      	mov	r3, r2

08000256 <asm_filtroVentana10_loop1>:

@ BEGIN LOOP EXTERNO --------------------------------------------------------------------
	asm_filtroVentana10_loop1:				@ loop externo
		MOV R4, 0							@ sum = 0;
 8000256:	f04f 0400 	mov.w	r4, #0
		MOV R9, #WINDOWSIZE					@ R9 = WINDOWSIZE
 800025a:	f04f 090b 	mov.w	r9, #11
		ADD R5, R3, R9, LSR #1				@ upperLimit = i + (WINDOWSIZE / 2);
 800025e:	eb03 0559 	add.w	r5, r3, r9, lsr #1
		SUB R6, R3, R9, LSR #1				@ lowerLimit = i - (WINDOWSIZE / 2);
 8000262:	eba3 0659 	sub.w	r6, r3, r9, lsr #1

@ BEGIN LOOP INTERNO --------------------------------------------------------------------
		MOV R7, R5							@ j = upperLimit;
 8000266:	462f      	mov	r7, r5

08000268 <asm_filtroVentana10_loop2>:
	asm_filtroVentana10_loop2:				@ loop interno
		@ IF TRUE
		CMP R7, #0							@ j - 0;
 8000268:	2f00      	cmp	r7, #0
		BLT asm_filtroVentana10_else		@ if(j < 0) --> else
 800026a:	db04      	blt.n	8000276 <asm_filtroVentana10_else>
		CMP R7, R2							@ j - longitudVectorIn;
 800026c:	4297      	cmp	r7, r2
		BGT asm_filtroVentana10_else		@ if(j > longitudVectorIn) --> else
 800026e:	dc02      	bgt.n	8000276 <asm_filtroVentana10_else>
		LDRH R8, [R0, R7, LSL 1]			@ R8 = vectorIn[j];
 8000270:	f830 8017 	ldrh.w	r8, [r0, r7, lsl #1]
		ADD R4, R4, R8						@ sum += R8; sum += vectorIn[j];
 8000274:	4444      	add	r4, r8

08000276 <asm_filtroVentana10_else>:
		@ ELSE
	asm_filtroVentana10_else:
		SUB R7, R7, #1						@ j--;
 8000276:	f1a7 0701 	sub.w	r7, r7, #1
		CMP R7, R6							@ j - lowerLimit;
 800027a:	42b7      	cmp	r7, r6
		BGE asm_filtroVentana10_loop2		@ if(j >= lowerLimit) --> loop2 again
 800027c:	daf4      	bge.n	8000268 <asm_filtroVentana10_loop2>
@ END LOOP INTERNO --------------------------------------------------------------------

		SDIV R4, R4, R9						@ sum = sum / WINDOWSIZE;
 800027e:	fb94 f4f9 	sdiv	r4, r4, r9
		STRH R4, [R1, R3, LSL 1]			@ vectorOut[i] = sum / WINDOWSIZE;
 8000282:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]

		SUBS R3, R3, #1						@ i--; Y se activan banderas
 8000286:	3b01      	subs	r3, #1
		BPL asm_filtroVentana10_loop1		@ se repite loop
 8000288:	d5e5      	bpl.n	8000256 <asm_filtroVentana10_loop1>
@ END LOOP EXTERNO --------------------------------------------------------------------

		POP {R4 - R9}						@ se recuperan registros desde STACK
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
		BX LR								@ retornar a la función llamadora (caller)
 800028e:	4770      	bx	lr

08000290 <asm_pack32to16>:

.thumb_func
	asm_pack32to16:

	asm_pack32to16_loop:					@ loop
		SUBS R2, R2, #1						@ longitud--;
 8000290:	3a01      	subs	r2, #1
		LDR R3, [R0, R2, LSL #2]			@ aux = *(vectorIn + longitud * 4)
 8000292:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
		ASR	R3, #MAXSIZEBITS				@ aux >> MAXSIZEBITS;
 8000296:	ea4f 4323 	mov.w	r3, r3, asr #16
		STRH R3, [R1, R2, LSL #1]			@ *(vectorOut + longitud * 2) = aux
 800029a:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
		BNE asm_pack32to16_loop				@ if(longitud > 0) -> repetir bucle
 800029e:	d1f7      	bne.n	8000290 <asm_pack32to16>

		BX LR								@ retornar a la función llamadora (caller)
 80002a0:	4770      	bx	lr

080002a2 <asm_max>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_max:
		LDR R2, [R0]						@ max = vectorIn[0];
 80002a2:	6802      	ldr	r2, [r0, #0]

080002a4 <asm_max_loop>:

	asm_max_loop: 							@ loop
		SUBS R1, R1, #1						@ longitud--;
 80002a4:	3901      	subs	r1, #1
		LDR R3, [R0, R1, LSL #2]			@ var = *(vectorIn + longitud * 4)
 80002a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
		CMP R3, R2							@ var - longitud;
 80002aa:	4293      	cmp	r3, r2
		BLE asm_max_else					@ if(vectorIn[longitud] <= max) --> else
 80002ac:	dd00      	ble.n	80002b0 <asm_max_else>
		MOV R2, R3							@ max = vectorIn[longitud - 1];
 80002ae:	461a      	mov	r2, r3

080002b0 <asm_max_else>:

	asm_max_else:
		CMP R1, #0							@ longitud - 0; Y se activan banderas
 80002b0:	2900      	cmp	r1, #0
		BNE asm_max_loop					@ if(longitud > 0) --> repetir bucle
 80002b2:	d1f7      	bne.n	80002a4 <asm_max_loop>
		MOV R0, R2							@ return max;
 80002b4:	4610      	mov	r0, r2

		BX LR								@ retornar a la función llamadora (caller)
 80002b6:	4770      	bx	lr

080002b8 <asm_downsampleM>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_downsampleM:
		PUSH {R4 - R6}						@ se resguardan registros en STACK
 80002b8:	b470      	push	{r4, r5, r6}
		MOV R4, #0							@ index = 0;
 80002ba:	f04f 0400 	mov.w	r4, #0
		MOV R5, #1							@ i = 1;
 80002be:	f04f 0501 	mov.w	r5, #1

080002c2 <asm_downsampleM_loop1>:

	asm_downsampleM_loop1:					@ loop1
		UDIV R6, R5, R3						@ resultado1 = i / N;
 80002c2:	fbb5 f6f3 	udiv	r6, r5, r3
		MUL R6, R6, R3						@ resultado2 = resultado1 * N;
 80002c6:	fb06 f603 	mul.w	r6, r6, r3
		SUBS R6, R5, R6						@ resto = i - resultado2; // Resto
 80002ca:	1bae      	subs	r6, r5, r6
		BEQ asm_downsampleM_else			@ if(resto == 0) --> else
 80002cc:	d009      	beq.n	80002e2 <asm_downsampleM_else>

		SUB R5, R5, #1						@ i--;
 80002ce:	f1a5 0501 	sub.w	r5, r5, #1
		LDR R6, [R0, R5, LSL #2]			@ R6 = *(vectorIn + i)
 80002d2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
		ADD R5, #1							@ i++;
 80002d6:	f105 0501 	add.w	r5, r5, #1
		STR R6, [R1, R4, LSL #2]			@ *(vectorOut + index) = R6;
 80002da:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
		ADD R4, #1							@ index++;
 80002de:	f104 0401 	add.w	r4, r4, #1

080002e2 <asm_downsampleM_else>:

	asm_downsampleM_else:					@ else
		ADD R5, #1							@ i++;
 80002e2:	f105 0501 	add.w	r5, r5, #1
		CMP R2, R5							@ longitud - i;
 80002e6:	42aa      	cmp	r2, r5
		BHS asm_downsampleM_loop1			@ if(longitud >= i) --> repetir loop1
 80002e8:	d2eb      	bcs.n	80002c2 <asm_downsampleM_loop1>

080002ea <asm_downsampleM_loop2>:

	asm_downsampleM_loop2:					@ loop2
		MOV R5, #0							@ R5 = 0;
 80002ea:	f04f 0500 	mov.w	r5, #0
		STR R5, [R1, R4, LSL #2]			@ *(vectorOut + index) = R5;
 80002ee:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
		ADD R4, #1							@ index++;
 80002f2:	f104 0401 	add.w	r4, r4, #1
		CMP R2, R4							@ longitud - index;
 80002f6:	42a2      	cmp	r2, r4
		BHI asm_downsampleM_loop2			@ if(longitud > index) --> repetir loop2
 80002f8:	d8f7      	bhi.n	80002ea <asm_downsampleM_loop2>

		POP {R4 - R6}						@ se recuperan registros desde STACK
 80002fa:	bc70      	pop	{r4, r5, r6}
		BX LR								@ retornar a la función llamadora (caller)
 80002fc:	4770      	bx	lr

080002fe <asm_invertir>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_invertir:
		PUSH {R4 - R6}						@ se resguardan registros en STACK
 80002fe:	b470      	push	{r4, r5, r6}
		MOV R2, #0							@ i = 0;
 8000300:	f04f 0200 	mov.w	r2, #0
		MOV R3, R1, LSR #1					@ R3 = longitud / 2;
 8000304:	ea4f 0351 	mov.w	r3, r1, lsr #1

08000308 <asm_invertir_loop>:

	asm_invertir_loop:						@ loop
		LDRH R4, [R0, R2, LSL #1]			@ aux1 = *(vector + i)
 8000308:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
		SUB R5, R1, R2						@ R5 = longitud - i;
 800030c:	eba1 0502 	sub.w	r5, r1, r2
		SUB R5, R5, #1						@ R5--;
 8000310:	f1a5 0501 	sub.w	r5, r5, #1
		LDRH R6, [R0, R5, LSL #1]			@ aux2 = *(vector + (longitud - i));
 8000314:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
		STRH R6, [R0, R2, LSL #1]			@ *(vector + i) = aux2;
 8000318:	f820 6012 	strh.w	r6, [r0, r2, lsl #1]
		STRH R4, [R0, R5, LSL #1]			@ *(vector + (longitud - i)) = aux1;
 800031c:	f820 4015 	strh.w	r4, [r0, r5, lsl #1]

		ADD R2, #1							@ i++;
 8000320:	f102 0201 	add.w	r2, r2, #1
		CMP R3, R2							@ (longitud / 2) - i;
 8000324:	4293      	cmp	r3, r2
		BHI asm_invertir_loop				@ if(longitud > i) --> repetir bucle
 8000326:	d8ef      	bhi.n	8000308 <asm_invertir_loop>

		POP {R4 - R6}						@ se recuperan registros desde STACK
 8000328:	bc70      	pop	{r4, r5, r6}
		BX LR								@ retornar a la función llamadora (caller)
 800032a:	4770      	bx	lr

0800032c <asm_ecoV1>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV1:
		PUSH {R4 - R9}					@ se resguardan registros en STACK
 800032c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
		LDRH R4, [SP, #24]				@ se obtiene el quinto parámetro. Se toma 24 biytes arriba porque
 8000330:	f8bd 4018 	ldrh.w	r4, [sp, #24]
										@ se han guardado R4 A R9 en el stack.
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
 8000334:	fb03 f504 	mul.w	r5, r3, r4
		MOV R6, #1000					@ R6  = 1000;
 8000338:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
 800033c:	fbb5 f5f6 	udiv	r5, r5, r6

08000340 <asm_ecoV1_loop>:

	asm_ecoV1_loop:						@ loop
		CMP R2, R5						@ bufferSize - delay_samples;
 8000340:	42aa      	cmp	r2, r5
		BLS asm_ecoV1_else				@ if(bufferSize < delay_samples) --> ir al else
 8000342:	d90e      	bls.n	8000362 <asm_ecoV1_else>
		MOV R6, R2						@ R6 = bufferSize;
 8000344:	4616      	mov	r6, r2
		SUB R6, R6, #1					@ R6 = bufferSize - 1;
 8000346:	f1a6 0601 	sub.w	r6, r6, #1
		MOV R7, R6						@ R7 = bufferSize - 1;
 800034a:	4637      	mov	r7, r6
		SUB R7, R7, R5					@ R7 = bufferSize - 1 - delay_samples;
 800034c:	eba7 0705 	sub.w	r7, r7, r5
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorIn[bufferSize - 1];
 8000350:	f930 8016 	ldrsh.w	r8, [r0, r6, lsl #1]
		LDRSH R9, [R0, R7, LSL #1]		@ R9 = vectorIn[bufferSize - 1 - delay_samples;
 8000354:	f930 9017 	ldrsh.w	r9, [r0, r7, lsl #1]
		ADD R8, R8, R9, ASR #1			@ R8 = vectorIn[bufferSize - 1] + vectorIn[bufferSize - 1 - delay_samples] / 2;
 8000358:	eb08 0869 	add.w	r8, r8, r9, asr #1
		STRH R8, [R1, R6, LSL #1]		@ vectorOut[bufferSize - 1] = R8;
 800035c:	f821 8016 	strh.w	r8, [r1, r6, lsl #1]
		B asm_ecoV1_end_if				@ cuando termina el if, se va al final
 8000360:	e006      	b.n	8000370 <asm_ecoV1_end_if>

08000362 <asm_ecoV1_else>:

	asm_ecoV1_else:
		MOV R6, R2						@ R6 = bufferSize;
 8000362:	4616      	mov	r6, r2
		SUB R6, R6, #1					@ R6 = bufferSize - 1;
 8000364:	f1a6 0601 	sub.w	r6, r6, #1
		LDRSH R7, [R0, R6, LSL #1]		@ R7 = vectorIn[bufferSize - 1];
 8000368:	f930 7016 	ldrsh.w	r7, [r0, r6, lsl #1]
		STRH R7, [R1, R6, LSL #1]		@ vectorOut[bufferSize - 1] = R7;
 800036c:	f821 7016 	strh.w	r7, [r1, r6, lsl #1]

08000370 <asm_ecoV1_end_if>:

	asm_ecoV1_end_if:
		SUBS R2, R2, #1					@ bufferSize--;
 8000370:	3a01      	subs	r2, #1
		CMP R2, #0						@ bufferSize - 0;
 8000372:	2a00      	cmp	r2, #0
		BNE asm_ecoV1_loop				@ if(bufferSize > 0) --> repetir bucle
 8000374:	d1e4      	bne.n	8000340 <asm_ecoV1_loop>

		POP {R4 - R9}					@ se recuperan registros desde STACK
 8000376:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
		BX LR							@ retornar a la función llamadora (caller)
 800037a:	4770      	bx	lr

0800037c <asm_ecoV2>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV2:
		PUSH {R4 - R8}					@ se resguardan registros en STACK
 800037c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
		LDRH R4, [SP, #20]				@ se obtiene el quinto parámetro. Se toma 20 biytes arriba porque
 8000380:	f8bd 4014 	ldrh.w	r4, [sp, #20]
										@ se han guardado R4 A R8 en el stack.
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
 8000384:	fb03 f504 	mul.w	r5, r3, r4
		MOV R6, #1000					@ R6  = 1000;
 8000388:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
 800038c:	fbb5 f5f6 	udiv	r5, r5, r6
		MOV R6, #0						@ i = 0;
 8000390:	f04f 0600 	mov.w	r6, #0

08000394 <asm_ecoV2_loop>:

	asm_ecoV2_loop:						@ loop
		CMP R5, R6						@ delay_samples - i;
 8000394:	42b5      	cmp	r5, r6
		BLS asm_ecoV2_else				@ if(i >= delay_samples) --> ir al else
 8000396:	d904      	bls.n	80003a2 <asm_ecoV2_else>
		LDRSH R7, [R0, R6, LSL #1]		@ R7 = vectorIn[i];
 8000398:	f930 7016 	ldrsh.w	r7, [r0, r6, lsl #1]
		STRH R7, [R1, R6, LSL #1]		@ vectorOut[i] = R7;
 800039c:	f821 7016 	strh.w	r7, [r1, r6, lsl #1]
		B asm_ecoV2_end_if				@ cuando termina el if, se va al final
 80003a0:	e00a      	b.n	80003b8 <asm_ecoV2_end_if>

080003a2 <asm_ecoV2_else>:

	asm_ecoV2_else:
		SUB R7, R6, R5					@ aux = i - delay_samples;
 80003a2:	eba6 0705 	sub.w	r7, r6, r5
		LDRSH R7, [R0, R7, LSL #1]		@ aux = vectorIn[aux];
 80003a6:	f930 7017 	ldrsh.w	r7, [r0, r7, lsl #1]
		MOV R7, R7, LSR #1				@ aux /= 2;
 80003aa:	ea4f 0757 	mov.w	r7, r7, lsr #1
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorIn[i];
 80003ae:	f930 8016 	ldrsh.w	r8, [r0, r6, lsl #1]
		ADD R8, R8, R7					@ R8 = vectorIn[i] + aux;
 80003b2:	44b8      	add	r8, r7
		STRH R8, [R1, R6, LSL #1]		@ vectorOut[i] = R8;
 80003b4:	f821 8016 	strh.w	r8, [r1, r6, lsl #1]

080003b8 <asm_ecoV2_end_if>:

	asm_ecoV2_end_if:
		ADDS R6, R6, #1					@ i++;
 80003b8:	3601      	adds	r6, #1
		CMP R2, R6						@ bufferSize - i;
 80003ba:	42b2      	cmp	r2, r6
		BHI asm_ecoV2_loop				@ if(bufferSize > i) --> repetir bucle
 80003bc:	d8ea      	bhi.n	8000394 <asm_ecoV2_loop>

		POP {R4 - R8}					@ se recuperan registros desde STACK
 80003be:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
		BX LR							@ retornar a la función llamadora (caller)
 80003c2:	4770      	bx	lr

080003c4 <asm_ecoV3>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_ecoV3:
		PUSH {R4 - R9}					@ se resguardan registros en STACK
 80003c4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
		LDRH R4, [SP, #24]				@ se obtiene el quinto parámetro. Se toma 24 biytes arriba porque
 80003c8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
										@ se han guardado R4 A R9 en el stack.
		MOV R2, R2, LSR #1				@ bufferSize = bufferSize / 2;
 80003cc:	ea4f 0252 	mov.w	r2, r2, lsr #1
		MOV R3, R3, LSR #1				@ samplingRate = samplingRate / 2;
 80003d0:	ea4f 0353 	mov.w	r3, r3, lsr #1
		MUL R5, R3, R4					@ delay_samples = samplingRate * delay_ms;
 80003d4:	fb03 f504 	mul.w	r5, r3, r4
		MOV R6, #1000					@ R6  = 1000;
 80003d8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		UDIV R5, R5, R6					@ delay_samples = delay_samples / 1000;
 80003dc:	fbb5 f5f6 	udiv	r5, r5, r6
		MOV R6, #0						@ i = 0;
 80003e0:	f04f 0600 	mov.w	r6, #0
		MOV R9, #0						@ aux2 = 0;
 80003e4:	f04f 0900 	mov.w	r9, #0

080003e8 <asm_ecoV3_loop>:

	asm_ecoV3_loop:						@ loop
		CMP R5, R6						@ delay_samples - i;
 80003e8:	42b5      	cmp	r5, r6
		BLS asm_ecoV3_else				@ if(i >= delay_samples) --> ir al else
 80003ea:	d904      	bls.n	80003f6 <asm_ecoV3_else>
		LDR R7, [R0, R6, LSL #2]		@ R7 = vectorIn[i];
 80003ec:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
		STR R7, [R1, R6, LSL #2]		@ vectorOut[i] = R7;
 80003f0:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
		B asm_ecoV3_end_if				@ cuando termina el if, se va al final
 80003f4:	e00b      	b.n	800040e <asm_ecoV3_end_if>

080003f6 <asm_ecoV3_else>:

	asm_ecoV3_else:
		SUB R7, R6, R5					@ aux = i - delay_samples;
 80003f6:	eba6 0705 	sub.w	r7, r6, r5
		LDR R7, [R0, R7, LSL #2]		@ aux = vectorIn[aux];
 80003fa:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
		SHADD16 R7, R7, R9				@ aux = (aux + 0) / 2;
 80003fe:	fa97 f729 	shadd16	r7, r7, r9
		LDR R8, [R0, R6, LSL #2]		@ R8 = vectorIn[i];
 8000402:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
		SADD16 R8, R8, R7				@ R8 = vectorIn[i] + aux;
 8000406:	fa98 f807 	sadd16	r8, r8, r7
		STR R8, [R1, R6, LSL #2]		@ vectorOut[i] = R8;
 800040a:	f841 8026 	str.w	r8, [r1, r6, lsl #2]

0800040e <asm_ecoV3_end_if>:

	asm_ecoV3_end_if:
		ADDS R6, R6, #1					@ i++;
 800040e:	3601      	adds	r6, #1
		CMP R2, R6						@ bufferSize - i;
 8000410:	42b2      	cmp	r2, r6
		BHI asm_ecoV3_loop				@ if(bufferSize > i) --> repetir bucle
 8000412:	d8e9      	bhi.n	80003e8 <asm_ecoV3_loop>

		POP {R4 - R9}					@ se recuperan registros desde STACK
 8000414:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
		BX LR							@ retornar a la función llamadora (caller)
 8000418:	4770      	bx	lr

0800041a <asm_corrV1>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_corrV1:
		PUSH {R4 - R8}					@ se resguardan registros en STACK
 800041a:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
		MOV R4, #0						@ l = 0;
 800041e:	f04f 0400 	mov.w	r4, #0

08000422 <asm_corrV1_loop1>:

	asm_corrV1_loop1:					@ loop 1
		MOV R5, #0						@ sum = 0;
 8000422:	f04f 0500 	mov.w	r5, #0
		MOV R6, #0						@ n = 0;
 8000426:	f04f 0600 	mov.w	r6, #0

0800042a <asm_corrV1_loop2>:

	asm_corrV1_loop2:					@ loop 2
		SUBS R7, R6, R4					@ n - l;
 800042a:	1b37      	subs	r7, r6, r4
		BLT	asm_corrV1_else				@ if(n - l) < 0 --> ir al else
 800042c:	db06      	blt.n	800043c <asm_corrV1_else>
		LDRSH R7, [R1, R7, LSL #1]		@ R7 = vectorY[n - l];
 800042e:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorX[n];
 8000432:	f930 8016 	ldrsh.w	r8, [r0, r6, lsl #1]
		MUL R7, R7, R8					@ R7 = vectorY[n - l] * vectorX[n];
 8000436:	fb07 f708 	mul.w	r7, r7, r8
		ADD R5, R5, R7					@ sum += (vectorY[n - l] * vectorX[n]);
 800043a:	443d      	add	r5, r7

0800043c <asm_corrV1_else>:

	asm_corrV1_else:					@ else
		ADD R6, R6, #1					@ n++;
 800043c:	f106 0601 	add.w	r6, r6, #1
		CMP R3, R6						@ longitud - n;
 8000440:	42b3      	cmp	r3, r6
		BHI asm_corrV1_loop2			@ if(longitud > n) --> repetir bucle interno
 8000442:	d8f2      	bhi.n	800042a <asm_corrV1_loop2>
		STRH R5, [R2, R4, LSL #1]		@ vectorCorr[l] = sum;
 8000444:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
		ADD R4, R4, #1					@ l++;
 8000448:	f104 0401 	add.w	r4, r4, #1
		CMP R3, R4						@ longitud - l;
 800044c:	42a3      	cmp	r3, r4
		BHI asm_corrV1_loop1			@ if(longitud > l) --> repetir buble externo
 800044e:	d8e8      	bhi.n	8000422 <asm_corrV1_loop1>

		POP {R4 - R8}					@ se recuperan registros desde STACK
 8000450:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
		BX LR							@ retornar a la función llamadora (caller)
 8000454:	4770      	bx	lr

08000456 <asm_corrV2>:
@ Valor de retorno:
@   R0: -
@
.thumb_func
	asm_corrV2:
		PUSH {R4 - R8}					@ se resguardan registros en STACK
 8000456:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
		MOV R4, #0						@ l = 0;
 800045a:	f04f 0400 	mov.w	r4, #0
		MOV R9, R3, LSR #1				@ R9 = longitud / 2;
 800045e:	ea4f 0953 	mov.w	r9, r3, lsr #1

08000462 <asm_corrV2_loop1>:

	asm_corrV2_loop1:					@ loop 1
		MOV R5, #0						@ sum = 0;
 8000462:	f04f 0500 	mov.w	r5, #0
		MOV R6, #0						@ n = 0;
 8000466:	f04f 0600 	mov.w	r6, #0

0800046a <asm_corrV2_loop2>:

	asm_corrV2_loop2:					@ loop 2
		SUBS R7, R6, R4					@ n - l;
 800046a:	1b37      	subs	r7, r6, r4
		BLT	asm_corrV2_else1			@ if(n - l) < 0 --> ir al else
 800046c:	db0a      	blt.n	8000484 <asm_corrV2_else1>
		MOV R8, R7, LSL #2
 800046e:	ea4f 0887 	mov.w	r8, r7, lsl #2
		ADD R7, R8, #1
 8000472:	f108 0701 	add.w	r7, r8, #1
		LDR R7, [R1, R7]				@ R7 = vectorY[n - l];
 8000476:	59cf      	ldr	r7, [r1, r7]
		LDR R8, [R0, R6, LSL #2]		@ R8 = vectorX[n];
 8000478:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
		SMUAD R7, R7, R8				@ R7 = (vectorY[n - l] * vectorX[n]) + (vectorY[n + 1 - l] * vectorX[n + 1]);
 800047c:	fb27 f708 	smuad	r7, r7, r8
		ADD R5, R5, R7					@ sum += (vectorY[n - l] * vectorX[n]);
 8000480:	443d      	add	r5, r7
		B asm_corrV2_else2				@ ir al else 2
 8000482:	e00c      	b.n	800049e <asm_corrV2_else2>

08000484 <asm_corrV2_else1>:

	asm_corrV2_else1:					@ else 1
		ADDS R7, R7, #1					@ R7 += 1;
 8000484:	3701      	adds	r7, #1
		BLT asm_corrV2_else2			@ if((n + 1) - l) < 0 --> ir al else2
 8000486:	db0a      	blt.n	800049e <asm_corrV2_else2>
		LDRSH R7, [R1, R7, LSL #1]
 8000488:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
		ADD R6, R6, #1
 800048c:	f106 0601 	add.w	r6, r6, #1
		LDRSH R8, [R0, R6, LSL #1]		@ R8 = vectorX[n];
 8000490:	f930 8016 	ldrsh.w	r8, [r0, r6, lsl #1]
		SUB R6, R6, #1
 8000494:	f1a6 0601 	sub.w	r6, r6, #1
		SMUAD R7, R7, R8				@ R7 = (vectorY[n - l] * vectorX[n]) + (vectorY[n + 1 - l] * vectorX[n + 1]);
 8000498:	fb27 f708 	smuad	r7, r7, r8
		ADD R5, R5, R7					@ sum += (vectorY[n - l] * vectorX[n]);
 800049c:	443d      	add	r5, r7

0800049e <asm_corrV2_else2>:

	asm_corrV2_else2:					@ else 2
		ADD R6, R6, #1					@ n++;
 800049e:	f106 0601 	add.w	r6, r6, #1
		CMP R9, R6						@ longitud - n;
 80004a2:	45b1      	cmp	r9, r6
		BHI asm_corrV2_loop2			@ if(longitud > n) --> repetir bucle interno
 80004a4:	d8e1      	bhi.n	800046a <asm_corrV2_loop2>

		STRH R5, [R2, R4, LSL #1]		@ vectorCorr[l] = sum;
 80004a6:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
		ADD R4, R4, #1					@ l++;
 80004aa:	f104 0401 	add.w	r4, r4, #1
		@ADD R1, R1, #2
		CMP R3, R4						@ longitud - l;
 80004ae:	42a3      	cmp	r3, r4
		BHI asm_corrV2_loop1			@ if(longitud > l) --> repetir buble externo
 80004b0:	d8d7      	bhi.n	8000462 <asm_corrV2_loop1>

		POP {R4 - R8}					@ se recuperan registros desde STACK
 80004b2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
		BX LR							@ retornar a la función llamadora (caller)
 80004b6:	4770      	bx	lr
	...

080004c0 <memchr>:
 80004c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004c4:	2a10      	cmp	r2, #16
 80004c6:	db2b      	blt.n	8000520 <memchr+0x60>
 80004c8:	f010 0f07 	tst.w	r0, #7
 80004cc:	d008      	beq.n	80004e0 <memchr+0x20>
 80004ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004d2:	3a01      	subs	r2, #1
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d02d      	beq.n	8000534 <memchr+0x74>
 80004d8:	f010 0f07 	tst.w	r0, #7
 80004dc:	b342      	cbz	r2, 8000530 <memchr+0x70>
 80004de:	d1f6      	bne.n	80004ce <memchr+0xe>
 80004e0:	b4f0      	push	{r4, r5, r6, r7}
 80004e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004ea:	f022 0407 	bic.w	r4, r2, #7
 80004ee:	f07f 0700 	mvns.w	r7, #0
 80004f2:	2300      	movs	r3, #0
 80004f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004f8:	3c08      	subs	r4, #8
 80004fa:	ea85 0501 	eor.w	r5, r5, r1
 80004fe:	ea86 0601 	eor.w	r6, r6, r1
 8000502:	fa85 f547 	uadd8	r5, r5, r7
 8000506:	faa3 f587 	sel	r5, r3, r7
 800050a:	fa86 f647 	uadd8	r6, r6, r7
 800050e:	faa5 f687 	sel	r6, r5, r7
 8000512:	b98e      	cbnz	r6, 8000538 <memchr+0x78>
 8000514:	d1ee      	bne.n	80004f4 <memchr+0x34>
 8000516:	bcf0      	pop	{r4, r5, r6, r7}
 8000518:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800051c:	f002 0207 	and.w	r2, r2, #7
 8000520:	b132      	cbz	r2, 8000530 <memchr+0x70>
 8000522:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000526:	3a01      	subs	r2, #1
 8000528:	ea83 0301 	eor.w	r3, r3, r1
 800052c:	b113      	cbz	r3, 8000534 <memchr+0x74>
 800052e:	d1f8      	bne.n	8000522 <memchr+0x62>
 8000530:	2000      	movs	r0, #0
 8000532:	4770      	bx	lr
 8000534:	3801      	subs	r0, #1
 8000536:	4770      	bx	lr
 8000538:	2d00      	cmp	r5, #0
 800053a:	bf06      	itte	eq
 800053c:	4635      	moveq	r5, r6
 800053e:	3803      	subeq	r0, #3
 8000540:	3807      	subne	r0, #7
 8000542:	f015 0f01 	tst.w	r5, #1
 8000546:	d107      	bne.n	8000558 <memchr+0x98>
 8000548:	3001      	adds	r0, #1
 800054a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800054e:	bf02      	ittt	eq
 8000550:	3001      	addeq	r0, #1
 8000552:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000556:	3001      	addeq	r0, #1
 8000558:	bcf0      	pop	{r4, r5, r6, r7}
 800055a:	3801      	subs	r0, #1
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__aeabi_uldivmod>:
 8000560:	b953      	cbnz	r3, 8000578 <__aeabi_uldivmod+0x18>
 8000562:	b94a      	cbnz	r2, 8000578 <__aeabi_uldivmod+0x18>
 8000564:	2900      	cmp	r1, #0
 8000566:	bf08      	it	eq
 8000568:	2800      	cmpeq	r0, #0
 800056a:	bf1c      	itt	ne
 800056c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000570:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000574:	f000 b974 	b.w	8000860 <__aeabi_idiv0>
 8000578:	f1ad 0c08 	sub.w	ip, sp, #8
 800057c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000580:	f000 f806 	bl	8000590 <__udivmoddi4>
 8000584:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800058c:	b004      	add	sp, #16
 800058e:	4770      	bx	lr

08000590 <__udivmoddi4>:
 8000590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000594:	9d08      	ldr	r5, [sp, #32]
 8000596:	4604      	mov	r4, r0
 8000598:	468e      	mov	lr, r1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d14d      	bne.n	800063a <__udivmoddi4+0xaa>
 800059e:	428a      	cmp	r2, r1
 80005a0:	4694      	mov	ip, r2
 80005a2:	d969      	bls.n	8000678 <__udivmoddi4+0xe8>
 80005a4:	fab2 f282 	clz	r2, r2
 80005a8:	b152      	cbz	r2, 80005c0 <__udivmoddi4+0x30>
 80005aa:	fa01 f302 	lsl.w	r3, r1, r2
 80005ae:	f1c2 0120 	rsb	r1, r2, #32
 80005b2:	fa20 f101 	lsr.w	r1, r0, r1
 80005b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ba:	ea41 0e03 	orr.w	lr, r1, r3
 80005be:	4094      	lsls	r4, r2
 80005c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005c4:	0c21      	lsrs	r1, r4, #16
 80005c6:	fbbe f6f8 	udiv	r6, lr, r8
 80005ca:	fa1f f78c 	uxth.w	r7, ip
 80005ce:	fb08 e316 	mls	r3, r8, r6, lr
 80005d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80005d6:	fb06 f107 	mul.w	r1, r6, r7
 80005da:	4299      	cmp	r1, r3
 80005dc:	d90a      	bls.n	80005f4 <__udivmoddi4+0x64>
 80005de:	eb1c 0303 	adds.w	r3, ip, r3
 80005e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80005e6:	f080 811f 	bcs.w	8000828 <__udivmoddi4+0x298>
 80005ea:	4299      	cmp	r1, r3
 80005ec:	f240 811c 	bls.w	8000828 <__udivmoddi4+0x298>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	1a5b      	subs	r3, r3, r1
 80005f6:	b2a4      	uxth	r4, r4
 80005f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000600:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000604:	fb00 f707 	mul.w	r7, r0, r7
 8000608:	42a7      	cmp	r7, r4
 800060a:	d90a      	bls.n	8000622 <__udivmoddi4+0x92>
 800060c:	eb1c 0404 	adds.w	r4, ip, r4
 8000610:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000614:	f080 810a 	bcs.w	800082c <__udivmoddi4+0x29c>
 8000618:	42a7      	cmp	r7, r4
 800061a:	f240 8107 	bls.w	800082c <__udivmoddi4+0x29c>
 800061e:	4464      	add	r4, ip
 8000620:	3802      	subs	r0, #2
 8000622:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000626:	1be4      	subs	r4, r4, r7
 8000628:	2600      	movs	r6, #0
 800062a:	b11d      	cbz	r5, 8000634 <__udivmoddi4+0xa4>
 800062c:	40d4      	lsrs	r4, r2
 800062e:	2300      	movs	r3, #0
 8000630:	e9c5 4300 	strd	r4, r3, [r5]
 8000634:	4631      	mov	r1, r6
 8000636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063a:	428b      	cmp	r3, r1
 800063c:	d909      	bls.n	8000652 <__udivmoddi4+0xc2>
 800063e:	2d00      	cmp	r5, #0
 8000640:	f000 80ef 	beq.w	8000822 <__udivmoddi4+0x292>
 8000644:	2600      	movs	r6, #0
 8000646:	e9c5 0100 	strd	r0, r1, [r5]
 800064a:	4630      	mov	r0, r6
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	fab3 f683 	clz	r6, r3
 8000656:	2e00      	cmp	r6, #0
 8000658:	d14a      	bne.n	80006f0 <__udivmoddi4+0x160>
 800065a:	428b      	cmp	r3, r1
 800065c:	d302      	bcc.n	8000664 <__udivmoddi4+0xd4>
 800065e:	4282      	cmp	r2, r0
 8000660:	f200 80f9 	bhi.w	8000856 <__udivmoddi4+0x2c6>
 8000664:	1a84      	subs	r4, r0, r2
 8000666:	eb61 0303 	sbc.w	r3, r1, r3
 800066a:	2001      	movs	r0, #1
 800066c:	469e      	mov	lr, r3
 800066e:	2d00      	cmp	r5, #0
 8000670:	d0e0      	beq.n	8000634 <__udivmoddi4+0xa4>
 8000672:	e9c5 4e00 	strd	r4, lr, [r5]
 8000676:	e7dd      	b.n	8000634 <__udivmoddi4+0xa4>
 8000678:	b902      	cbnz	r2, 800067c <__udivmoddi4+0xec>
 800067a:	deff      	udf	#255	; 0xff
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	2a00      	cmp	r2, #0
 8000682:	f040 8092 	bne.w	80007aa <__udivmoddi4+0x21a>
 8000686:	eba1 010c 	sub.w	r1, r1, ip
 800068a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800068e:	fa1f fe8c 	uxth.w	lr, ip
 8000692:	2601      	movs	r6, #1
 8000694:	0c20      	lsrs	r0, r4, #16
 8000696:	fbb1 f3f7 	udiv	r3, r1, r7
 800069a:	fb07 1113 	mls	r1, r7, r3, r1
 800069e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006a2:	fb0e f003 	mul.w	r0, lr, r3
 80006a6:	4288      	cmp	r0, r1
 80006a8:	d908      	bls.n	80006bc <__udivmoddi4+0x12c>
 80006aa:	eb1c 0101 	adds.w	r1, ip, r1
 80006ae:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80006b2:	d202      	bcs.n	80006ba <__udivmoddi4+0x12a>
 80006b4:	4288      	cmp	r0, r1
 80006b6:	f200 80cb 	bhi.w	8000850 <__udivmoddi4+0x2c0>
 80006ba:	4643      	mov	r3, r8
 80006bc:	1a09      	subs	r1, r1, r0
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c4:	fb07 1110 	mls	r1, r7, r0, r1
 80006c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006cc:	fb0e fe00 	mul.w	lr, lr, r0
 80006d0:	45a6      	cmp	lr, r4
 80006d2:	d908      	bls.n	80006e6 <__udivmoddi4+0x156>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006dc:	d202      	bcs.n	80006e4 <__udivmoddi4+0x154>
 80006de:	45a6      	cmp	lr, r4
 80006e0:	f200 80bb 	bhi.w	800085a <__udivmoddi4+0x2ca>
 80006e4:	4608      	mov	r0, r1
 80006e6:	eba4 040e 	sub.w	r4, r4, lr
 80006ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006ee:	e79c      	b.n	800062a <__udivmoddi4+0x9a>
 80006f0:	f1c6 0720 	rsb	r7, r6, #32
 80006f4:	40b3      	lsls	r3, r6
 80006f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80006fe:	fa20 f407 	lsr.w	r4, r0, r7
 8000702:	fa01 f306 	lsl.w	r3, r1, r6
 8000706:	431c      	orrs	r4, r3
 8000708:	40f9      	lsrs	r1, r7
 800070a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800070e:	fa00 f306 	lsl.w	r3, r0, r6
 8000712:	fbb1 f8f9 	udiv	r8, r1, r9
 8000716:	0c20      	lsrs	r0, r4, #16
 8000718:	fa1f fe8c 	uxth.w	lr, ip
 800071c:	fb09 1118 	mls	r1, r9, r8, r1
 8000720:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000724:	fb08 f00e 	mul.w	r0, r8, lr
 8000728:	4288      	cmp	r0, r1
 800072a:	fa02 f206 	lsl.w	r2, r2, r6
 800072e:	d90b      	bls.n	8000748 <__udivmoddi4+0x1b8>
 8000730:	eb1c 0101 	adds.w	r1, ip, r1
 8000734:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000738:	f080 8088 	bcs.w	800084c <__udivmoddi4+0x2bc>
 800073c:	4288      	cmp	r0, r1
 800073e:	f240 8085 	bls.w	800084c <__udivmoddi4+0x2bc>
 8000742:	f1a8 0802 	sub.w	r8, r8, #2
 8000746:	4461      	add	r1, ip
 8000748:	1a09      	subs	r1, r1, r0
 800074a:	b2a4      	uxth	r4, r4
 800074c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000750:	fb09 1110 	mls	r1, r9, r0, r1
 8000754:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000758:	fb00 fe0e 	mul.w	lr, r0, lr
 800075c:	458e      	cmp	lr, r1
 800075e:	d908      	bls.n	8000772 <__udivmoddi4+0x1e2>
 8000760:	eb1c 0101 	adds.w	r1, ip, r1
 8000764:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000768:	d26c      	bcs.n	8000844 <__udivmoddi4+0x2b4>
 800076a:	458e      	cmp	lr, r1
 800076c:	d96a      	bls.n	8000844 <__udivmoddi4+0x2b4>
 800076e:	3802      	subs	r0, #2
 8000770:	4461      	add	r1, ip
 8000772:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000776:	fba0 9402 	umull	r9, r4, r0, r2
 800077a:	eba1 010e 	sub.w	r1, r1, lr
 800077e:	42a1      	cmp	r1, r4
 8000780:	46c8      	mov	r8, r9
 8000782:	46a6      	mov	lr, r4
 8000784:	d356      	bcc.n	8000834 <__udivmoddi4+0x2a4>
 8000786:	d053      	beq.n	8000830 <__udivmoddi4+0x2a0>
 8000788:	b15d      	cbz	r5, 80007a2 <__udivmoddi4+0x212>
 800078a:	ebb3 0208 	subs.w	r2, r3, r8
 800078e:	eb61 010e 	sbc.w	r1, r1, lr
 8000792:	fa01 f707 	lsl.w	r7, r1, r7
 8000796:	fa22 f306 	lsr.w	r3, r2, r6
 800079a:	40f1      	lsrs	r1, r6
 800079c:	431f      	orrs	r7, r3
 800079e:	e9c5 7100 	strd	r7, r1, [r5]
 80007a2:	2600      	movs	r6, #0
 80007a4:	4631      	mov	r1, r6
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	f1c2 0320 	rsb	r3, r2, #32
 80007ae:	40d8      	lsrs	r0, r3
 80007b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b4:	fa21 f303 	lsr.w	r3, r1, r3
 80007b8:	4091      	lsls	r1, r2
 80007ba:	4301      	orrs	r1, r0
 80007bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007c0:	fa1f fe8c 	uxth.w	lr, ip
 80007c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007c8:	fb07 3610 	mls	r6, r7, r0, r3
 80007cc:	0c0b      	lsrs	r3, r1, #16
 80007ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80007d2:	fb00 f60e 	mul.w	r6, r0, lr
 80007d6:	429e      	cmp	r6, r3
 80007d8:	fa04 f402 	lsl.w	r4, r4, r2
 80007dc:	d908      	bls.n	80007f0 <__udivmoddi4+0x260>
 80007de:	eb1c 0303 	adds.w	r3, ip, r3
 80007e2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80007e6:	d22f      	bcs.n	8000848 <__udivmoddi4+0x2b8>
 80007e8:	429e      	cmp	r6, r3
 80007ea:	d92d      	bls.n	8000848 <__udivmoddi4+0x2b8>
 80007ec:	3802      	subs	r0, #2
 80007ee:	4463      	add	r3, ip
 80007f0:	1b9b      	subs	r3, r3, r6
 80007f2:	b289      	uxth	r1, r1
 80007f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007f8:	fb07 3316 	mls	r3, r7, r6, r3
 80007fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000800:	fb06 f30e 	mul.w	r3, r6, lr
 8000804:	428b      	cmp	r3, r1
 8000806:	d908      	bls.n	800081a <__udivmoddi4+0x28a>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000810:	d216      	bcs.n	8000840 <__udivmoddi4+0x2b0>
 8000812:	428b      	cmp	r3, r1
 8000814:	d914      	bls.n	8000840 <__udivmoddi4+0x2b0>
 8000816:	3e02      	subs	r6, #2
 8000818:	4461      	add	r1, ip
 800081a:	1ac9      	subs	r1, r1, r3
 800081c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000820:	e738      	b.n	8000694 <__udivmoddi4+0x104>
 8000822:	462e      	mov	r6, r5
 8000824:	4628      	mov	r0, r5
 8000826:	e705      	b.n	8000634 <__udivmoddi4+0xa4>
 8000828:	4606      	mov	r6, r0
 800082a:	e6e3      	b.n	80005f4 <__udivmoddi4+0x64>
 800082c:	4618      	mov	r0, r3
 800082e:	e6f8      	b.n	8000622 <__udivmoddi4+0x92>
 8000830:	454b      	cmp	r3, r9
 8000832:	d2a9      	bcs.n	8000788 <__udivmoddi4+0x1f8>
 8000834:	ebb9 0802 	subs.w	r8, r9, r2
 8000838:	eb64 0e0c 	sbc.w	lr, r4, ip
 800083c:	3801      	subs	r0, #1
 800083e:	e7a3      	b.n	8000788 <__udivmoddi4+0x1f8>
 8000840:	4646      	mov	r6, r8
 8000842:	e7ea      	b.n	800081a <__udivmoddi4+0x28a>
 8000844:	4620      	mov	r0, r4
 8000846:	e794      	b.n	8000772 <__udivmoddi4+0x1e2>
 8000848:	4640      	mov	r0, r8
 800084a:	e7d1      	b.n	80007f0 <__udivmoddi4+0x260>
 800084c:	46d0      	mov	r8, sl
 800084e:	e77b      	b.n	8000748 <__udivmoddi4+0x1b8>
 8000850:	3b02      	subs	r3, #2
 8000852:	4461      	add	r1, ip
 8000854:	e732      	b.n	80006bc <__udivmoddi4+0x12c>
 8000856:	4630      	mov	r0, r6
 8000858:	e709      	b.n	800066e <__udivmoddi4+0xde>
 800085a:	4464      	add	r4, ip
 800085c:	3802      	subs	r0, #2
 800085e:	e742      	b.n	80006e6 <__udivmoddi4+0x156>

08000860 <__aeabi_idiv0>:
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop

08000864 <asm_sum_tester>:
 */

#include "asm_func_tester.h"


void asm_sum_tester(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0

	uint32_t a = 5;
 800086a:	2305      	movs	r3, #5
 800086c:	60fb      	str	r3, [r7, #12]
	uint32_t b = 3;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
	uint32_t resultado;

	resultado = asm_sum(a, b);
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fcbd 	bl	80001f4 <asm_sum>
 800087a:	6078      	str	r0, [r7, #4]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <asm_zeros_tester>:


/* EJERCICIO 1 ---------------------------------------------------------------*/
void asm_zeros_tester(void) {
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

	uint32_t myVec[] = {1, 3, 5, 7, 9, 11};
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <asm_zeros_tester+0x2c>)
 800088c:	463c      	mov	r4, r7
 800088e:	461d      	mov	r5, r3
 8000890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000898:	e884 0003 	stmia.w	r4, {r0, r1}

	asm_zeros(myVec, sizeof(myVec) / sizeof(myVec[0]));
 800089c:	463b      	mov	r3, r7
 800089e:	2106      	movs	r1, #6
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fca9 	bl	80001f8 <asm_zeros>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bdb0      	pop	{r4, r5, r7, pc}
 80008ae:	bf00      	nop
 80008b0:	08005b70 	.word	0x08005b70

080008b4 <asm_productoEscalar32_tester>:


/* EJERCICIO 2 ---------------------------------------------------------------*/
void asm_productoEscalar32_tester(void) {
 80008b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b8:	b08b      	sub	sp, #44	; 0x2c
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	466b      	mov	r3, sp
 80008be:	461e      	mov	r6, r3

	uint32_t myVecIn[] = {1, 3, 5, 7, 9, 11};
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <asm_productoEscalar32_tester+0x90>)
 80008c2:	463c      	mov	r4, r7
 80008c4:	461d      	mov	r5, r3
 80008c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ce:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t myVecSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 80008d2:	2306      	movs	r3, #6
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t myVecOut[myVecSize];
 80008d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008d8:	460b      	mov	r3, r1
 80008da:	3b01      	subs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
 80008de:	2300      	movs	r3, #0
 80008e0:	468a      	mov	sl, r1
 80008e2:	469b      	mov	fp, r3
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80008f0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80008f4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80008f8:	2300      	movs	r3, #0
 80008fa:	4688      	mov	r8, r1
 80008fc:	4699      	mov	r9, r3
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800090a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800090e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000912:	008b      	lsls	r3, r1, #2
 8000914:	3307      	adds	r3, #7
 8000916:	08db      	lsrs	r3, r3, #3
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	ebad 0d03 	sub.w	sp, sp, r3
 800091e:	466b      	mov	r3, sp
 8000920:	3303      	adds	r3, #3
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	61fb      	str	r3, [r7, #28]
	uint32_t scalar = 8;
 8000928:	2308      	movs	r3, #8
 800092a:	61bb      	str	r3, [r7, #24]

	asm_productoEscalar32(myVecIn, myVecOut, myVecSize, scalar);
 800092c:	4638      	mov	r0, r7
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000932:	69f9      	ldr	r1, [r7, #28]
 8000934:	f7ff fc67 	bl	8000206 <asm_productoEscalar32>
 8000938:	46b5      	mov	sp, r6
}
 800093a:	bf00      	nop
 800093c:	372c      	adds	r7, #44	; 0x2c
 800093e:	46bd      	mov	sp, r7
 8000940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000944:	08005b70 	.word	0x08005b70

08000948 <asm_productoEscalar16_tester>:


/* EJERCICIO 3 ---------------------------------------------------------------*/
void asm_productoEscalar16_tester(void) {
 8000948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800094c:	b089      	sub	sp, #36	; 0x24
 800094e:	af00      	add	r7, sp, #0
 8000950:	466b      	mov	r3, sp
 8000952:	461e      	mov	r6, r3

	uint16_t myVecIn[] = {1, 3, 5, 7, 9, 11};
 8000954:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <asm_productoEscalar16_tester+0x8c>)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	ca07      	ldmia	r2, {r0, r1, r2}
 800095a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t myVecSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 800095e:	2306      	movs	r3, #6
 8000960:	83fb      	strh	r3, [r7, #30]
	uint16_t myVecOut[myVecSize];
 8000962:	8bf9      	ldrh	r1, [r7, #30]
 8000964:	460b      	mov	r3, r1
 8000966:	3b01      	subs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	b28b      	uxth	r3, r1
 800096c:	2200      	movs	r2, #0
 800096e:	4698      	mov	r8, r3
 8000970:	4691      	mov	r9, r2
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800097e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000982:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000986:	b28b      	uxth	r3, r1
 8000988:	2200      	movs	r2, #0
 800098a:	461c      	mov	r4, r3
 800098c:	4615      	mov	r5, r2
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	012b      	lsls	r3, r5, #4
 8000998:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800099c:	0122      	lsls	r2, r4, #4
 800099e:	460b      	mov	r3, r1
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	3307      	adds	r3, #7
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	ebad 0d03 	sub.w	sp, sp, r3
 80009ac:	466b      	mov	r3, sp
 80009ae:	3301      	adds	r3, #1
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
	uint16_t scalar = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	827b      	strh	r3, [r7, #18]

	asm_productoEscalar16(myVecIn, myVecOut, myVecSize, scalar);
 80009ba:	8a7b      	ldrh	r3, [r7, #18]
 80009bc:	8bfa      	ldrh	r2, [r7, #30]
 80009be:	1d38      	adds	r0, r7, #4
 80009c0:	6979      	ldr	r1, [r7, #20]
 80009c2:	f7ff fc2b 	bl	800021c <asm_productoEscalar16>
 80009c6:	46b5      	mov	sp, r6
}
 80009c8:	bf00      	nop
 80009ca:	3724      	adds	r7, #36	; 0x24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009d2:	bf00      	nop
 80009d4:	08005b88 	.word	0x08005b88

080009d8 <asm_productoEscalar16Sat_tester>:


/* EJERCICIO 4 ---------------------------------------------------------------*/
void asm_productoEscalar16Sat_tester(void) {
 80009d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009dc:	b089      	sub	sp, #36	; 0x24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	466b      	mov	r3, sp
 80009e2:	461e      	mov	r6, r3

	uint16_t myVecIn[] = {1, 3, 5, 7, 9, 11};
 80009e4:	4a1f      	ldr	r2, [pc, #124]	; (8000a64 <asm_productoEscalar16Sat_tester+0x8c>)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t myVecSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 80009ee:	2306      	movs	r3, #6
 80009f0:	83fb      	strh	r3, [r7, #30]
	uint16_t myVecOut[myVecSize];
 80009f2:	8bf9      	ldrh	r1, [r7, #30]
 80009f4:	460b      	mov	r3, r1
 80009f6:	3b01      	subs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	b28b      	uxth	r3, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	4698      	mov	r8, r3
 8000a00:	4691      	mov	r9, r2
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	f04f 0300 	mov.w	r3, #0
 8000a0a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000a0e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000a12:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000a16:	b28b      	uxth	r3, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4615      	mov	r5, r2
 8000a1e:	f04f 0200 	mov.w	r2, #0
 8000a22:	f04f 0300 	mov.w	r3, #0
 8000a26:	012b      	lsls	r3, r5, #4
 8000a28:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000a2c:	0122      	lsls	r2, r4, #4
 8000a2e:	460b      	mov	r3, r1
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	3307      	adds	r3, #7
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	ebad 0d03 	sub.w	sp, sp, r3
 8000a3c:	466b      	mov	r3, sp
 8000a3e:	3301      	adds	r3, #1
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
	uint16_t scalar = 600;
 8000a46:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a4a:	827b      	strh	r3, [r7, #18]

	asm_productoEscalar16Sat(myVecIn, myVecOut, myVecSize, scalar);
 8000a4c:	8a7b      	ldrh	r3, [r7, #18]
 8000a4e:	8bfa      	ldrh	r2, [r7, #30]
 8000a50:	1d38      	adds	r0, r7, #4
 8000a52:	6979      	ldr	r1, [r7, #20]
 8000a54:	f7ff fbed 	bl	8000232 <asm_productoEscalar16Sat>
 8000a58:	46b5      	mov	sp, r6
}
 8000a5a:	bf00      	nop
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a64:	08005b88 	.word	0x08005b88

08000a68 <asm_filtroVentana10_tester>:


/* EJERCICIO 5 ---------------------------------------------------------------*/
void asm_filtroVentana10_tester(void) {
 8000a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a6c:	b089      	sub	sp, #36	; 0x24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	466b      	mov	r3, sp
 8000a72:	461e      	mov	r6, r3

	uint16_t myVecIn[] = {1, 3, 5, 4, 6, 2, 8, 12, 7, 16};
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <asm_filtroVentana10_tester+0x90>)
 8000a76:	463c      	mov	r4, r7
 8000a78:	461d      	mov	r5, r3
 8000a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	6023      	str	r3, [r4, #0]
	uint16_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 8000a82:	230a      	movs	r3, #10
 8000a84:	83fb      	strh	r3, [r7, #30]
	uint16_t myVecOut[myVecInSize];
 8000a86:	8bf9      	ldrh	r1, [r7, #30]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	b28b      	uxth	r3, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	469a      	mov	sl, r3
 8000a94:	4693      	mov	fp, r2
 8000a96:	f04f 0200 	mov.w	r2, #0
 8000a9a:	f04f 0300 	mov.w	r3, #0
 8000a9e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000aa2:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000aa6:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000aaa:	b28b      	uxth	r3, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	4698      	mov	r8, r3
 8000ab0:	4691      	mov	r9, r2
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000abe:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000ac2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	3307      	adds	r3, #7
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ad4:	466b      	mov	r3, sp
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	617b      	str	r3, [r7, #20]

	asm_filtroVentana10(myVecIn, myVecOut, myVecInSize);
 8000ade:	8bfa      	ldrh	r2, [r7, #30]
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	6979      	ldr	r1, [r7, #20]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fbb1 	bl	800024c <asm_filtroVentana10>
 8000aea:	46b5      	mov	sp, r6
}
 8000aec:	bf00      	nop
 8000aee:	3724      	adds	r7, #36	; 0x24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000af6:	bf00      	nop
 8000af8:	08005b94 	.word	0x08005b94

08000afc <asm_pack32to16_tester>:


/* EJERCICIO 6 ---------------------------------------------------------------*/
void asm_pack32to16_tester(void) {
 8000afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b00:	b08f      	sub	sp, #60	; 0x3c
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	466b      	mov	r3, sp
 8000b06:	461e      	mov	r6, r3

	int32_t myVecIn[] = {32500, 439000, 65500, 7010000, 115400, 4000450, 3990705493, 1200, 815440, 340444};
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <asm_pack32to16_tester+0x90>)
 8000b0a:	1d3c      	adds	r4, r7, #4
 8000b0c:	461d      	mov	r5, r3
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b1a:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 8000b1e:	230a      	movs	r3, #10
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t myVecOut[myVecInSize];
 8000b22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b24:	460b      	mov	r3, r1
 8000b26:	3b01      	subs	r3, #1
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	468a      	mov	sl, r1
 8000b2e:	469b      	mov	fp, r3
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000b3c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000b40:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000b44:	2300      	movs	r3, #0
 8000b46:	4688      	mov	r8, r1
 8000b48:	4699      	mov	r9, r3
 8000b4a:	f04f 0200 	mov.w	r2, #0
 8000b4e:	f04f 0300 	mov.w	r3, #0
 8000b52:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000b56:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000b5a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000b5e:	004b      	lsls	r3, r1, #1
 8000b60:	3307      	adds	r3, #7
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	ebad 0d03 	sub.w	sp, sp, r3
 8000b6a:	466b      	mov	r3, sp
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c

	asm_pack32to16(myVecIn, myVecOut, myVecInSize);
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb88 	bl	8000290 <asm_pack32to16>
 8000b80:	46b5      	mov	sp, r6
}
 8000b82:	bf00      	nop
 8000b84:	373c      	adds	r7, #60	; 0x3c
 8000b86:	46bd      	mov	sp, r7
 8000b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8c:	08005ba8 	.word	0x08005ba8

08000b90 <asm_max_tester>:


/* EJERCICIO 7 ---------------------------------------------------------------*/
void asm_max_tester(void) {
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0

	int32_t myVecIn[] = {32500, 439000, -65500, 7010000, -115400, 4000450, 90705493, -1200, 815440, 340444};
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <asm_max_tester+0x34>)
 8000b98:	463c      	mov	r4, r7
 8000b9a:	461d      	mov	r5, r3
 8000b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ba8:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 8000bac:	230a      	movs	r3, #10
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t max = asm_max(myVecIn, myVecInSize);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb74 	bl	80002a2 <asm_max>
 8000bba:	62b8      	str	r0, [r7, #40]	; 0x28
}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc4:	08005bd0 	.word	0x08005bd0

08000bc8 <asm_downsampleM_tester>:


/* EJERCICIO 8 ---------------------------------------------------------------*/
void asm_downsampleM_tester(void) {
 8000bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bcc:	b09f      	sub	sp, #124	; 0x7c
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	466b      	mov	r3, sp
 8000bd2:	461e      	mov	r6, r3

	int32_t myVecIn[] = {100, 88, 123, 500, 1, 57, 980, 10, 45, 1, 450, 650, 976, 784, 1, 725, 680, 506, 120, 1, 34, 78, 90, 120, 1};
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <asm_downsampleM_tester+0x88>)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4611      	mov	r1, r2
 8000bda:	2264      	movs	r2, #100	; 0x64
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 ff3f 	bl	8004a60 <memcpy>
	uint32_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 8000be2:	2319      	movs	r3, #25
 8000be4:	677b      	str	r3, [r7, #116]	; 0x74
	int32_t myVecOut[myVecInSize];
 8000be6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000be8:	460b      	mov	r3, r1
 8000bea:	3b01      	subs	r3, #1
 8000bec:	673b      	str	r3, [r7, #112]	; 0x70
 8000bee:	2300      	movs	r3, #0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000c00:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000c04:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000c08:	2300      	movs	r3, #0
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	016b      	lsls	r3, r5, #5
 8000c18:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000c1c:	0162      	lsls	r2, r4, #5
 8000c1e:	008b      	lsls	r3, r1, #2
 8000c20:	3307      	adds	r3, #7
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	ebad 0d03 	sub.w	sp, sp, r3
 8000c2a:	466b      	mov	r3, sp
 8000c2c:	3303      	adds	r3, #3
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t N = 5;
 8000c34:	2305      	movs	r3, #5
 8000c36:	66bb      	str	r3, [r7, #104]	; 0x68

	asm_downsampleM(myVecIn, myVecOut, myVecInSize, N);
 8000c38:	1d38      	adds	r0, r7, #4
 8000c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c3e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000c40:	f7ff fb3a 	bl	80002b8 <asm_downsampleM>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	377c      	adds	r7, #124	; 0x7c
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c50:	08005bf8 	.word	0x08005bf8

08000c54 <asm_invertir_tester>:


/* EJERCICIO 9 ---------------------------------------------------------------*/
void asm_invertir_tester(void) {
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

	uint16_t myVec[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <asm_invertir_tester+0x2c>)
 8000c5c:	463c      	mov	r4, r7
 8000c5e:	461d      	mov	r5, r3
 8000c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	6023      	str	r3, [r4, #0]
	int32_t myVecSize = sizeof(myVec) / sizeof(myVec[0]);
 8000c68:	230a      	movs	r3, #10
 8000c6a:	617b      	str	r3, [r7, #20]

	asm_invertir(myVec, myVecSize);
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fb43 	bl	80002fe <asm_invertir>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c80:	08005c5c 	.word	0x08005c5c

08000c84 <asm_ecoV1_tester>:


/* EJERCICIO 10.1 ------------------------------------------------------------*/
void asm_ecoV1_tester(void) {
 8000c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c88:	b08b      	sub	sp, #44	; 0x2c
 8000c8a:	af02      	add	r7, sp, #8
 8000c8c:	466b      	mov	r3, sp
 8000c8e:	461e      	mov	r6, r3

	const uint16_t bufferSize = 4096;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	82fb      	strh	r3, [r7, #22]
	const uint16_t samplingRate = 44100;
 8000c96:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000c9a:	833b      	strh	r3, [r7, #24]
	const uint16_t delay_ms = 20;
 8000c9c:	2314      	movs	r3, #20
 8000c9e:	837b      	strh	r3, [r7, #26]

	int16_t myVecIn[bufferSize];
 8000ca0:	8afb      	ldrh	r3, [r7, #22]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	469a      	mov	sl, r3
 8000cac:	4693      	mov	fp, r2
 8000cae:	f04f 0200 	mov.w	r2, #0
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000cba:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000cbe:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000cc2:	8afb      	ldrh	r3, [r7, #22]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	4691      	mov	r9, r2
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000cd6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000cda:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000cde:	8afb      	ldrh	r3, [r7, #22]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	3307      	adds	r3, #7
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	ebad 0d03 	sub.w	sp, sp, r3
 8000cec:	ab02      	add	r3, sp, #8
 8000cee:	3301      	adds	r3, #1
 8000cf0:	085b      	lsrs	r3, r3, #1
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
	int16_t myVecOut[bufferSize];
 8000cf6:	8afb      	ldrh	r3, [r7, #22]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	461c      	mov	r4, r3
 8000d02:	4615      	mov	r5, r2
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	012b      	lsls	r3, r5, #4
 8000d0e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000d12:	0122      	lsls	r2, r4, #4
 8000d14:	8afb      	ldrh	r3, [r7, #22]
 8000d16:	2200      	movs	r2, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	010b      	lsls	r3, r1, #4
 8000d26:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000d2a:	0102      	lsls	r2, r0, #4
 8000d2c:	8afb      	ldrh	r3, [r7, #22]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	3307      	adds	r3, #7
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	ebad 0d03 	sub.w	sp, sp, r3
 8000d3a:	ab02      	add	r3, sp, #8
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]

	srand(0);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f003 fea1 	bl	8004a8c <srand>

	for(uint16_t i = 0; i < bufferSize; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	82bb      	strh	r3, [r7, #20]
 8000d4e:	e013      	b.n	8000d78 <asm_ecoV1_tester+0xf4>

		myVecIn[i] = rand() % 65536 - 32768;
 8000d50:	f003 feca 	bl	8004ae8 <rand>
 8000d54:	4603      	mov	r3, r0
 8000d56:	425a      	negs	r2, r3
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	b292      	uxth	r2, r2
 8000d5c:	bf58      	it	pl
 8000d5e:	4253      	negpl	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	8aba      	ldrh	r2, [r7, #20]
 8000d6a:	b219      	sxth	r1, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i = 0; i < bufferSize; i++) {
 8000d72:	8abb      	ldrh	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	82bb      	strh	r3, [r7, #20]
 8000d78:	8aba      	ldrh	r2, [r7, #20]
 8000d7a:	8afb      	ldrh	r3, [r7, #22]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3e7      	bcc.n	8000d50 <asm_ecoV1_tester+0xcc>
	}

	DWT->CYCCNT = 0;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <asm_ecoV1_tester+0x128>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]

	asm_ecoV1(myVecIn, myVecOut, bufferSize, samplingRate, delay_ms);
 8000d86:	8b39      	ldrh	r1, [r7, #24]
 8000d88:	8afa      	ldrh	r2, [r7, #22]
 8000d8a:	8b7b      	ldrh	r3, [r7, #26]
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6938      	ldr	r0, [r7, #16]
 8000d94:	f7ff faca 	bl	800032c <asm_ecoV1>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 73.530 ciclos en modo Debug
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <asm_ecoV1_tester+0x128>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	46b5      	mov	sp, r6
}
 8000da0:	bf00      	nop
 8000da2:	3724      	adds	r7, #36	; 0x24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000daa:	bf00      	nop
 8000dac:	e0001000 	.word	0xe0001000

08000db0 <asm_ecoV2_tester>:


/* EJERCICIO 10.2 ------------------------------------------------------------*/
void asm_ecoV2_tester(void) {
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b08b      	sub	sp, #44	; 0x2c
 8000db6:	af02      	add	r7, sp, #8
 8000db8:	466b      	mov	r3, sp
 8000dba:	461e      	mov	r6, r3

	const uint16_t bufferSize = 4096;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	82fb      	strh	r3, [r7, #22]
	const uint16_t samplingRate = 44100;
 8000dc2:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000dc6:	833b      	strh	r3, [r7, #24]
	const uint16_t delay_ms = 20;
 8000dc8:	2314      	movs	r3, #20
 8000dca:	837b      	strh	r3, [r7, #26]

	int16_t myVecIn[bufferSize];
 8000dcc:	8afb      	ldrh	r3, [r7, #22]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	8afb      	ldrh	r3, [r7, #22]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	4693      	mov	fp, r2
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000de6:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000dea:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000dee:	8afb      	ldrh	r3, [r7, #22]
 8000df0:	2200      	movs	r2, #0
 8000df2:	4698      	mov	r8, r3
 8000df4:	4691      	mov	r9, r2
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000e02:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000e06:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000e0a:	8afb      	ldrh	r3, [r7, #22]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	3307      	adds	r3, #7
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	ebad 0d03 	sub.w	sp, sp, r3
 8000e18:	ab02      	add	r3, sp, #8
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	085b      	lsrs	r3, r3, #1
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
	int16_t myVecOut[bufferSize];
 8000e22:	8afb      	ldrh	r3, [r7, #22]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	8afb      	ldrh	r3, [r7, #22]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	461c      	mov	r4, r3
 8000e2e:	4615      	mov	r5, r2
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	012b      	lsls	r3, r5, #4
 8000e3a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000e3e:	0122      	lsls	r2, r4, #4
 8000e40:	8afb      	ldrh	r3, [r7, #22]
 8000e42:	2200      	movs	r2, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	4611      	mov	r1, r2
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	010b      	lsls	r3, r1, #4
 8000e52:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000e56:	0102      	lsls	r2, r0, #4
 8000e58:	8afb      	ldrh	r3, [r7, #22]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	3307      	adds	r3, #7
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	ebad 0d03 	sub.w	sp, sp, r3
 8000e66:	ab02      	add	r3, sp, #8
 8000e68:	3301      	adds	r3, #1
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]

	srand(0);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f003 fe0b 	bl	8004a8c <srand>

	for(uint16_t i = 0; i < bufferSize; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	82bb      	strh	r3, [r7, #20]
 8000e7a:	e013      	b.n	8000ea4 <asm_ecoV2_tester+0xf4>

		myVecIn[i] = rand() % 65536 - 32768;
 8000e7c:	f003 fe34 	bl	8004ae8 <rand>
 8000e80:	4603      	mov	r3, r0
 8000e82:	425a      	negs	r2, r3
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b292      	uxth	r2, r2
 8000e88:	bf58      	it	pl
 8000e8a:	4253      	negpl	r3, r2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	8aba      	ldrh	r2, [r7, #20]
 8000e96:	b219      	sxth	r1, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i = 0; i < bufferSize; i++) {
 8000e9e:	8abb      	ldrh	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	82bb      	strh	r3, [r7, #20]
 8000ea4:	8aba      	ldrh	r2, [r7, #20]
 8000ea6:	8afb      	ldrh	r3, [r7, #22]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3e7      	bcc.n	8000e7c <asm_ecoV2_tester+0xcc>
	}

	DWT->CYCCNT = 0;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <asm_ecoV2_tester+0x128>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]

	asm_ecoV2(myVecIn, myVecOut, bufferSize, samplingRate, delay_ms);
 8000eb2:	8b39      	ldrh	r1, [r7, #24]
 8000eb4:	8afa      	ldrh	r2, [r7, #22]
 8000eb6:	8b7b      	ldrh	r3, [r7, #26]
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6938      	ldr	r0, [r7, #16]
 8000ec0:	f7ff fa5c 	bl	800037c <asm_ecoV2>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 74.978 ciclos en modo Debug
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <asm_ecoV2_tester+0x128>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	46b5      	mov	sp, r6
}
 8000ecc:	bf00      	nop
 8000ece:	3724      	adds	r7, #36	; 0x24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e0001000 	.word	0xe0001000

08000edc <asm_ecoV3_tester>:

/* EJERCICIO 10.3 ------------------------------------------------------------*/
void asm_ecoV3_tester(void) {
 8000edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee0:	b08b      	sub	sp, #44	; 0x2c
 8000ee2:	af02      	add	r7, sp, #8
 8000ee4:	466b      	mov	r3, sp
 8000ee6:	461e      	mov	r6, r3

	const uint16_t bufferSize = 4096;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	82fb      	strh	r3, [r7, #22]
	const uint16_t samplingRate = 44100;
 8000eee:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000ef2:	833b      	strh	r3, [r7, #24]
	const uint16_t delay_ms = 20;
 8000ef4:	2314      	movs	r3, #20
 8000ef6:	837b      	strh	r3, [r7, #26]

	int16_t myVecIn[bufferSize];
 8000ef8:	8afb      	ldrh	r3, [r7, #22]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	8afb      	ldrh	r3, [r7, #22]
 8000f00:	2200      	movs	r2, #0
 8000f02:	469a      	mov	sl, r3
 8000f04:	4693      	mov	fp, r2
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000f12:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000f16:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000f1a:	8afb      	ldrh	r3, [r7, #22]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4698      	mov	r8, r3
 8000f20:	4691      	mov	r9, r2
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000f2e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000f32:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000f36:	8afb      	ldrh	r3, [r7, #22]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	3307      	adds	r3, #7
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	ebad 0d03 	sub.w	sp, sp, r3
 8000f44:	ab02      	add	r3, sp, #8
 8000f46:	3301      	adds	r3, #1
 8000f48:	085b      	lsrs	r3, r3, #1
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
	int16_t myVecOut[bufferSize];
 8000f4e:	8afb      	ldrh	r3, [r7, #22]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	8afb      	ldrh	r3, [r7, #22]
 8000f56:	2200      	movs	r2, #0
 8000f58:	461c      	mov	r4, r3
 8000f5a:	4615      	mov	r5, r2
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	012b      	lsls	r3, r5, #4
 8000f66:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f6a:	0122      	lsls	r2, r4, #4
 8000f6c:	8afb      	ldrh	r3, [r7, #22]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	4611      	mov	r1, r2
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	010b      	lsls	r3, r1, #4
 8000f7e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000f82:	0102      	lsls	r2, r0, #4
 8000f84:	8afb      	ldrh	r3, [r7, #22]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	3307      	adds	r3, #7
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f92:	ab02      	add	r3, sp, #8
 8000f94:	3301      	adds	r3, #1
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]

	srand(0);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f003 fd75 	bl	8004a8c <srand>

	for(uint16_t i = 0; i < bufferSize; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	82bb      	strh	r3, [r7, #20]
 8000fa6:	e013      	b.n	8000fd0 <asm_ecoV3_tester+0xf4>

		myVecIn[i] = rand() % 65536 - 32768;
 8000fa8:	f003 fd9e 	bl	8004ae8 <rand>
 8000fac:	4603      	mov	r3, r0
 8000fae:	425a      	negs	r2, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	bf58      	it	pl
 8000fb6:	4253      	negpl	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	8aba      	ldrh	r2, [r7, #20]
 8000fc2:	b219      	sxth	r1, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i = 0; i < bufferSize; i++) {
 8000fca:	8abb      	ldrh	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	82bb      	strh	r3, [r7, #20]
 8000fd0:	8aba      	ldrh	r2, [r7, #20]
 8000fd2:	8afb      	ldrh	r3, [r7, #22]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3e7      	bcc.n	8000fa8 <asm_ecoV3_tester+0xcc>
	}

	DWT->CYCCNT = 0;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <asm_ecoV3_tester+0x128>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]

	asm_ecoV3(myVecIn, myVecOut, bufferSize, samplingRate, delay_ms);
 8000fde:	8b39      	ldrh	r1, [r7, #24]
 8000fe0:	8afa      	ldrh	r2, [r7, #22]
 8000fe2:	8b7b      	ldrh	r3, [r7, #26]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6938      	ldr	r0, [r7, #16]
 8000fec:	f7ff f9ea 	bl	80003c4 <asm_ecoV3>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 37.497 ciclos en modo Debug
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <asm_ecoV3_tester+0x128>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	46b5      	mov	sp, r6
}
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	; 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001002:	bf00      	nop
 8001004:	e0001000 	.word	0xe0001000

08001008 <asm_corrV1_tester>:


/* EJERCICIO 11.1 ------------------------------------------------------------*/
void asm_corrV1_tester(void) {
 8001008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100c:	b0ab      	sub	sp, #172	; 0xac
 800100e:	af00      	add	r7, sp, #0
 8001010:	466b      	mov	r3, sp
 8001012:	461e      	mov	r6, r3

	// Se define señal sinusoidal
	int16_t myVecA[] = {1, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9, 10, 8, 4, -8, -5, -9, -10, -9, -5, -1, 4, 8, 10, 9, 7, 2, -3, -7, -10, -10, -8, -3};
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <asm_corrV1_tester+0xb4>)
 8001016:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800101a:	4611      	mov	r1, r2
 800101c:	224c      	movs	r2, #76	; 0x4c
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fd1e 	bl	8004a60 <memcpy>

	// Se define la misma señal defasada 90°
	int16_t myVecB[] = {10, 9, 5, 7, -4, -8, -10, -9, -7, -2, 3, 7, 10, 10, 8, 4, -2, -6, -9, -10, -8, -5, 4, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9};
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <asm_corrV1_tester+0xb8>)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4611      	mov	r1, r2
 800102a:	224c      	movs	r2, #76	; 0x4c
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fd17 	bl	8004a60 <memcpy>

	// Se define señal sinusoidal
	//int16_t myVecB[] = {1, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9, 10, 8, 4, -8, -5, -9, -10, -9, -5, -1, 4, 8, 10, 9, 7, 2, -3, -7, -10, -10, -8, -3};


	uint16_t myVecASize = sizeof(myVecA) / sizeof(myVecA[0]);
 8001032:	2326      	movs	r3, #38	; 0x26
 8001034:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	int16_t myVecCorr[myVecASize];
 8001038:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 800103c:	460b      	mov	r3, r1
 800103e:	3b01      	subs	r3, #1
 8001040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001044:	b28b      	uxth	r3, r1
 8001046:	2200      	movs	r2, #0
 8001048:	4698      	mov	r8, r3
 800104a:	4691      	mov	r9, r2
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001058:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800105c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001060:	b28b      	uxth	r3, r1
 8001062:	2200      	movs	r2, #0
 8001064:	461c      	mov	r4, r3
 8001066:	4615      	mov	r5, r2
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	012b      	lsls	r3, r5, #4
 8001072:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001076:	0122      	lsls	r2, r4, #4
 8001078:	460b      	mov	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	3307      	adds	r3, #7
 800107e:	08db      	lsrs	r3, r3, #3
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	ebad 0d03 	sub.w	sp, sp, r3
 8001086:	466b      	mov	r3, sp
 8001088:	3301      	adds	r3, #1
 800108a:	085b      	lsrs	r3, r3, #1
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	DWT->CYCCNT = 0;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <asm_corrV1_tester+0xbc>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]

	asm_corrV1(myVecA, myVecB, myVecCorr, myVecASize);
 8001098:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800109c:	1d39      	adds	r1, r7, #4
 800109e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80010a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80010a6:	f7ff f9b8 	bl	800041a <asm_corrV1>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 15.637 ciclos en modo Debug
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <asm_corrV1_tester+0xbc>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	46b5      	mov	sp, r6
}
 80010b2:	bf00      	nop
 80010b4:	37ac      	adds	r7, #172	; 0xac
 80010b6:	46bd      	mov	sp, r7
 80010b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010bc:	08005c70 	.word	0x08005c70
 80010c0:	08005cbc 	.word	0x08005cbc
 80010c4:	e0001000 	.word	0xe0001000

080010c8 <asm_corrV2_tester>:


/* EJERCICIO 11.2 ------------------------------------------------------------*/
void asm_corrV2_tester(void) {
 80010c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010cc:	b0ab      	sub	sp, #172	; 0xac
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	466b      	mov	r3, sp
 80010d2:	461e      	mov	r6, r3

	// Se define señal sinusoidal
	int16_t myVecA[] = {1, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9, 10, 8, 4, -8, -5, -9, -10, -9, -5, -1, 4, 8, 10, 9, 7, 2, -3, -7, -10, -10, -8, -3};
 80010d4:	4a29      	ldr	r2, [pc, #164]	; (800117c <asm_corrV2_tester+0xb4>)
 80010d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010da:	4611      	mov	r1, r2
 80010dc:	224c      	movs	r2, #76	; 0x4c
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fcbe 	bl	8004a60 <memcpy>

	// Se define la misma señal defasada 90°
	int16_t myVecB[] = {10, 9, 5, 7, -4, -8, -10, -9, -7, -2, 3, 7, 10, 10, 8, 4, -2, -6, -9, -10, -8, -5, 4, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9};
 80010e4:	4a26      	ldr	r2, [pc, #152]	; (8001180 <asm_corrV2_tester+0xb8>)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4611      	mov	r1, r2
 80010ea:	224c      	movs	r2, #76	; 0x4c
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fcb7 	bl	8004a60 <memcpy>

	// Se define señal sinusoidal
	//int16_t myVecB[] = {1, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9, 10, 8, 4, -8, -5, -9, -10, -9, -5, -1, 4, 8, 10, 9, 7, 2, -3, -7, -10, -10, -8, -3};


	uint16_t myVecASize = sizeof(myVecA) / sizeof(myVecA[0]);
 80010f2:	2326      	movs	r3, #38	; 0x26
 80010f4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	int16_t myVecCorr[myVecASize];
 80010f8:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 80010fc:	460b      	mov	r3, r1
 80010fe:	3b01      	subs	r3, #1
 8001100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001104:	b28b      	uxth	r3, r1
 8001106:	2200      	movs	r2, #0
 8001108:	4698      	mov	r8, r3
 800110a:	4691      	mov	r9, r2
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001118:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800111c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001120:	b28b      	uxth	r3, r1
 8001122:	2200      	movs	r2, #0
 8001124:	461c      	mov	r4, r3
 8001126:	4615      	mov	r5, r2
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	012b      	lsls	r3, r5, #4
 8001132:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001136:	0122      	lsls	r2, r4, #4
 8001138:	460b      	mov	r3, r1
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3307      	adds	r3, #7
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	ebad 0d03 	sub.w	sp, sp, r3
 8001146:	466b      	mov	r3, sp
 8001148:	3301      	adds	r3, #1
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	DWT->CYCCNT = 0;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <asm_corrV2_tester+0xbc>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]

	asm_corrV2(myVecA, myVecB, myVecCorr, myVecASize);
 8001158:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001162:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001166:	f7ff f976 	bl	8000456 <asm_corrV2>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta ABC ciclos en modo Debug
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <asm_corrV2_tester+0xbc>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	46b5      	mov	sp, r6
}
 8001172:	bf00      	nop
 8001174:	37ac      	adds	r7, #172	; 0xac
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800117c:	08005c70 	.word	0x08005c70
 8001180:	08005cbc 	.word	0x08005cbc
 8001184:	e0001000 	.word	0xe0001000

08001188 <c_zeros>:
#define MAXSIZE 				65536	// EJERCICIO 6
#define MAXSIZEBITS 			16		// EJERCICIO 6


/* EJERCICIO 1 ---------------------------------------------------------------*/
void c_zeros(uint32_t *vector, uint32_t longitud) {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]

	for(; longitud > 0; longitud--) {
 8001192:	e00b      	b.n	80011ac <c_zeros+0x24>
		vector[longitud-1] = 0;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800119a:	3b01      	subs	r3, #1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
	for(; longitud > 0; longitud--) {
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <c_zeros+0xc>
	}
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <c_productoEscalar32>:


/* EJERCICIO 2 ---------------------------------------------------------------*/
void c_productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar) {
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]

	for(; longitud > 0; longitud--) {
 80011ce:	e015      	b.n	80011fc <c_productoEscalar32+0x3c>
		vectorOut[longitud-1] = vectorIn[longitud-1] * escalar;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011d6:	3b01      	subs	r3, #1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011e6:	3b01      	subs	r3, #1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	440b      	add	r3, r1
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	fb01 f202 	mul.w	r2, r1, r2
 80011f4:	601a      	str	r2, [r3, #0]
	for(; longitud > 0; longitud--) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1e6      	bne.n	80011d0 <c_productoEscalar32+0x10>
	}
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <c_productoEscalar16>:


/* EJERCICIO 3 ---------------------------------------------------------------*/
void c_productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar) {
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4611      	mov	r1, r2
 800121c:	461a      	mov	r2, r3
 800121e:	460b      	mov	r3, r1
 8001220:	80fb      	strh	r3, [r7, #6]
 8001222:	4613      	mov	r3, r2
 8001224:	80bb      	strh	r3, [r7, #4]

	for(; longitud > 0; longitud--) {
 8001226:	e016      	b.n	8001256 <c_productoEscalar16+0x46>
		vectorOut[longitud-1] = vectorIn[longitud-1] * escalar;
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800122e:	3b01      	subs	r3, #1
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800123e:	3b01      	subs	r3, #1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	440b      	add	r3, r1
 8001246:	88b9      	ldrh	r1, [r7, #4]
 8001248:	fb11 f202 	smulbb	r2, r1, r2
 800124c:	b292      	uxth	r2, r2
 800124e:	801a      	strh	r2, [r3, #0]
	for(; longitud > 0; longitud--) {
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	3b01      	subs	r3, #1
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e5      	bne.n	8001228 <c_productoEscalar16+0x18>
	}
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <c_productoEscalarSat16>:


/* EJERCICIO 4 ---------------------------------------------------------------*/
void c_productoEscalarSat16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar) {
 800126a:	b480      	push	{r7}
 800126c:	b087      	sub	sp, #28
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	4611      	mov	r1, r2
 8001276:	461a      	mov	r2, r3
 8001278:	460b      	mov	r3, r1
 800127a:	80fb      	strh	r3, [r7, #6]
 800127c:	4613      	mov	r3, r2
 800127e:	80bb      	strh	r3, [r7, #4]

	int result = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

	for(; longitud > 0; longitud--) {
 8001284:	e02b      	b.n	80012de <c_productoEscalarSat16+0x74>

		result = vectorIn[longitud-1] * escalar;
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800128c:	3b01      	subs	r3, #1
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]

		if(result >= 0 && result <= ((uint16_t) pow(2, MAX_BITS_SATURATION) - 1)) {
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0e      	blt.n	80012c4 <c_productoEscalarSat16+0x5a>
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ac:	da0a      	bge.n	80012c4 <c_productoEscalarSat16+0x5a>
			vectorOut[longitud-1] = result;
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80012b4:	3b01      	subs	r3, #1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	4413      	add	r3, r2
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	b292      	uxth	r2, r2
 80012c0:	801a      	strh	r2, [r3, #0]
 80012c2:	e009      	b.n	80012d8 <c_productoEscalarSat16+0x6e>
		} else {
			vectorOut[longitud-1] = ((uint16_t) pow(2, MAX_BITS_SATURATION - 1));
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80012ca:	3b01      	subs	r3, #1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4413      	add	r3, r2
 80012d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d6:	801a      	strh	r2, [r3, #0]
	for(; longitud > 0; longitud--) {
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	3b01      	subs	r3, #1
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1d0      	bne.n	8001286 <c_productoEscalarSat16+0x1c>
		}
	}
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <c_filtroVentana10>:


/* EJERCICIO 5 ---------------------------------------------------------------*/
void c_filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitudVectorIn) {
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]

	uint16_t sum;

	longitudVectorIn--;
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	3b01      	subs	r3, #1
 8001306:	80fb      	strh	r3, [r7, #6]

	for(int16_t i = longitudVectorIn; i >= 0; i--) {
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	83bb      	strh	r3, [r7, #28]
 800130c:	e03c      	b.n	8001388 <c_filtroVentana10+0x94>

		sum = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	83fb      	strh	r3, [r7, #30]

		int16_t upperLimit = i + (WINDOWSIZE / 2);
 8001312:	8bbb      	ldrh	r3, [r7, #28]
 8001314:	3305      	adds	r3, #5
 8001316:	b29b      	uxth	r3, r3
 8001318:	833b      	strh	r3, [r7, #24]
		int16_t lowerLimit = i - (WINDOWSIZE / 2);
 800131a:	8bbb      	ldrh	r3, [r7, #28]
 800131c:	3b05      	subs	r3, #5
 800131e:	b29b      	uxth	r3, r3
 8001320:	82fb      	strh	r3, [r7, #22]

		for(int16_t j = upperLimit; j >= lowerLimit; j--) {
 8001322:	8b3b      	ldrh	r3, [r7, #24]
 8001324:	837b      	strh	r3, [r7, #26]
 8001326:	e017      	b.n	8001358 <c_filtroVentana10+0x64>

			if(j >= 0 && j <= longitudVectorIn) {
 8001328:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0d      	blt.n	800134c <c_filtroVentana10+0x58>
 8001330:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	429a      	cmp	r2, r3
 8001338:	dc08      	bgt.n	800134c <c_filtroVentana10+0x58>

				sum += vectorIn[j];
 800133a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	881a      	ldrh	r2, [r3, #0]
 8001346:	8bfb      	ldrh	r3, [r7, #30]
 8001348:	4413      	add	r3, r2
 800134a:	83fb      	strh	r3, [r7, #30]
		for(int16_t j = upperLimit; j >= lowerLimit; j--) {
 800134c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001350:	b29b      	uxth	r3, r3
 8001352:	3b01      	subs	r3, #1
 8001354:	b29b      	uxth	r3, r3
 8001356:	837b      	strh	r3, [r7, #26]
 8001358:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800135c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001360:	429a      	cmp	r2, r3
 8001362:	dae1      	bge.n	8001328 <c_filtroVentana10+0x34>
			}
		}

		vectorOut[i] = sum / WINDOWSIZE;
 8001364:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	8bfa      	ldrh	r2, [r7, #30]
 8001370:	490b      	ldr	r1, [pc, #44]	; (80013a0 <c_filtroVentana10+0xac>)
 8001372:	fba1 1202 	umull	r1, r2, r1, r2
 8001376:	08d2      	lsrs	r2, r2, #3
 8001378:	b292      	uxth	r2, r2
 800137a:	801a      	strh	r2, [r3, #0]
	for(int16_t i = longitudVectorIn; i >= 0; i--) {
 800137c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	83bb      	strh	r3, [r7, #28]
 8001388:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dabe      	bge.n	800130e <c_filtroVentana10+0x1a>
	}
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	ba2e8ba3 	.word	0xba2e8ba3

080013a4 <c_pack32to16>:


/* EJERCICIO 6 ---------------------------------------------------------------*/
void c_pack32to16(int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud) {
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]

	uint32_t aux = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

	for(; longitud > 0; longitud--) {
 80013b4:	e018      	b.n	80013e8 <c_pack32to16+0x44>

		aux = vectorIn[longitud - 1];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013bc:	3b01      	subs	r3, #1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	617b      	str	r3, [r7, #20]
		aux = (aux >> 16) & 0xFFFF;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	0c1b      	lsrs	r3, r3, #16
 80013cc:	617b      	str	r3, [r7, #20]
		vectorOut[longitud - 1] = aux;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80013d4:	3b01      	subs	r3, #1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	b212      	sxth	r2, r2
 80013e0:	801a      	strh	r2, [r3, #0]
	for(; longitud > 0; longitud--) {
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1e3      	bne.n	80013b6 <c_pack32to16+0x12>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <c_max>:


/* EJERCICIO 7 ---------------------------------------------------------------*/
int32_t c_max(int32_t * vectorIn, uint32_t longitud) {
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]

	int32_t max = vectorIn[0];
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

	for(; longitud > 0; longitud--) {
 800140c:	e016      	b.n	800143c <c_max+0x40>

		if(vectorIn[longitud - 1] > max) {
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001414:	3b01      	subs	r3, #1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	da08      	bge.n	8001436 <c_max+0x3a>

			max = vectorIn[longitud - 1];
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800142a:	3b01      	subs	r3, #1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
	for(; longitud > 0; longitud--) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3b01      	subs	r3, #1
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1e5      	bne.n	800140e <c_max+0x12>
		}
	}

	return max;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <c_downsampleM>:


/* EJERCICIO 8 ---------------------------------------------------------------*/
void c_downsampleM(int32_t * vectorIn, int32_t * vectorOut, uint32_t longitud, uint32_t N) {
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]

	uint32_t index = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

	/* Downsampling */
	for(uint32_t i = 1; i <= longitud; i++) {
 8001462:	2301      	movs	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e01c      	b.n	80014a2 <c_downsampleM+0x52>

		if(i % N != 0) {
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	fb01 f202 	mul.w	r2, r1, r2
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00f      	beq.n	800149c <c_downsampleM+0x4c>

			vectorOut[index] = vectorIn[i-1];
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001482:	3b01      	subs	r3, #1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	441a      	add	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	440b      	add	r3, r1
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	601a      	str	r2, [r3, #0]
			index++;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 1; i <= longitud; i++) {
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	3301      	adds	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d9de      	bls.n	8001468 <c_downsampleM+0x18>
		}
	}

	/* The remaining elements are initialized to 0 */
	for(; index < longitud; index++) {
 80014aa:	e008      	b.n	80014be <c_downsampleM+0x6e>

		vectorOut[index] = 0;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
	for(; index < longitud; index++) {
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3f2      	bcc.n	80014ac <c_downsampleM+0x5c>
	}
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <c_invertir>:


/* EJERCICIO 9 ---------------------------------------------------------------*/
void c_invertir(uint16_t *vector, uint32_t longitud) {
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]

	uint16_t aux;

	for(uint32_t i = 0; i < longitud / 2; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e01e      	b.n	8001522 <c_invertir+0x4e>

		aux = vector[i];
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	817b      	strh	r3, [r7, #10]
		vector[i] = vector[longitud-1-i];
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	441a      	add	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	440b      	add	r3, r1
 8001506:	8812      	ldrh	r2, [r2, #0]
 8001508:	801a      	strh	r2, [r3, #0]
		vector[longitud-1-i] = aux;
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	3b01      	subs	r3, #1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	897a      	ldrh	r2, [r7, #10]
 800151a:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < longitud / 2; i++) {
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d3db      	bcc.n	80014e4 <c_invertir+0x10>
	}
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <c_eco>:


/* EJERCICIO 10 --------------------------------------------------------------*/
void c_eco(int16_t *vectorIn, int16_t *vectorOut, uint16_t bufferSize, uint16_t samplingRate, uint16_t delay_ms) {
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	4611      	mov	r1, r2
 8001548:	461a      	mov	r2, r3
 800154a:	460b      	mov	r3, r1
 800154c:	80fb      	strh	r3, [r7, #6]
 800154e:	4613      	mov	r3, r2
 8001550:	80bb      	strh	r3, [r7, #4]

	uint16_t delay_samples = samplingRate * delay_ms / 1000;
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	8c3a      	ldrh	r2, [r7, #32]
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <c_eco+0xb4>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	1192      	asrs	r2, r2, #6
 8001562:	17db      	asrs	r3, r3, #31
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	82bb      	strh	r3, [r7, #20]
	int16_t aux;

	for(uint16_t i = 0; i < bufferSize; i++) {
 8001568:	2300      	movs	r3, #0
 800156a:	82fb      	strh	r3, [r7, #22]
 800156c:	e034      	b.n	80015d8 <c_eco+0x9c>

		if(i < delay_samples) {
 800156e:	8afa      	ldrh	r2, [r7, #22]
 8001570:	8abb      	ldrh	r3, [r7, #20]
 8001572:	429a      	cmp	r2, r3
 8001574:	d20b      	bcs.n	800158e <c_eco+0x52>

			vectorOut[i] = vectorIn[i];
 8001576:	8afb      	ldrh	r3, [r7, #22]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	441a      	add	r2, r3
 800157e:	8afb      	ldrh	r3, [r7, #22]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	440b      	add	r3, r1
 8001586:	f9b2 2000 	ldrsh.w	r2, [r2]
 800158a:	801a      	strh	r2, [r3, #0]
 800158c:	e021      	b.n	80015d2 <c_eco+0x96>
		} else {
			aux = i - delay_samples;
 800158e:	8afa      	ldrh	r2, [r7, #22]
 8001590:	8abb      	ldrh	r3, [r7, #20]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	827b      	strh	r3, [r7, #18]
			aux = vectorIn[aux];
 8001598:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	827b      	strh	r3, [r7, #18]
			aux /= 2;
 80015a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015aa:	0fda      	lsrs	r2, r3, #31
 80015ac:	4413      	add	r3, r2
 80015ae:	105b      	asrs	r3, r3, #1
 80015b0:	827b      	strh	r3, [r7, #18]

			vectorOut[i] = vectorIn[i] + aux;
 80015b2:	8afb      	ldrh	r3, [r7, #22]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	8a7b      	ldrh	r3, [r7, #18]
 80015c2:	4413      	add	r3, r2
 80015c4:	b299      	uxth	r1, r3
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4413      	add	r3, r2
 80015ce:	b20a      	sxth	r2, r1
 80015d0:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < bufferSize; i++) {
 80015d2:	8afb      	ldrh	r3, [r7, #22]
 80015d4:	3301      	adds	r3, #1
 80015d6:	82fb      	strh	r3, [r7, #22]
 80015d8:	8afa      	ldrh	r2, [r7, #22]
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3c6      	bcc.n	800156e <c_eco+0x32>
		}
	}
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	10624dd3 	.word	0x10624dd3

080015f4 <c_corr>:


/* EJERCICIO 11 --------------------------------------------------------------*/
void c_corr(int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud) {
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]

	int16_t sum;

	for(uint16_t l = 0; l < longitud; l++) {
 8001602:	2300      	movs	r3, #0
 8001604:	82bb      	strh	r3, [r7, #20]
 8001606:	e032      	b.n	800166e <c_corr+0x7a>

		sum = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	82fb      	strh	r3, [r7, #22]

		for(uint16_t n = 0; n < longitud; n++) {
 800160c:	2300      	movs	r3, #0
 800160e:	827b      	strh	r3, [r7, #18]
 8001610:	e020      	b.n	8001654 <c_corr+0x60>
			if((n + l) < longitud) {
 8001612:	8a7a      	ldrh	r2, [r7, #18]
 8001614:	8abb      	ldrh	r3, [r7, #20]
 8001616:	4413      	add	r3, r2
 8001618:	461a      	mov	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	4293      	cmp	r3, r2
 800161e:	d916      	bls.n	800164e <c_corr+0x5a>
				sum += (vectorX[n] * vectorY[n + l]);
 8001620:	8a7b      	ldrh	r3, [r7, #18]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	b29a      	uxth	r2, r3
 800162e:	8a79      	ldrh	r1, [r7, #18]
 8001630:	8abb      	ldrh	r3, [r7, #20]
 8001632:	440b      	add	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	440b      	add	r3, r1
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	b29b      	uxth	r3, r3
 8001640:	fb12 f303 	smulbb	r3, r2, r3
 8001644:	b29a      	uxth	r2, r3
 8001646:	8afb      	ldrh	r3, [r7, #22]
 8001648:	4413      	add	r3, r2
 800164a:	b29b      	uxth	r3, r3
 800164c:	82fb      	strh	r3, [r7, #22]
		for(uint16_t n = 0; n < longitud; n++) {
 800164e:	8a7b      	ldrh	r3, [r7, #18]
 8001650:	3301      	adds	r3, #1
 8001652:	827b      	strh	r3, [r7, #18]
 8001654:	8a7b      	ldrh	r3, [r7, #18]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8da      	bhi.n	8001612 <c_corr+0x1e>
			}
		}

		vectorCorr[l] = sum;
 800165c:	8abb      	ldrh	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	8afa      	ldrh	r2, [r7, #22]
 8001666:	801a      	strh	r2, [r3, #0]
	for(uint16_t l = 0; l < longitud; l++) {
 8001668:	8abb      	ldrh	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	82bb      	strh	r3, [r7, #20]
 800166e:	8abb      	ldrh	r3, [r7, #20]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d8c8      	bhi.n	8001608 <c_corr+0x14>
	}
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <c_zeros_tester>:
#define SAMPLING_RATE 44100		// EJERCICIO 10
#define DELAY_MS 20				// EJERCICIO 10


/* EJERCICIO 1 ---------------------------------------------------------------*/
void c_zeros_tester(void) {
 8001684:	b5b0      	push	{r4, r5, r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0

	uint32_t myVec[] = {1, 3, 5, 7, 9, 11};
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <c_zeros_tester+0x2c>)
 800168c:	463c      	mov	r4, r7
 800168e:	461d      	mov	r5, r3
 8001690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001694:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001698:	e884 0003 	stmia.w	r4, {r0, r1}

	c_zeros(myVec, sizeof(myVec) / sizeof(myVec[0]));
 800169c:	463b      	mov	r3, r7
 800169e:	2106      	movs	r1, #6
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fd71 	bl	8001188 <c_zeros>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdb0      	pop	{r4, r5, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	08005d08 	.word	0x08005d08

080016b4 <c_productoEscalar32_tester>:


/* EJERCICIO 2 ---------------------------------------------------------------*/
void c_productoEscalar32_tester(void) {
 80016b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b8:	b08b      	sub	sp, #44	; 0x2c
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	466b      	mov	r3, sp
 80016be:	461e      	mov	r6, r3

	uint32_t myVecIn[] = {1, 3, 5, 7, 9, 11};
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <c_productoEscalar32_tester+0x90>)
 80016c2:	463c      	mov	r4, r7
 80016c4:	461d      	mov	r5, r3
 80016c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016ce:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t myVecSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 80016d2:	2306      	movs	r3, #6
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t myVecOut[myVecSize];
 80016d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d8:	460b      	mov	r3, r1
 80016da:	3b01      	subs	r3, #1
 80016dc:	623b      	str	r3, [r7, #32]
 80016de:	2300      	movs	r3, #0
 80016e0:	468a      	mov	sl, r1
 80016e2:	469b      	mov	fp, r3
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80016f0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80016f4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80016f8:	2300      	movs	r3, #0
 80016fa:	4688      	mov	r8, r1
 80016fc:	4699      	mov	r9, r3
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800170a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800170e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001712:	008b      	lsls	r3, r1, #2
 8001714:	3307      	adds	r3, #7
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	ebad 0d03 	sub.w	sp, sp, r3
 800171e:	466b      	mov	r3, sp
 8001720:	3303      	adds	r3, #3
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
	uint32_t scalar = 8;
 8001728:	2308      	movs	r3, #8
 800172a:	61bb      	str	r3, [r7, #24]

	c_productoEscalar32(myVecIn, myVecOut, myVecSize, scalar);
 800172c:	4638      	mov	r0, r7
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	f7ff fd44 	bl	80011c0 <c_productoEscalar32>
 8001738:	46b5      	mov	sp, r6
}
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001744:	08005d08 	.word	0x08005d08

08001748 <c_productoEscalar16_tester>:


/* EJERCICIO 3 ---------------------------------------------------------------*/
void c_productoEscalar16_tester(void) {
 8001748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800174c:	b089      	sub	sp, #36	; 0x24
 800174e:	af00      	add	r7, sp, #0
 8001750:	466b      	mov	r3, sp
 8001752:	461e      	mov	r6, r3

	uint16_t myVecIn[] = {1, 3, 5, 7, 9, 11};
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <c_productoEscalar16_tester+0x8c>)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	ca07      	ldmia	r2, {r0, r1, r2}
 800175a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t myVecSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 800175e:	2306      	movs	r3, #6
 8001760:	83fb      	strh	r3, [r7, #30]
	uint16_t myVecOut[myVecSize];
 8001762:	8bf9      	ldrh	r1, [r7, #30]
 8001764:	460b      	mov	r3, r1
 8001766:	3b01      	subs	r3, #1
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	b28b      	uxth	r3, r1
 800176c:	2200      	movs	r2, #0
 800176e:	4698      	mov	r8, r3
 8001770:	4691      	mov	r9, r2
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800177e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001782:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001786:	b28b      	uxth	r3, r1
 8001788:	2200      	movs	r2, #0
 800178a:	461c      	mov	r4, r3
 800178c:	4615      	mov	r5, r2
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	012b      	lsls	r3, r5, #4
 8001798:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800179c:	0122      	lsls	r2, r4, #4
 800179e:	460b      	mov	r3, r1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	3307      	adds	r3, #7
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	ebad 0d03 	sub.w	sp, sp, r3
 80017ac:	466b      	mov	r3, sp
 80017ae:	3301      	adds	r3, #1
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
	uint16_t scalar = 4;
 80017b6:	2304      	movs	r3, #4
 80017b8:	827b      	strh	r3, [r7, #18]

	c_productoEscalar16(myVecIn, myVecOut, myVecSize, scalar);
 80017ba:	8a7b      	ldrh	r3, [r7, #18]
 80017bc:	8bfa      	ldrh	r2, [r7, #30]
 80017be:	1d38      	adds	r0, r7, #4
 80017c0:	6979      	ldr	r1, [r7, #20]
 80017c2:	f7ff fd25 	bl	8001210 <c_productoEscalar16>
 80017c6:	46b5      	mov	sp, r6
}
 80017c8:	bf00      	nop
 80017ca:	3724      	adds	r7, #36	; 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d2:	bf00      	nop
 80017d4:	08005d20 	.word	0x08005d20

080017d8 <c_productoEscalar16Sat_tester>:


/* EJERCICIO 4 ---------------------------------------------------------------*/
void c_productoEscalar16Sat_tester(void) {
 80017d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017dc:	b089      	sub	sp, #36	; 0x24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	466b      	mov	r3, sp
 80017e2:	461e      	mov	r6, r3

	uint16_t myVecIn[] = {1, 3, 5, 7, 9, 11};
 80017e4:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <c_productoEscalar16Sat_tester+0x8c>)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t myVecSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 80017ee:	2306      	movs	r3, #6
 80017f0:	83fb      	strh	r3, [r7, #30]
	uint16_t myVecOut[myVecSize];
 80017f2:	8bf9      	ldrh	r1, [r7, #30]
 80017f4:	460b      	mov	r3, r1
 80017f6:	3b01      	subs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	b28b      	uxth	r3, r1
 80017fc:	2200      	movs	r2, #0
 80017fe:	4698      	mov	r8, r3
 8001800:	4691      	mov	r9, r2
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800180e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001812:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001816:	b28b      	uxth	r3, r1
 8001818:	2200      	movs	r2, #0
 800181a:	461c      	mov	r4, r3
 800181c:	4615      	mov	r5, r2
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	012b      	lsls	r3, r5, #4
 8001828:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800182c:	0122      	lsls	r2, r4, #4
 800182e:	460b      	mov	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	3307      	adds	r3, #7
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	ebad 0d03 	sub.w	sp, sp, r3
 800183c:	466b      	mov	r3, sp
 800183e:	3301      	adds	r3, #1
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	617b      	str	r3, [r7, #20]
	uint16_t scalar = 4;
 8001846:	2304      	movs	r3, #4
 8001848:	827b      	strh	r3, [r7, #18]

	c_productoEscalarSat16(myVecIn, myVecOut, myVecSize, scalar);
 800184a:	8a7b      	ldrh	r3, [r7, #18]
 800184c:	8bfa      	ldrh	r2, [r7, #30]
 800184e:	1d38      	adds	r0, r7, #4
 8001850:	6979      	ldr	r1, [r7, #20]
 8001852:	f7ff fd0a 	bl	800126a <c_productoEscalarSat16>
 8001856:	46b5      	mov	sp, r6
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001862:	bf00      	nop
 8001864:	08005d20 	.word	0x08005d20

08001868 <c_filtroVentana10_tester>:


/* EJERCICIO 5 ---------------------------------------------------------------*/
void c_filtroVentana10_tester(void) {
 8001868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800186c:	b089      	sub	sp, #36	; 0x24
 800186e:	af00      	add	r7, sp, #0
 8001870:	466b      	mov	r3, sp
 8001872:	461e      	mov	r6, r3

	uint16_t myVecIn[] = {1, 3, 5, 4, 6, 2, 8, 12, 7, 16};
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <c_filtroVentana10_tester+0x90>)
 8001876:	463c      	mov	r4, r7
 8001878:	461d      	mov	r5, r3
 800187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	6023      	str	r3, [r4, #0]
	uint16_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 8001882:	230a      	movs	r3, #10
 8001884:	83fb      	strh	r3, [r7, #30]

	uint16_t myVecOut[myVecInSize];
 8001886:	8bf9      	ldrh	r1, [r7, #30]
 8001888:	460b      	mov	r3, r1
 800188a:	3b01      	subs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	b28b      	uxth	r3, r1
 8001890:	2200      	movs	r2, #0
 8001892:	469a      	mov	sl, r3
 8001894:	4693      	mov	fp, r2
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80018a2:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80018a6:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80018aa:	b28b      	uxth	r3, r1
 80018ac:	2200      	movs	r2, #0
 80018ae:	4698      	mov	r8, r3
 80018b0:	4691      	mov	r9, r2
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80018be:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80018c2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80018c6:	460b      	mov	r3, r1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	3307      	adds	r3, #7
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	ebad 0d03 	sub.w	sp, sp, r3
 80018d4:	466b      	mov	r3, sp
 80018d6:	3301      	adds	r3, #1
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	617b      	str	r3, [r7, #20]

	c_filtroVentana10(myVecIn, myVecOut, myVecInSize);
 80018de:	8bfa      	ldrh	r2, [r7, #30]
 80018e0:	463b      	mov	r3, r7
 80018e2:	6979      	ldr	r1, [r7, #20]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd05 	bl	80012f4 <c_filtroVentana10>
 80018ea:	46b5      	mov	sp, r6
}
 80018ec:	bf00      	nop
 80018ee:	3724      	adds	r7, #36	; 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f6:	bf00      	nop
 80018f8:	08005d2c 	.word	0x08005d2c

080018fc <c_pack32to16_tester>:


/* EJERCICIO 6 ---------------------------------------------------------------*/
void c_pack32to16_tester(void) {
 80018fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001900:	b08f      	sub	sp, #60	; 0x3c
 8001902:	af00      	add	r7, sp, #0
 8001904:	466b      	mov	r3, sp
 8001906:	461e      	mov	r6, r3

	int32_t myVecIn[] = {32500, 439000, 65500, 7010000, 115400, 4000450, 3990705493, 1200, 815440, 340444};
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <c_pack32to16_tester+0x90>)
 800190a:	1d3c      	adds	r4, r7, #4
 800190c:	461d      	mov	r5, r3
 800190e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001916:	e895 0003 	ldmia.w	r5, {r0, r1}
 800191a:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 800191e:	230a      	movs	r3, #10
 8001920:	637b      	str	r3, [r7, #52]	; 0x34

	int16_t myVecOut[myVecInSize];
 8001922:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001924:	460b      	mov	r3, r1
 8001926:	3b01      	subs	r3, #1
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
 800192a:	2300      	movs	r3, #0
 800192c:	468a      	mov	sl, r1
 800192e:	469b      	mov	fp, r3
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800193c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001940:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001944:	2300      	movs	r3, #0
 8001946:	4688      	mov	r8, r1
 8001948:	4699      	mov	r9, r3
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001956:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800195a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800195e:	004b      	lsls	r3, r1, #1
 8001960:	3307      	adds	r3, #7
 8001962:	08db      	lsrs	r3, r3, #3
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	ebad 0d03 	sub.w	sp, sp, r3
 800196a:	466b      	mov	r3, sp
 800196c:	3301      	adds	r3, #1
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c

	c_pack32to16(myVecIn, myVecOut, myVecInSize);
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fd12 	bl	80013a4 <c_pack32to16>
 8001980:	46b5      	mov	sp, r6
}
 8001982:	bf00      	nop
 8001984:	373c      	adds	r7, #60	; 0x3c
 8001986:	46bd      	mov	sp, r7
 8001988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800198c:	08005d40 	.word	0x08005d40

08001990 <c_max_tester>:


/* EJERCICIO 7 ---------------------------------------------------------------*/
void c_max_tester(void) {
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0

	int32_t myVecIn[] = {32500, 439000, -65500, 7010000, -115400, 4000450, 90705493, -1200, 815440, 340444};
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <c_max_tester+0x34>)
 8001998:	463c      	mov	r4, r7
 800199a:	461d      	mov	r5, r3
 800199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019a8:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 80019ac:	230a      	movs	r3, #10
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t result = c_max(myVecIn, myVecInSize);
 80019b0:	463b      	mov	r3, r7
 80019b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd21 	bl	80013fc <c_max>
 80019ba:	62b8      	str	r0, [r7, #40]	; 0x28
}
 80019bc:	bf00      	nop
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}
 80019c4:	08005d68 	.word	0x08005d68

080019c8 <c_downsampleM_tester>:


/* EJERCICIO 8 ---------------------------------------------------------------*/
void c_downsampleM_tester(void) {
 80019c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019cc:	b09f      	sub	sp, #124	; 0x7c
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	466b      	mov	r3, sp
 80019d2:	461e      	mov	r6, r3

	int32_t myVecIn[] = {100, 88, 123, 500, 1, 57, 980, 10, 45, 1, 450, 650, 976, 784, 1, 725, 680, 506, 120, 1, 34, 78, 90, 120, 1};
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <c_downsampleM_tester+0x88>)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4611      	mov	r1, r2
 80019da:	2264      	movs	r2, #100	; 0x64
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 f83f 	bl	8004a60 <memcpy>
	uint32_t myVecInSize = sizeof(myVecIn) / sizeof(myVecIn[0]);
 80019e2:	2319      	movs	r3, #25
 80019e4:	677b      	str	r3, [r7, #116]	; 0x74
	int32_t myVecOut[myVecInSize];
 80019e6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80019e8:	460b      	mov	r3, r1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	673b      	str	r3, [r7, #112]	; 0x70
 80019ee:	2300      	movs	r3, #0
 80019f0:	4688      	mov	r8, r1
 80019f2:	4699      	mov	r9, r3
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001a00:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001a04:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001a08:	2300      	movs	r3, #0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	016b      	lsls	r3, r5, #5
 8001a18:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001a1c:	0162      	lsls	r2, r4, #5
 8001a1e:	008b      	lsls	r3, r1, #2
 8001a20:	3307      	adds	r3, #7
 8001a22:	08db      	lsrs	r3, r3, #3
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	ebad 0d03 	sub.w	sp, sp, r3
 8001a2a:	466b      	mov	r3, sp
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t N = 5;
 8001a34:	2305      	movs	r3, #5
 8001a36:	66bb      	str	r3, [r7, #104]	; 0x68

	c_downsampleM(myVecIn, myVecOut, myVecInSize, N);
 8001a38:	1d38      	adds	r0, r7, #4
 8001a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a3e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001a40:	f7ff fd06 	bl	8001450 <c_downsampleM>
 8001a44:	46b5      	mov	sp, r6
}
 8001a46:	bf00      	nop
 8001a48:	377c      	adds	r7, #124	; 0x7c
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a50:	08005d90 	.word	0x08005d90

08001a54 <c_invertir_tester>:


/* EJERCICIO 9 ---------------------------------------------------------------*/
void c_invertir_tester(void) {
 8001a54:	b5b0      	push	{r4, r5, r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0

	uint16_t myVec[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <c_invertir_tester+0x2c>)
 8001a5c:	463c      	mov	r4, r7
 8001a5e:	461d      	mov	r5, r3
 8001a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	6023      	str	r3, [r4, #0]
	int32_t myVecSize = sizeof(myVec) / sizeof(myVec[0]);
 8001a68:	230a      	movs	r3, #10
 8001a6a:	617b      	str	r3, [r7, #20]

	c_invertir(myVec, myVecSize);
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd2e 	bl	80014d4 <c_invertir>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a80:	08005df4 	.word	0x08005df4

08001a84 <c_eco_tester>:


/* EJERCICIO 10 ------------------------------------------------------------*/
void c_eco_tester(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af02      	add	r7, sp, #8

	int16_t myVecIn[BUFFER_SIZE] = {0};
 8001a8e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001a92:	f103 0308 	add.w	r3, r3, #8
 8001a96:	3b04      	subs	r3, #4
 8001a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 ffec 	bl	8004a7c <memset>
	int16_t myVecOut[BUFFER_SIZE] = {0};
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	3b04      	subs	r3, #4
 8001aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 ffe3 	bl	8004a7c <memset>

	srand(0);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f002 ffe8 	bl	8004a8c <srand>

	for(uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8001abc:	2300      	movs	r3, #0
 8001abe:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001ac2:	f102 0206 	add.w	r2, r2, #6
 8001ac6:	8013      	strh	r3, [r2, #0]
 8001ac8:	e024      	b.n	8001b14 <c_eco_tester+0x90>

		myVecIn[i] = rand() % 65536 - 32768;
 8001aca:	f003 f80d 	bl	8004ae8 <rand>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	425a      	negs	r2, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b292      	uxth	r2, r2
 8001ad6:	bf58      	it	pl
 8001ad8:	4253      	negpl	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001ae6:	f103 0306 	add.w	r3, r3, #6
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b212      	sxth	r2, r2
 8001aee:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8001af2:	f101 0108 	add.w	r1, r1, #8
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	440b      	add	r3, r1
 8001afa:	f823 2c04 	strh.w	r2, [r3, #-4]
	for(uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8001afe:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001b02:	f103 0306 	add.w	r3, r3, #6
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8001b0e:	f102 0206 	add.w	r2, r2, #6
 8001b12:	8013      	strh	r3, [r2, #0]
 8001b14:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001b18:	f103 0306 	add.w	r3, r3, #6
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b22:	d3d2      	bcc.n	8001aca <c_eco_tester+0x46>
	}


	DWT->CYCCNT = 0;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <c_eco_tester+0xe0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]

	c_eco(myVecIn, myVecOut, BUFFER_SIZE, SAMPLING_RATE, DELAY_MS);
 8001b2a:	f107 0108 	add.w	r1, r7, #8
 8001b2e:	3904      	subs	r1, #4
 8001b30:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8001b34:	f100 0008 	add.w	r0, r0, #8
 8001b38:	3804      	subs	r0, #4
 8001b3a:	2314      	movs	r3, #20
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001b42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b46:	f7ff fcf9 	bl	800153c <c_eco>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 282.900 ciclos en modo Debug!!!
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <c_eco_tester+0xe0>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f107 0208 	add.w	r2, r7, #8
 8001b52:	f842 3c08 	str.w	r3, [r2, #-8]
}
 8001b56:	bf00      	nop
 8001b58:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e0001000 	.word	0xe0001000

08001b68 <c_corr_tester>:


/* EJERCICIO 11 --------------------------------------------------------------*/
void c_corr_tester(void) {
 8001b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b6c:	b0ab      	sub	sp, #172	; 0xac
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	466b      	mov	r3, sp
 8001b72:	461e      	mov	r6, r3

	// Se define señal sinusoidal
	int16_t myVecA[] = {1, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9, 10, 8, 4, -8, -5, -9, -10, -9, -5, -1, 4, 8, 10, 9, 7, 2, -3, -7, -10, -10, -8, -3};
 8001b74:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <c_corr_tester+0xb4>)
 8001b76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	224c      	movs	r2, #76	; 0x4c
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 ff6e 	bl	8004a60 <memcpy>

	// Se define la misma señal defasada 90°
	//int16_t myVecB[] = {10, 9, 5, 7, -4, -8, -10, -9, -7, -2, 3, 7, 10, 10, 8, 4, -2, -6, -9, -10, -8, -5, 4, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9};

	// Se define señal sinusoidal
	int16_t myVecB[] = {1, 5, 8, 10, 9, 6, 1, -4, -8, -10, -10, -7, -3, 2, 7, 9, 10, 8, 4, -8, -5, -9, -10, -9, -5, -1, 4, 8, 10, 9, 7, 2, -3, -7, -10, -10, -8, -3};
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <c_corr_tester+0xb4>)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4611      	mov	r1, r2
 8001b8a:	224c      	movs	r2, #76	; 0x4c
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 ff67 	bl	8004a60 <memcpy>

	uint16_t myVecASize = sizeof(myVecA) / sizeof(myVecA[0]);
 8001b92:	2326      	movs	r3, #38	; 0x26
 8001b94:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	int16_t myVecCorr[myVecASize];
 8001b98:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ba4:	b28b      	uxth	r3, r1
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4698      	mov	r8, r3
 8001baa:	4691      	mov	r9, r2
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001bb8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001bbc:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001bc0:	b28b      	uxth	r3, r1
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	461c      	mov	r4, r3
 8001bc6:	4615      	mov	r5, r2
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	012b      	lsls	r3, r5, #4
 8001bd2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bd6:	0122      	lsls	r2, r4, #4
 8001bd8:	460b      	mov	r3, r1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	3307      	adds	r3, #7
 8001bde:	08db      	lsrs	r3, r3, #3
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	ebad 0d03 	sub.w	sp, sp, r3
 8001be6:	466b      	mov	r3, sp
 8001be8:	3301      	adds	r3, #1
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	DWT->CYCCNT = 0;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <c_corr_tester+0xb8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]

	c_corr(myVecA, myVecB, myVecCorr, myVecASize);
 8001bf8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001bfc:	1d39      	adds	r1, r7, #4
 8001bfe:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001c02:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c06:	f7ff fcf5 	bl	80015f4 <c_corr>

	const volatile uint32_t Ciclos = DWT->CYCCNT;	// Reporta 58.497 ciclos en modo Debug!!!
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <c_corr_tester+0xb8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	46b5      	mov	sp, r6
}
 8001c12:	bf00      	nop
 8001c14:	37ac      	adds	r7, #172	; 0xac
 8001c16:	46bd      	mov	sp, r7
 8001c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c1c:	08005e08 	.word	0x08005e08
 8001c20:	e0001000 	.word	0xe0001000

08001c24 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001c2a:	f3ef 8314 	mrs	r3, CONTROL
 8001c2e:	607b      	str	r3, [r7, #4]
  return(result);
 8001c30:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8001c32:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f383 8814 	msr	CONTROL, r3
}
 8001c46:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001c48:	f3ef 8314 	mrs	r3, CONTROL
 8001c4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8001c50:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f383 8814 	msr	CONTROL, r3
}
 8001c64:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001c66:	f3ef 8314 	mrs	r3, CONTROL
 8001c6a:	617b      	str	r3, [r7, #20]
  return(result);
 8001c6c:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8001c6e:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8001c70:	f7fe fabe 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001c74:	f3ef 8314 	mrs	r3, CONTROL
 8001c78:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c7a:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8001c7c:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8001c7e:	bf00      	nop
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8c:	f000 fcdc 	bl	8002648 <HAL_Init>
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <main+0x98>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <main+0x98>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9c:	f000 f842 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca0:	f000 f950 	bl	8001f44 <MX_GPIO_Init>
  MX_ETH_Init();
 8001ca4:	f000 f8a8 	bl	8001df8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001ca8:	f000 f8f4 	bl	8001e94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001cac:	f000 f91c 	bl	8001ee8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  /* Funciones en Assembly ---------------------------------------------------*/
  PrivilegiosSVC();
 8001cb0:	f7ff ffb8 	bl	8001c24 <PrivilegiosSVC>
  asm_sum_tester();
 8001cb4:	f7fe fdd6 	bl	8000864 <asm_sum_tester>
  asm_zeros_tester();					// EJERCICIO 1
 8001cb8:	f7fe fde4 	bl	8000884 <asm_zeros_tester>
  asm_productoEscalar32_tester();		// EJERCICIO 2
 8001cbc:	f7fe fdfa 	bl	80008b4 <asm_productoEscalar32_tester>
  asm_productoEscalar16_tester();		// EJERCICIO 3
 8001cc0:	f7fe fe42 	bl	8000948 <asm_productoEscalar16_tester>
  asm_productoEscalar16Sat_tester();	// EJERCICIO 4
 8001cc4:	f7fe fe88 	bl	80009d8 <asm_productoEscalar16Sat_tester>
  asm_filtroVentana10_tester(); 		// EJERCICIO 5
 8001cc8:	f7fe fece 	bl	8000a68 <asm_filtroVentana10_tester>
  asm_pack32to16_tester(); 				// EJERCICIO 6
 8001ccc:	f7fe ff16 	bl	8000afc <asm_pack32to16_tester>
  asm_max_tester(); 					// EJERCICIO 7
 8001cd0:	f7fe ff5e 	bl	8000b90 <asm_max_tester>
  asm_downsampleM_tester();				// EJERCICIO 8
 8001cd4:	f7fe ff78 	bl	8000bc8 <asm_downsampleM_tester>
  asm_invertir_tester();				// EJERCICIO 9
 8001cd8:	f7fe ffbc 	bl	8000c54 <asm_invertir_tester>
  asm_ecoV1_tester();					// EJERCICIO 10.1
 8001cdc:	f7fe ffd2 	bl	8000c84 <asm_ecoV1_tester>
  asm_ecoV2_tester();					// EJERCICIO 10.2
 8001ce0:	f7ff f866 	bl	8000db0 <asm_ecoV2_tester>
  asm_ecoV3_tester();					// EJERCICIO 10.3
 8001ce4:	f7ff f8fa 	bl	8000edc <asm_ecoV3_tester>
  asm_corrV1_tester();					// EJERCICIO 11.1
 8001ce8:	f7ff f98e 	bl	8001008 <asm_corrV1_tester>
  asm_corrV2_tester();					// EJERCICIO 11.2
 8001cec:	f7ff f9ec 	bl	80010c8 <asm_corrV2_tester>


  /* Funciones en C ----------------------------------------------------------*/
  c_zeros_tester();						// EJERCICIO 1
 8001cf0:	f7ff fcc8 	bl	8001684 <c_zeros_tester>
  c_productoEscalar32_tester();			// EJERCICIO 2
 8001cf4:	f7ff fcde 	bl	80016b4 <c_productoEscalar32_tester>
  c_productoEscalar16_tester();			// EJERCICIO 3
 8001cf8:	f7ff fd26 	bl	8001748 <c_productoEscalar16_tester>
  c_productoEscalar16Sat_tester();		// EJERCICIO 4
 8001cfc:	f7ff fd6c 	bl	80017d8 <c_productoEscalar16Sat_tester>
  c_filtroVentana10_tester(); 			// EJERCICIO 5
 8001d00:	f7ff fdb2 	bl	8001868 <c_filtroVentana10_tester>
  c_pack32to16_tester(); 				// EJERCICIO 6
 8001d04:	f7ff fdfa 	bl	80018fc <c_pack32to16_tester>
  c_max_tester(); 						// EJERCICIO 7
 8001d08:	f7ff fe42 	bl	8001990 <c_max_tester>
  c_downsampleM_tester();				// EJERCICIO 8
 8001d0c:	f7ff fe5c 	bl	80019c8 <c_downsampleM_tester>
  c_invertir_tester();					// EJERCICIO 9
 8001d10:	f7ff fea0 	bl	8001a54 <c_invertir_tester>
  c_eco_tester();						// EJERCICIO 10
 8001d14:	f7ff feb6 	bl	8001a84 <c_eco_tester>
  c_corr_tester();						// EJERCICIO 11
 8001d18:	f7ff ff26 	bl	8001b68 <c_corr_tester>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <main+0x94>
 8001d1e:	bf00      	nop
 8001d20:	e0001000 	.word	0xe0001000

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	; 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 0320 	add.w	r3, r7, #32
 8001d2e:	2230      	movs	r2, #48	; 0x30
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fea2 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <SystemClock_Config+0xcc>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <SystemClock_Config+0xcc>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <SystemClock_Config+0xcc>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <SystemClock_Config+0xd0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <SystemClock_Config+0xd0>)
 8001d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <SystemClock_Config+0xd0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d94:	2304      	movs	r3, #4
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d98:	23a8      	movs	r3, #168	; 0xa8
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001da0:	2307      	movs	r3, #7
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 fbd3 	bl	8003554 <HAL_RCC_OscConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001db4:	f000 f974 	bl	80020a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db8:	230f      	movs	r3, #15
 8001dba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2105      	movs	r1, #5
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fe34 	bl	8003a44 <HAL_RCC_ClockConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001de2:	f000 f95d 	bl	80020a0 <Error_Handler>
  }
}
 8001de6:	bf00      	nop
 8001de8:	3750      	adds	r7, #80	; 0x50
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000

08001df8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <MX_ETH_Init+0x84>)
 8001dfe:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <MX_ETH_Init+0x88>)
 8001e00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_ETH_Init+0x8c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_ETH_Init+0x8c>)
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_ETH_Init+0x8c>)
 8001e10:	22e1      	movs	r2, #225	; 0xe1
 8001e12:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_ETH_Init+0x8c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_ETH_Init+0x8c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <MX_ETH_Init+0x8c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_ETH_Init+0x84>)
 8001e28:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <MX_ETH_Init+0x8c>)
 8001e2a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <MX_ETH_Init+0x84>)
 8001e2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e32:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_ETH_Init+0x84>)
 8001e36:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <MX_ETH_Init+0x90>)
 8001e38:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <MX_ETH_Init+0x84>)
 8001e3c:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <MX_ETH_Init+0x94>)
 8001e3e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_ETH_Init+0x84>)
 8001e42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e46:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001e48:	480c      	ldr	r0, [pc, #48]	; (8001e7c <MX_ETH_Init+0x84>)
 8001e4a:	f000 fd79 	bl	8002940 <HAL_ETH_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001e54:	f000 f924 	bl	80020a0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001e58:	2238      	movs	r2, #56	; 0x38
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_ETH_Init+0x98>)
 8001e5e:	f002 fe0d 	bl	8004a7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_ETH_Init+0x98>)
 8001e64:	2221      	movs	r2, #33	; 0x21
 8001e66:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_ETH_Init+0x98>)
 8001e6a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001e6e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_ETH_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000204 	.word	0x20000204
 8001e80:	40028000 	.word	0x40028000
 8001e84:	20000804 	.word	0x20000804
 8001e88:	20000164 	.word	0x20000164
 8001e8c:	200000c4 	.word	0x200000c4
 8001e90:	2000008c 	.word	0x2000008c

08001e94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <MX_USART3_UART_Init+0x50>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ecc:	f001 ffda 	bl	8003e84 <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ed6:	f000 f8e3 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002b4 	.word	0x200002b4
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ef2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2c:	f001 f9f5 	bl	800331a <HAL_PCD_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f36:	f000 f8b3 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002f8 	.word	0x200002f8

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b49      	ldr	r3, [pc, #292]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	4b45      	ldr	r3, [pc, #276]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a44      	ldr	r2, [pc, #272]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a3d      	ldr	r2, [pc, #244]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a36      	ldr	r2, [pc, #216]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b34      	ldr	r3, [pc, #208]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <MX_GPIO_Init+0x14c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f244 0181 	movw	r1, #16513	; 0x4081
 8002008:	4822      	ldr	r0, [pc, #136]	; (8002094 <MX_GPIO_Init+0x150>)
 800200a:	f001 f96d 	bl	80032e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	4821      	ldr	r0, [pc, #132]	; (8002098 <MX_GPIO_Init+0x154>)
 8002014:	f001 f968 	bl	80032e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	481b      	ldr	r0, [pc, #108]	; (800209c <MX_GPIO_Init+0x158>)
 8002030:	f000 ffae 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002034:	f244 0381 	movw	r3, #16513	; 0x4081
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <MX_GPIO_Init+0x150>)
 800204e:	f000 ff9f 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002052:	2340      	movs	r3, #64	; 0x40
 8002054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <MX_GPIO_Init+0x154>)
 800206a:	f000 ff91 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_GPIO_Init+0x154>)
 8002082:	f000 ff85 	bl	8002f90 <HAL_GPIO_Init>

}
 8002086:	bf00      	nop
 8002088:	3730      	adds	r7, #48	; 0x30
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40020400 	.word	0x40020400
 8002098:	40021800 	.word	0x40021800
 800209c:	40020800 	.word	0x40020800

080020a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020a4:	b672      	cpsid	i
}
 80020a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <Error_Handler+0x8>
	...

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_MspInit+0x4c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_MspInit+0x4c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_MspInit+0x4c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_MspInit+0x4c>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_MspInit+0x4c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800

080020fc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a55      	ldr	r2, [pc, #340]	; (8002270 <HAL_ETH_MspInit+0x174>)
 800211a:	4293      	cmp	r3, r2
 800211c:	f040 80a4 	bne.w	8002268 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_ETH_MspInit+0x178>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_ETH_MspInit+0x178>)
 800212a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <HAL_ETH_MspInit+0x178>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	623b      	str	r3, [r7, #32]
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_ETH_MspInit+0x178>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_ETH_MspInit+0x178>)
 8002146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_ETH_MspInit+0x178>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	4b45      	ldr	r3, [pc, #276]	; (8002274 <HAL_ETH_MspInit+0x178>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a44      	ldr	r2, [pc, #272]	; (8002274 <HAL_ETH_MspInit+0x178>)
 8002162:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <HAL_ETH_MspInit+0x178>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_ETH_MspInit+0x178>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a3d      	ldr	r2, [pc, #244]	; (8002274 <HAL_ETH_MspInit+0x178>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_ETH_MspInit+0x178>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	4b37      	ldr	r3, [pc, #220]	; (8002274 <HAL_ETH_MspInit+0x178>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a36      	ldr	r2, [pc, #216]	; (8002274 <HAL_ETH_MspInit+0x178>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_ETH_MspInit+0x178>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	4b30      	ldr	r3, [pc, #192]	; (8002274 <HAL_ETH_MspInit+0x178>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <HAL_ETH_MspInit+0x178>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	6313      	str	r3, [r2, #48]	; 0x30
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_ETH_MspInit+0x178>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_ETH_MspInit+0x178>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a28      	ldr	r2, [pc, #160]	; (8002274 <HAL_ETH_MspInit+0x178>)
 80021d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_ETH_MspInit+0x178>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021e4:	2332      	movs	r3, #50	; 0x32
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021f4:	230b      	movs	r3, #11
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	4619      	mov	r1, r3
 80021fe:	481e      	ldr	r0, [pc, #120]	; (8002278 <HAL_ETH_MspInit+0x17c>)
 8002200:	f000 fec6 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002204:	2386      	movs	r3, #134	; 0x86
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002214:	230b      	movs	r3, #11
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	4619      	mov	r1, r3
 800221e:	4817      	ldr	r0, [pc, #92]	; (800227c <HAL_ETH_MspInit+0x180>)
 8002220:	f000 feb6 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002236:	230b      	movs	r3, #11
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	480f      	ldr	r0, [pc, #60]	; (8002280 <HAL_ETH_MspInit+0x184>)
 8002242:	f000 fea5 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002246:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002258:	230b      	movs	r3, #11
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	4808      	ldr	r0, [pc, #32]	; (8002284 <HAL_ETH_MspInit+0x188>)
 8002264:	f000 fe94 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3738      	adds	r7, #56	; 0x38
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40028000 	.word	0x40028000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020800 	.word	0x40020800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	40021800 	.word	0x40021800

08002288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_UART_MspInit+0x84>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d12c      	bne.n	8002304 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_UART_MspInit+0x88>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_UART_MspInit+0x88>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_UART_MspInit+0x88>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_UART_MspInit+0x88>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_UART_MspInit+0x88>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_UART_MspInit+0x88>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f4:	2307      	movs	r3, #7
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <HAL_UART_MspInit+0x8c>)
 8002300:	f000 fe46 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40004800 	.word	0x40004800
 8002310:	40023800 	.word	0x40023800
 8002314:	40020c00 	.word	0x40020c00

08002318 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002338:	d13f      	bne.n	80023ba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002356:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002368:	230a      	movs	r3, #10
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4815      	ldr	r0, [pc, #84]	; (80023c8 <HAL_PCD_MspInit+0xb0>)
 8002374:	f000 fe0c 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <HAL_PCD_MspInit+0xb0>)
 800238e:	f000 fdff 	bl	8002f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	6353      	str	r3, [r2, #52]	; 0x34
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_PCD_MspInit+0xac>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000

080023cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <NMI_Handler+0x4>

080023d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <MemManage_Handler+0x4>

080023de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <BusFault_Handler+0x4>

080023e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <UsageFault_Handler+0x4>

080023ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80023f0:	f3ef 8314 	mrs	r3, CONTROL
 80023f4:	607b      	str	r3, [r7, #4]
  return(result);
 80023f6:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 80023f8:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f383 8814 	msr	CONTROL, r3
}
 800240c:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243a:	f000 f957 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}

08002442 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
	return 1;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_kill>:

int _kill(int pid, int sig)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800245c:	f002 fad6 	bl	8004a0c <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	2216      	movs	r2, #22
 8002464:	601a      	str	r2, [r3, #0]
	return -1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_exit>:

void _exit (int status)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800247a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffe7 	bl	8002452 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002484:	e7fe      	b.n	8002484 <_exit+0x12>

08002486 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e00a      	b.n	80024ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002498:	f3af 8000 	nop.w
 800249c:	4601      	mov	r1, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	60ba      	str	r2, [r7, #8]
 80024a4:	b2ca      	uxtb	r2, r1
 80024a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3301      	adds	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	dbf0      	blt.n	8002498 <_read+0x12>
	}

return len;
 80024b6:	687b      	ldr	r3, [r7, #4]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e009      	b.n	80024e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	60ba      	str	r2, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf1      	blt.n	80024d2 <_write+0x12>
	}
	return len;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_close>:

int _close(int file)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002520:	605a      	str	r2, [r3, #4]
	return 0;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_isatty>:

int _isatty(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	return 1;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
	return 0;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <_sbrk+0x5c>)
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <_sbrk+0x60>)
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <_sbrk+0x64>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <_sbrk+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d207      	bcs.n	80025a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002590:	f002 fa3c 	bl	8004a0c <__errno>
 8002594:	4603      	mov	r3, r0
 8002596:	220c      	movs	r2, #12
 8002598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800259e:	e009      	b.n	80025b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <_sbrk+0x64>)
 80025b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20030000 	.word	0x20030000
 80025c0:	00000400 	.word	0x00000400
 80025c4:	2000080c 	.word	0x2000080c
 80025c8:	20000828 	.word	0x20000828

080025cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <SystemInit+0x20>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <SystemInit+0x20>)
 80025d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 80025f0:	bf00      	nop
  nop
 80025f2:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 80025f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800262c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f8:	480d      	ldr	r0, [pc, #52]	; (8002630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025fa:	490e      	ldr	r1, [pc, #56]	; (8002634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002600:	e002      	b.n	8002608 <LoopCopyDataInit>

08002602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002606:	3304      	adds	r3, #4

08002608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800260c:	d3f9      	bcc.n	8002602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002610:	4c0b      	ldr	r4, [pc, #44]	; (8002640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002614:	e001      	b.n	800261a <LoopFillZerobss>

08002616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002618:	3204      	adds	r2, #4

0800261a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800261c:	d3fb      	bcc.n	8002616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800261e:	f7ff ffd5 	bl	80025cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002622:	f002 f9f9 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002626:	f7ff fb2f 	bl	8001c88 <main>
  bx  lr    
 800262a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800262c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002638:	08005fc4 	.word	0x08005fc4
  ldr r2, =_sbss
 800263c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002640:	20000824 	.word	0x20000824

08002644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC_IRQHandler>
	...

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_Init+0x40>)
 8002652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_Init+0x40>)
 800265e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_Init+0x40>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f000 f931 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002676:	2000      	movs	r0, #0
 8002678:	f000 f808 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267c:	f7ff fd16 	bl	80020ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x54>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x58>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f93b 	bl	8002926 <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c8:	f000 f911 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_InitTick+0x5c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000008 	.word	0x20000008
 8002710:	20000810 	.word	0x20000810

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000810 	.word	0x20000810

0800272c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002752:	bf00      	nop
 8002754:	f7ff ffde 	bl	8002714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000008 	.word	0x20000008

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff47 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff5c 	bl	80027bc <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffb0 	bl	8002894 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e06c      	b.n	8002a2c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2223      	movs	r2, #35	; 0x23
 8002960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fbc9 	bl	80020fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_ETH_Init+0xf4>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <HAL_ETH_Init+0xf4>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_ETH_Init+0xf4>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_ETH_Init+0xf8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_ETH_Init+0xf8>)
 800298c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002990:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_ETH_Init+0xf8>)
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4927      	ldr	r1, [pc, #156]	; (8002a38 <HAL_ETH_Init+0xf8>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_ETH_Init+0xf8>)
 80029a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029bc:	f7ff feaa 	bl	8002714 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029c2:	e011      	b.n	80029e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029c4:	f7ff fea6 	bl	8002714 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029d2:	d909      	bls.n	80029e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	22e0      	movs	r2, #224	; 0xe0
 80029e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e021      	b.n	8002a2c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e4      	bne.n	80029c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f958 	bl	8002cb0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f9ff 	bl	8002e04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa55 	bl	8002eb6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	461a      	mov	r2, r3
 8002a12:	2100      	movs	r1, #0
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f9bd 	bl	8002d94 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2210      	movs	r2, #16
 8002a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800

08002a3c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <ETH_SetMACConfig+0x15c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	7c1b      	ldrb	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <ETH_SetMACConfig+0x28>
 8002a5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a62:	e000      	b.n	8002a66 <ETH_SetMACConfig+0x2a>
 8002a64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	7c5b      	ldrb	r3, [r3, #17]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <ETH_SetMACConfig+0x38>
 8002a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a72:	e000      	b.n	8002a76 <ETH_SetMACConfig+0x3a>
 8002a74:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a76:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	7fdb      	ldrb	r3, [r3, #31]
 8002a82:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a84:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	7f92      	ldrb	r2, [r2, #30]
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d102      	bne.n	8002a9a <ETH_SetMACConfig+0x5e>
 8002a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a98:	e000      	b.n	8002a9c <ETH_SetMACConfig+0x60>
 8002a9a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7f1b      	ldrb	r3, [r3, #28]
 8002aa2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002aa4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002aaa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ab2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	d102      	bne.n	8002ac4 <ETH_SetMACConfig+0x88>
 8002abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac2:	e000      	b.n	8002ac6 <ETH_SetMACConfig+0x8a>
 8002ac4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ac6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7bdb      	ldrb	r3, [r3, #15]
 8002acc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ace:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ad4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002adc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f7ff fe18 	bl	800272c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b12:	4013      	ands	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	d101      	bne.n	8002b2a <ETH_SetMACConfig+0xee>
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	e000      	b.n	8002b2c <ETH_SetMACConfig+0xf0>
 8002b2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b2c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b3a:	2a01      	cmp	r2, #1
 8002b3c:	d101      	bne.n	8002b42 <ETH_SetMACConfig+0x106>
 8002b3e:	2208      	movs	r2, #8
 8002b40:	e000      	b.n	8002b44 <ETH_SetMACConfig+0x108>
 8002b42:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b4c:	2a01      	cmp	r2, #1
 8002b4e:	d101      	bne.n	8002b54 <ETH_SetMACConfig+0x118>
 8002b50:	2204      	movs	r2, #4
 8002b52:	e000      	b.n	8002b56 <ETH_SetMACConfig+0x11a>
 8002b54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b5e:	2a01      	cmp	r2, #1
 8002b60:	d101      	bne.n	8002b66 <ETH_SetMACConfig+0x12a>
 8002b62:	2202      	movs	r2, #2
 8002b64:	e000      	b.n	8002b68 <ETH_SetMACConfig+0x12c>
 8002b66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7ff fdd3 	bl	800272c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	ff20810f 	.word	0xff20810f

08002b9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <ETH_SetDMAConfig+0x110>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	7b1b      	ldrb	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <ETH_SetDMAConfig+0x2c>
 8002bc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bc6:	e000      	b.n	8002bca <ETH_SetDMAConfig+0x2e>
 8002bc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	7b5b      	ldrb	r3, [r3, #13]
 8002bce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bd0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	7f52      	ldrb	r2, [r2, #29]
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	d102      	bne.n	8002be0 <ETH_SetDMAConfig+0x44>
 8002bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bde:	e000      	b.n	8002be2 <ETH_SetDMAConfig+0x46>
 8002be0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002be2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	7b9b      	ldrb	r3, [r3, #14]
 8002be8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	7f1b      	ldrb	r3, [r3, #28]
 8002bf6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002bf8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	7f9b      	ldrb	r3, [r3, #30]
 8002bfe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c00:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c10:	4313      	orrs	r3, r2
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c20:	461a      	mov	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f7ff fd7a 	bl	800272c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c40:	461a      	mov	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	791b      	ldrb	r3, [r3, #4]
 8002c4a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c50:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c56:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c5c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c64:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c66:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c6e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c74:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c82:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c90:	2001      	movs	r0, #1
 8002c92:	f7ff fd4b 	bl	800272c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	f8de3f23 	.word	0xf8de3f23

08002cb0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0a6      	sub	sp, #152	; 0x98
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cec:	2300      	movs	r3, #0
 8002cee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d16:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fe86 	bl	8002a3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d64:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d6a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ff08 	bl	8002b9c <ETH_SetDMAConfig>
}
 8002d8c:	bf00      	nop
 8002d8e:	3798      	adds	r7, #152	; 0x98
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3305      	adds	r3, #5
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	3204      	adds	r2, #4
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <ETH_MACAddressConfig+0x68>)
 8002db6:	4413      	add	r3, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3303      	adds	r3, #3
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	061a      	lsls	r2, r3, #24
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3302      	adds	r3, #2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <ETH_MACAddressConfig+0x6c>)
 8002de6:	4413      	add	r3, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	6013      	str	r3, [r2, #0]
}
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40028040 	.word	0x40028040
 8002e00:	40028044 	.word	0x40028044

08002e04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e03e      	b.n	8002e90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	3206      	adds	r2, #6
 8002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d80c      	bhi.n	8002e74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	e004      	b.n	8002e7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d9bd      	bls.n	8002e12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea8:	611a      	str	r2, [r3, #16]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e046      	b.n	8002f52 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6919      	ldr	r1, [r3, #16]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	3212      	adds	r2, #18
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d80c      	bhi.n	8002f42 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6919      	ldr	r1, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	e004      	b.n	8002f4c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d9b5      	bls.n	8002ec4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f82:	60da      	str	r2, [r3, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e177      	b.n	800329c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fac:	2201      	movs	r2, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	f040 8166 	bne.w	8003296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d005      	beq.n	8002fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d130      	bne.n	8003044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2203      	movs	r2, #3
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 0201 	and.w	r2, r3, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b03      	cmp	r3, #3
 800304e:	d017      	beq.n	8003080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d123      	bne.n	80030d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3208      	adds	r2, #8
 8003094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	69b9      	ldr	r1, [r7, #24]
 80030d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0203 	and.w	r2, r3, #3
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80c0 	beq.w	8003296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <HAL_GPIO_Init+0x324>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4a65      	ldr	r2, [pc, #404]	; (80032b4 <HAL_GPIO_Init+0x324>)
 8003120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_GPIO_Init+0x324>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003132:	4a61      	ldr	r2, [pc, #388]	; (80032b8 <HAL_GPIO_Init+0x328>)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a58      	ldr	r2, [pc, #352]	; (80032bc <HAL_GPIO_Init+0x32c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d037      	beq.n	80031ce <HAL_GPIO_Init+0x23e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <HAL_GPIO_Init+0x330>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d031      	beq.n	80031ca <HAL_GPIO_Init+0x23a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_GPIO_Init+0x334>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02b      	beq.n	80031c6 <HAL_GPIO_Init+0x236>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a55      	ldr	r2, [pc, #340]	; (80032c8 <HAL_GPIO_Init+0x338>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d025      	beq.n	80031c2 <HAL_GPIO_Init+0x232>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a54      	ldr	r2, [pc, #336]	; (80032cc <HAL_GPIO_Init+0x33c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01f      	beq.n	80031be <HAL_GPIO_Init+0x22e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a53      	ldr	r2, [pc, #332]	; (80032d0 <HAL_GPIO_Init+0x340>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d019      	beq.n	80031ba <HAL_GPIO_Init+0x22a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_GPIO_Init+0x344>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_GPIO_Init+0x226>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a51      	ldr	r2, [pc, #324]	; (80032d8 <HAL_GPIO_Init+0x348>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00d      	beq.n	80031b2 <HAL_GPIO_Init+0x222>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a50      	ldr	r2, [pc, #320]	; (80032dc <HAL_GPIO_Init+0x34c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <HAL_GPIO_Init+0x21e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_GPIO_Init+0x350>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_GPIO_Init+0x21a>
 80031a6:	2309      	movs	r3, #9
 80031a8:	e012      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031aa:	230a      	movs	r3, #10
 80031ac:	e010      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ae:	2308      	movs	r3, #8
 80031b0:	e00e      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031b2:	2307      	movs	r3, #7
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x240>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e0:	4935      	ldr	r1, [pc, #212]	; (80032b8 <HAL_GPIO_Init+0x328>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_GPIO_Init+0x354>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003212:	4a34      	ldr	r2, [pc, #208]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f ae84 	bls.w	8002fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40020c00 	.word	0x40020c00
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40021400 	.word	0x40021400
 80032d4:	40021800 	.word	0x40021800
 80032d8:	40021c00 	.word	0x40021c00
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40022400 	.word	0x40022400
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
 80032f4:	4613      	mov	r3, r2
 80032f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f8:	787b      	ldrb	r3, [r7, #1]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003304:	e003      	b.n	800330e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	041a      	lsls	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800331a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331c:	b08f      	sub	sp, #60	; 0x3c
 800331e:	af0a      	add	r7, sp, #40	; 0x28
 8003320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e10f      	b.n	800354c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe ffe6 	bl	8002318 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2203      	movs	r2, #3
 8003350:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f001 f8ad 	bl	80044ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	687e      	ldr	r6, [r7, #4]
 8003378:	466d      	mov	r5, sp
 800337a:	f106 0410 	add.w	r4, r6, #16
 800337e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003386:	e894 0003 	ldmia.w	r4, {r0, r1}
 800338a:	e885 0003 	stmia.w	r5, {r0, r1}
 800338e:	1d33      	adds	r3, r6, #4
 8003390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003392:	6838      	ldr	r0, [r7, #0]
 8003394:	f001 f838 	bl	8004408 <USB_CoreInit>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0d0      	b.n	800354c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 f89b 	bl	80044ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e04a      	b.n	8003452 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	333d      	adds	r3, #61	; 0x3d
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	333c      	adds	r3, #60	; 0x3c
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	b298      	uxth	r0, r3
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3344      	adds	r3, #68	; 0x44
 80033f8:	4602      	mov	r2, r0
 80033fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3340      	adds	r3, #64	; 0x40
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3348      	adds	r3, #72	; 0x48
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334c      	adds	r3, #76	; 0x4c
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3354      	adds	r3, #84	; 0x54
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	3301      	adds	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d3af      	bcc.n	80033bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	e044      	b.n	80034ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	3301      	adds	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d3b5      	bcc.n	8003462 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	687e      	ldr	r6, [r7, #4]
 80034fe:	466d      	mov	r5, sp
 8003500:	f106 0410 	add.w	r4, r6, #16
 8003504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003510:	e885 0003 	stmia.w	r5, {r0, r1}
 8003514:	1d33      	adds	r3, r6, #4
 8003516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	f001 f833 	bl	8004584 <USB_DevInit>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e00d      	b.n	800354c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f001 f9fe 	bl	8004946 <USB_DevDisconnect>

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e267      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d075      	beq.n	800365e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003572:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d00c      	beq.n	8003598 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357e:	4b85      	ldr	r3, [pc, #532]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003586:	2b08      	cmp	r3, #8
 8003588:	d112      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358a:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003596:	d10b      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d05b      	beq.n	800365c <HAL_RCC_OscConfig+0x108>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d157      	bne.n	800365c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e242      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_OscConfig+0x74>
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xb0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x98>
 80035d2:	4b70      	ldr	r3, [pc, #448]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6f      	ldr	r2, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xb0>
 80035ec:	4b69      	ldr	r3, [pc, #420]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a68      	ldr	r2, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7ff f882 	bl	8002714 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7ff f87e 	bl	8002714 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e207      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xc0>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7ff f86e 	bl	8002714 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7ff f86a 	bl	8002714 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1f3      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0xe8>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b44      	ldr	r3, [pc, #272]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x152>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1c7      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4937      	ldr	r1, [pc, #220]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b34      	ldr	r3, [pc, #208]	; (8003798 <HAL_RCC_OscConfig+0x244>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7ff f823 	bl	8002714 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d2:	f7ff f81f 	bl	8002714 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1a8      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4925      	ldr	r1, [pc, #148]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x244>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7ff f802 	bl	8002714 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003714:	f7fe fffe 	bl	8002714 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e187      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d036      	beq.n	80037ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_RCC_OscConfig+0x248>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fe ffe2 	bl	8002714 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fe ffde 	bl	8002714 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e167      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x200>
 8003772:	e01b      	b.n	80037ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_OscConfig+0x248>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377a:	f7fe ffcb 	bl	8002714 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	e00e      	b.n	80037a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003782:	f7fe ffc7 	bl	8002714 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d907      	bls.n	80037a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e150      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
 8003794:	40023800 	.word	0x40023800
 8003798:	42470000 	.word	0x42470000
 800379c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ea      	bne.n	8003782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8097 	beq.w	80038e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b81      	ldr	r3, [pc, #516]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	4b7d      	ldr	r3, [pc, #500]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a7c      	ldr	r2, [pc, #496]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b77      	ldr	r3, [pc, #476]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d118      	bne.n	8003828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b74      	ldr	r3, [pc, #464]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fe ff87 	bl	8002714 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fe ff83 	bl	8002714 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e10c      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x2ea>
 8003830:	4b64      	ldr	r3, [pc, #400]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a63      	ldr	r2, [pc, #396]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
 800383c:	e01c      	b.n	8003878 <HAL_RCC_OscConfig+0x324>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x30c>
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a5e      	ldr	r2, [pc, #376]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a5b      	ldr	r2, [pc, #364]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6713      	str	r3, [r2, #112]	; 0x70
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0x324>
 8003860:	4b58      	ldr	r3, [pc, #352]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a57      	ldr	r2, [pc, #348]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a54      	ldr	r2, [pc, #336]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 0304 	bic.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe ff48 	bl	8002714 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fe ff44 	bl	8002714 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0cb      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ee      	beq.n	8003888 <HAL_RCC_OscConfig+0x334>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7fe ff32 	bl	8002714 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fe ff2e 	bl	8002714 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0b5      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ca:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ee      	bne.n	80038b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	4a38      	ldr	r2, [pc, #224]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a1 	beq.w	8003a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f2:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d05c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d141      	bne.n	800398a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_RCC_OscConfig+0x478>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fe ff02 	bl	8002714 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe fefe 	bl	8002714 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e087      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	3b01      	subs	r3, #1
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	491b      	ldr	r1, [pc, #108]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x478>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fe fed7 	bl	8002714 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fed3 	bl	8002714 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e05c      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x416>
 8003988:	e054      	b.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCC_OscConfig+0x478>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe fec0 	bl	8002714 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003998:	f7fe febc 	bl	8002714 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e045      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x444>
 80039b6:	e03d      	b.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e038      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40007000 	.word	0x40007000
 80039cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCC_OscConfig+0x4ec>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d028      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d121      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d11a      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d111      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800

08003a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0cc      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b68      	ldr	r3, [pc, #416]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d90c      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b65      	ldr	r3, [pc, #404]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b63      	ldr	r3, [pc, #396]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b8      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	494d      	ldr	r1, [pc, #308]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d044      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d119      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e07f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e067      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b22:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4934      	ldr	r1, [pc, #208]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fe fdee 	bl	8002714 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fe fdea 	bl	8002714 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e04f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 020c 	and.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1eb      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d20c      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e032      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4916      	ldr	r1, [pc, #88]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bca:	f000 f821 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490a      	ldr	r1, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x1c8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fd4e 	bl	800268c <HAL_InitTick>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00
 8003c00:	40023800 	.word	0x40023800
 8003c04:	08005e54 	.word	0x08005e54
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000004 	.word	0x20000004

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b094      	sub	sp, #80	; 0x50
 8003c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c20:	2300      	movs	r3, #0
 8003c22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c28:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d00d      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x40>
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	f200 80e1 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x34>
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c42:	e0db      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c48:	e0db      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c4a:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c4e:	e0d8      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c50:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d063      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c66:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	099b      	lsrs	r3, r3, #6
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c82:	4622      	mov	r2, r4
 8003c84:	462b      	mov	r3, r5
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	0159      	lsls	r1, r3, #5
 8003c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c94:	0150      	lsls	r0, r2, #5
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	1a51      	subs	r1, r2, r1
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	018b      	lsls	r3, r1, #6
 8003cb8:	4651      	mov	r1, sl
 8003cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	018a      	lsls	r2, r1, #6
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003cc8:	4659      	mov	r1, fp
 8003cca:	eb63 0901 	sbc.w	r9, r3, r1
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce2:	4690      	mov	r8, r2
 8003ce4:	4699      	mov	r9, r3
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	eb18 0303 	adds.w	r3, r8, r3
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	462b      	mov	r3, r5
 8003cf0:	eb49 0303 	adc.w	r3, r9, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d02:	4629      	mov	r1, r5
 8003d04:	024b      	lsls	r3, r1, #9
 8003d06:	4621      	mov	r1, r4
 8003d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	024a      	lsls	r2, r1, #9
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	2200      	movs	r2, #0
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d20:	f7fc fc1e 	bl	8000560 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	e058      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	4611      	mov	r1, r2
 8003d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	f04f 0000 	mov.w	r0, #0
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	0159      	lsls	r1, r3, #5
 8003d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5a:	0150      	lsls	r0, r2, #5
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4641      	mov	r1, r8
 8003d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d66:	4649      	mov	r1, r9
 8003d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d80:	ebb2 040a 	subs.w	r4, r2, sl
 8003d84:	eb63 050b 	sbc.w	r5, r3, fp
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	00eb      	lsls	r3, r5, #3
 8003d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d96:	00e2      	lsls	r2, r4, #3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	18e3      	adds	r3, r4, r3
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	464b      	mov	r3, r9
 8003da4:	eb45 0303 	adc.w	r3, r5, r3
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db6:	4629      	mov	r1, r5
 8003db8:	028b      	lsls	r3, r1, #10
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	028a      	lsls	r2, r1, #10
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	61fa      	str	r2, [r7, #28]
 8003dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd4:	f7fc fbc4 	bl	8000560 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	3301      	adds	r3, #1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3750      	adds	r7, #80	; 0x50
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a9b      	lsrs	r3, r3, #10
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08005e64 	.word	0x08005e64

08003e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e60:	f7ff ffdc 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0b5b      	lsrs	r3, r3, #13
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	; (8003e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	08005e64 	.word	0x08005e64

08003e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e03f      	b.n	8003f16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fe f9ec 	bl	8002288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f829 	bl	8003f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f24:	b0c0      	sub	sp, #256	; 0x100
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	68d9      	ldr	r1, [r3, #12]
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	ea40 0301 	orr.w	r3, r0, r1
 8003f48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f78:	f021 010c 	bic.w	r1, r1, #12
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f86:	430b      	orrs	r3, r1
 8003f88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9a:	6999      	ldr	r1, [r3, #24]
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	ea40 0301 	orr.w	r3, r0, r1
 8003fa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b8f      	ldr	r3, [pc, #572]	; (80041ec <UART_SetConfig+0x2cc>)
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d005      	beq.n	8003fc0 <UART_SetConfig+0xa0>
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <UART_SetConfig+0x2d0>)
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d104      	bne.n	8003fca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7ff ff4c 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8003fc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fc8:	e003      	b.n	8003fd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fca:	f7ff ff33 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8003fce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fdc:	f040 810c 	bne.w	80041f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ffe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004002:	4621      	mov	r1, r4
 8004004:	eb12 0801 	adds.w	r8, r2, r1
 8004008:	4629      	mov	r1, r5
 800400a:	eb43 0901 	adc.w	r9, r3, r1
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800401a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800401e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004022:	4690      	mov	r8, r2
 8004024:	4699      	mov	r9, r3
 8004026:	4623      	mov	r3, r4
 8004028:	eb18 0303 	adds.w	r3, r8, r3
 800402c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004030:	462b      	mov	r3, r5
 8004032:	eb49 0303 	adc.w	r3, r9, r3
 8004036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004046:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800404a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800404e:	460b      	mov	r3, r1
 8004050:	18db      	adds	r3, r3, r3
 8004052:	653b      	str	r3, [r7, #80]	; 0x50
 8004054:	4613      	mov	r3, r2
 8004056:	eb42 0303 	adc.w	r3, r2, r3
 800405a:	657b      	str	r3, [r7, #84]	; 0x54
 800405c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004060:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004064:	f7fc fa7c 	bl	8000560 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <UART_SetConfig+0x2d4>)
 800406e:	fba3 2302 	umull	r2, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	011c      	lsls	r4, r3, #4
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004080:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004084:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004090:	415b      	adcs	r3, r3
 8004092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004094:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004098:	4641      	mov	r1, r8
 800409a:	eb12 0a01 	adds.w	sl, r2, r1
 800409e:	4649      	mov	r1, r9
 80040a0:	eb43 0b01 	adc.w	fp, r3, r1
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b8:	4692      	mov	sl, r2
 80040ba:	469b      	mov	fp, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	eb1a 0303 	adds.w	r3, sl, r3
 80040c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040c6:	464b      	mov	r3, r9
 80040c8:	eb4b 0303 	adc.w	r3, fp, r3
 80040cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040e4:	460b      	mov	r3, r1
 80040e6:	18db      	adds	r3, r3, r3
 80040e8:	643b      	str	r3, [r7, #64]	; 0x40
 80040ea:	4613      	mov	r3, r2
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	647b      	str	r3, [r7, #68]	; 0x44
 80040f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040fa:	f7fc fa31 	bl	8000560 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4611      	mov	r1, r2
 8004104:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <UART_SetConfig+0x2d4>)
 8004106:	fba3 2301 	umull	r2, r3, r3, r1
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2264      	movs	r2, #100	; 0x64
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	1acb      	subs	r3, r1, r3
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800411a:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <UART_SetConfig+0x2d4>)
 800411c:	fba3 2302 	umull	r2, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004128:	441c      	add	r4, r3
 800412a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800412e:	2200      	movs	r2, #0
 8004130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004134:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004138:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800413c:	4642      	mov	r2, r8
 800413e:	464b      	mov	r3, r9
 8004140:	1891      	adds	r1, r2, r2
 8004142:	63b9      	str	r1, [r7, #56]	; 0x38
 8004144:	415b      	adcs	r3, r3
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004148:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800414c:	4641      	mov	r1, r8
 800414e:	1851      	adds	r1, r2, r1
 8004150:	6339      	str	r1, [r7, #48]	; 0x30
 8004152:	4649      	mov	r1, r9
 8004154:	414b      	adcs	r3, r1
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004164:	4659      	mov	r1, fp
 8004166:	00cb      	lsls	r3, r1, #3
 8004168:	4651      	mov	r1, sl
 800416a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416e:	4651      	mov	r1, sl
 8004170:	00ca      	lsls	r2, r1, #3
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	4603      	mov	r3, r0
 8004178:	4642      	mov	r2, r8
 800417a:	189b      	adds	r3, r3, r2
 800417c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004180:	464b      	mov	r3, r9
 8004182:	460a      	mov	r2, r1
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004198:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800419c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041a0:	460b      	mov	r3, r1
 80041a2:	18db      	adds	r3, r3, r3
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a6:	4613      	mov	r3, r2
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041b6:	f7fc f9d3 	bl	8000560 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <UART_SetConfig+0x2d4>)
 80041c0:	fba3 1302 	umull	r1, r3, r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	2164      	movs	r1, #100	; 0x64
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	3332      	adds	r3, #50	; 0x32
 80041d2:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <UART_SetConfig+0x2d4>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	f003 0207 	and.w	r2, r3, #7
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4422      	add	r2, r4
 80041e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041e8:	e105      	b.n	80043f6 <UART_SetConfig+0x4d6>
 80041ea:	bf00      	nop
 80041ec:	40011000 	.word	0x40011000
 80041f0:	40011400 	.word	0x40011400
 80041f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004202:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004206:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800420a:	4642      	mov	r2, r8
 800420c:	464b      	mov	r3, r9
 800420e:	1891      	adds	r1, r2, r2
 8004210:	6239      	str	r1, [r7, #32]
 8004212:	415b      	adcs	r3, r3
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
 8004216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800421a:	4641      	mov	r1, r8
 800421c:	1854      	adds	r4, r2, r1
 800421e:	4649      	mov	r1, r9
 8004220:	eb43 0501 	adc.w	r5, r3, r1
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	00eb      	lsls	r3, r5, #3
 800422e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004232:	00e2      	lsls	r2, r4, #3
 8004234:	4614      	mov	r4, r2
 8004236:	461d      	mov	r5, r3
 8004238:	4643      	mov	r3, r8
 800423a:	18e3      	adds	r3, r4, r3
 800423c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004240:	464b      	mov	r3, r9
 8004242:	eb45 0303 	adc.w	r3, r5, r3
 8004246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004256:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004266:	4629      	mov	r1, r5
 8004268:	008b      	lsls	r3, r1, #2
 800426a:	4621      	mov	r1, r4
 800426c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004270:	4621      	mov	r1, r4
 8004272:	008a      	lsls	r2, r1, #2
 8004274:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004278:	f7fc f972 	bl	8000560 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4b60      	ldr	r3, [pc, #384]	; (8004404 <UART_SetConfig+0x4e4>)
 8004282:	fba3 2302 	umull	r2, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	011c      	lsls	r4, r3, #4
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004294:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004298:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	61b9      	str	r1, [r7, #24]
 80042a4:	415b      	adcs	r3, r3
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ac:	4641      	mov	r1, r8
 80042ae:	1851      	adds	r1, r2, r1
 80042b0:	6139      	str	r1, [r7, #16]
 80042b2:	4649      	mov	r1, r9
 80042b4:	414b      	adcs	r3, r1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c4:	4659      	mov	r1, fp
 80042c6:	00cb      	lsls	r3, r1, #3
 80042c8:	4651      	mov	r1, sl
 80042ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ce:	4651      	mov	r1, sl
 80042d0:	00ca      	lsls	r2, r1, #3
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	4642      	mov	r2, r8
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042e0:	464b      	mov	r3, r9
 80042e2:	460a      	mov	r2, r1
 80042e4:	eb42 0303 	adc.w	r3, r2, r3
 80042e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004304:	4649      	mov	r1, r9
 8004306:	008b      	lsls	r3, r1, #2
 8004308:	4641      	mov	r1, r8
 800430a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800430e:	4641      	mov	r1, r8
 8004310:	008a      	lsls	r2, r1, #2
 8004312:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004316:	f7fc f923 	bl	8000560 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4b39      	ldr	r3, [pc, #228]	; (8004404 <UART_SetConfig+0x4e4>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	; 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	3332      	adds	r3, #50	; 0x32
 8004332:	4a34      	ldr	r2, [pc, #208]	; (8004404 <UART_SetConfig+0x4e4>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433e:	441c      	add	r4, r3
 8004340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004344:	2200      	movs	r2, #0
 8004346:	673b      	str	r3, [r7, #112]	; 0x70
 8004348:	677a      	str	r2, [r7, #116]	; 0x74
 800434a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800434e:	4642      	mov	r2, r8
 8004350:	464b      	mov	r3, r9
 8004352:	1891      	adds	r1, r2, r2
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	415b      	adcs	r3, r3
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800435e:	4641      	mov	r1, r8
 8004360:	1851      	adds	r1, r2, r1
 8004362:	6039      	str	r1, [r7, #0]
 8004364:	4649      	mov	r1, r9
 8004366:	414b      	adcs	r3, r1
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004376:	4659      	mov	r1, fp
 8004378:	00cb      	lsls	r3, r1, #3
 800437a:	4651      	mov	r1, sl
 800437c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004380:	4651      	mov	r1, sl
 8004382:	00ca      	lsls	r2, r1, #3
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	4603      	mov	r3, r0
 800438a:	4642      	mov	r2, r8
 800438c:	189b      	adds	r3, r3, r2
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004390:	464b      	mov	r3, r9
 8004392:	460a      	mov	r2, r1
 8004394:	eb42 0303 	adc.w	r3, r2, r3
 8004398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	663b      	str	r3, [r7, #96]	; 0x60
 80043a4:	667a      	str	r2, [r7, #100]	; 0x64
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043b2:	4649      	mov	r1, r9
 80043b4:	008b      	lsls	r3, r1, #2
 80043b6:	4641      	mov	r1, r8
 80043b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043bc:	4641      	mov	r1, r8
 80043be:	008a      	lsls	r2, r1, #2
 80043c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043c4:	f7fc f8cc 	bl	8000560 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <UART_SetConfig+0x4e4>)
 80043ce:	fba3 1302 	umull	r1, r3, r3, r2
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2164      	movs	r1, #100	; 0x64
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	3332      	adds	r3, #50	; 0x32
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <UART_SetConfig+0x4e4>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4422      	add	r2, r4
 80043f4:	609a      	str	r2, [r3, #8]
}
 80043f6:	bf00      	nop
 80043f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043fc:	46bd      	mov	sp, r7
 80043fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004402:	bf00      	nop
 8004404:	51eb851f 	.word	0x51eb851f

08004408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004408:	b084      	sub	sp, #16
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	f107 001c 	add.w	r0, r7, #28
 8004416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	2b01      	cmp	r3, #1
 800441e:	d122      	bne.n	8004466 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d105      	bne.n	800445a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 faa2 	bl	80049a4 <USB_CoreReset>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e01a      	b.n	800449c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa96 	bl	80049a4 <USB_CoreReset>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800447c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
 800448e:	e005      	b.n	800449c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d10b      	bne.n	80044ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f043 0206 	orr.w	r2, r3, #6
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044c6:	b004      	add	sp, #16
 80044c8:	4770      	bx	lr

080044ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d115      	bne.n	800453a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800451a:	2001      	movs	r0, #1
 800451c:	f7fe f906 	bl	800272c <HAL_Delay>
      ms++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa2e 	bl	8004988 <USB_GetMode>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d01e      	beq.n	8004570 <USB_SetCurrentMode+0x84>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b31      	cmp	r3, #49	; 0x31
 8004536:	d9f0      	bls.n	800451a <USB_SetCurrentMode+0x2e>
 8004538:	e01a      	b.n	8004570 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d115      	bne.n	800456c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800454c:	2001      	movs	r0, #1
 800454e:	f7fe f8ed 	bl	800272c <HAL_Delay>
      ms++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fa15 	bl	8004988 <USB_GetMode>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <USB_SetCurrentMode+0x84>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b31      	cmp	r3, #49	; 0x31
 8004568:	d9f0      	bls.n	800454c <USB_SetCurrentMode+0x60>
 800456a:	e001      	b.n	8004570 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e005      	b.n	800457c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b32      	cmp	r3, #50	; 0x32
 8004574:	d101      	bne.n	800457a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004584:	b084      	sub	sp, #16
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e009      	b.n	80045b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3340      	adds	r3, #64	; 0x40
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3301      	adds	r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b0e      	cmp	r3, #14
 80045bc:	d9f2      	bls.n	80045a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d11c      	bne.n	80045fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d2:	f043 0302 	orr.w	r3, r3, #2
 80045d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
 80045fc:	e00b      	b.n	8004616 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	4619      	mov	r1, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	461a      	mov	r2, r3
 8004632:	680b      	ldr	r3, [r1, #0]
 8004634:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004642:	2100      	movs	r1, #0
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f965 	bl	8004914 <USB_SetDevSpeed>
 800464a:	e008      	b.n	800465e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800464c:	2101      	movs	r1, #1
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f960 	bl	8004914 <USB_SetDevSpeed>
 8004654:	e003      	b.n	800465e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004656:	2103      	movs	r1, #3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f95b 	bl	8004914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800465e:	2110      	movs	r1, #16
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8f3 	bl	800484c <USB_FlushTxFifo>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f91f 	bl	80048b4 <USB_FlushRxFifo>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	461a      	mov	r2, r3
 8004688:	2300      	movs	r3, #0
 800468a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	461a      	mov	r2, r3
 8004694:	2300      	movs	r3, #0
 8004696:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	461a      	mov	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	e043      	b.n	8004732 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c0:	d118      	bne.n	80046f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e013      	b.n	8004706 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e008      	b.n	8004706 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	461a      	mov	r2, r3
 8004726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800472a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	3301      	adds	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d3b7      	bcc.n	80046aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e043      	b.n	80047c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004756:	d118      	bne.n	800478a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e013      	b.n	800479c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e008      	b.n	800479c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	461a      	mov	r2, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	3301      	adds	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d3b7      	bcc.n	8004740 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f043 0210 	orr.w	r2, r3, #16
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <USB_DevInit+0x2c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f043 0208 	orr.w	r2, r3, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d107      	bne.n	8004838 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004844:	b004      	add	sp, #16
 8004846:	4770      	bx	lr
 8004848:	803c3800 	.word	0x803c3800

0800484c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3301      	adds	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <USB_FlushTxFifo+0x64>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e01b      	b.n	80048a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	daf2      	bge.n	800485a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	019b      	lsls	r3, r3, #6
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <USB_FlushTxFifo+0x64>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e006      	b.n	80048a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d0f0      	beq.n	8004884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	00030d40 	.word	0x00030d40

080048b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a11      	ldr	r2, [pc, #68]	; (8004910 <USB_FlushRxFifo+0x5c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e018      	b.n	8004904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	daf2      	bge.n	80048c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2210      	movs	r2, #16
 80048e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a08      	ldr	r2, [pc, #32]	; (8004910 <USB_FlushRxFifo+0x5c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e006      	b.n	8004904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b10      	cmp	r3, #16
 8004900:	d0f0      	beq.n	80048e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	00030d40 	.word	0x00030d40

08004914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004960:	f023 0303 	bic.w	r3, r3, #3
 8004964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0301 	and.w	r3, r3, #1
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <USB_CoreReset+0x64>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e01b      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	daf2      	bge.n	80049b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <USB_CoreReset+0x64>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d901      	bls.n	80049ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d0f0      	beq.n	80049da <USB_CoreReset+0x36>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	00030d40 	.word	0x00030d40

08004a0c <__errno>:
 8004a0c:	4b01      	ldr	r3, [pc, #4]	; (8004a14 <__errno+0x8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	; (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	; (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	; (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	; (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f001 f894 	bl	8005b58 <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08005fbc 	.word	0x08005fbc
 8004a54:	08005fbc 	.word	0x08005fbc
 8004a58:	08005fbc 	.word	0x08005fbc
 8004a5c:	08005fc0 	.word	0x08005fc0

08004a60 <memcpy>:
 8004a60:	440a      	add	r2, r1
 8004a62:	4291      	cmp	r1, r2
 8004a64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a68:	d100      	bne.n	8004a6c <memcpy+0xc>
 8004a6a:	4770      	bx	lr
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a76:	4291      	cmp	r1, r2
 8004a78:	d1f9      	bne.n	8004a6e <memcpy+0xe>
 8004a7a:	bd10      	pop	{r4, pc}

08004a7c <memset>:
 8004a7c:	4402      	add	r2, r0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <srand>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <srand+0x44>)
 8004a90:	681d      	ldr	r5, [r3, #0]
 8004a92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a94:	4604      	mov	r4, r0
 8004a96:	b9b3      	cbnz	r3, 8004ac6 <srand+0x3a>
 8004a98:	2018      	movs	r0, #24
 8004a9a:	f000 f893 	bl	8004bc4 <malloc>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	63a8      	str	r0, [r5, #56]	; 0x38
 8004aa2:	b920      	cbnz	r0, 8004aae <srand+0x22>
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <srand+0x48>)
 8004aa6:	480c      	ldr	r0, [pc, #48]	; (8004ad8 <srand+0x4c>)
 8004aa8:	2142      	movs	r1, #66	; 0x42
 8004aaa:	f000 f85b 	bl	8004b64 <__assert_func>
 8004aae:	490b      	ldr	r1, [pc, #44]	; (8004adc <srand+0x50>)
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <srand+0x54>)
 8004ab2:	e9c0 1300 	strd	r1, r3, [r0]
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <srand+0x58>)
 8004ab8:	6083      	str	r3, [r0, #8]
 8004aba:	230b      	movs	r3, #11
 8004abc:	8183      	strh	r3, [r0, #12]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ac6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004ac8:	2200      	movs	r2, #0
 8004aca:	611c      	str	r4, [r3, #16]
 8004acc:	615a      	str	r2, [r3, #20]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	2000000c 	.word	0x2000000c
 8004ad4:	08005e70 	.word	0x08005e70
 8004ad8:	08005e87 	.word	0x08005e87
 8004adc:	abcd330e 	.word	0xabcd330e
 8004ae0:	e66d1234 	.word	0xe66d1234
 8004ae4:	0005deec 	.word	0x0005deec

08004ae8 <rand>:
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <rand+0x5c>)
 8004aea:	b510      	push	{r4, lr}
 8004aec:	681c      	ldr	r4, [r3, #0]
 8004aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004af0:	b9b3      	cbnz	r3, 8004b20 <rand+0x38>
 8004af2:	2018      	movs	r0, #24
 8004af4:	f000 f866 	bl	8004bc4 <malloc>
 8004af8:	63a0      	str	r0, [r4, #56]	; 0x38
 8004afa:	b928      	cbnz	r0, 8004b08 <rand+0x20>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <rand+0x60>)
 8004b00:	4812      	ldr	r0, [pc, #72]	; (8004b4c <rand+0x64>)
 8004b02:	214e      	movs	r1, #78	; 0x4e
 8004b04:	f000 f82e 	bl	8004b64 <__assert_func>
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <rand+0x68>)
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <rand+0x6c>)
 8004b0c:	e9c0 2300 	strd	r2, r3, [r0]
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <rand+0x70>)
 8004b12:	6083      	str	r3, [r0, #8]
 8004b14:	230b      	movs	r3, #11
 8004b16:	8183      	strh	r3, [r0, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004b20:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <rand+0x74>)
 8004b24:	6920      	ldr	r0, [r4, #16]
 8004b26:	6963      	ldr	r3, [r4, #20]
 8004b28:	490d      	ldr	r1, [pc, #52]	; (8004b60 <rand+0x78>)
 8004b2a:	4342      	muls	r2, r0
 8004b2c:	fb01 2203 	mla	r2, r1, r3, r2
 8004b30:	fba0 0101 	umull	r0, r1, r0, r1
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	eb42 0001 	adc.w	r0, r2, r1
 8004b3a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004b3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b42:	bd10      	pop	{r4, pc}
 8004b44:	2000000c 	.word	0x2000000c
 8004b48:	08005e70 	.word	0x08005e70
 8004b4c:	08005e87 	.word	0x08005e87
 8004b50:	abcd330e 	.word	0xabcd330e
 8004b54:	e66d1234 	.word	0xe66d1234
 8004b58:	0005deec 	.word	0x0005deec
 8004b5c:	5851f42d 	.word	0x5851f42d
 8004b60:	4c957f2d 	.word	0x4c957f2d

08004b64 <__assert_func>:
 8004b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b66:	4614      	mov	r4, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <__assert_func+0x2c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4605      	mov	r5, r0
 8004b70:	68d8      	ldr	r0, [r3, #12]
 8004b72:	b14c      	cbz	r4, 8004b88 <__assert_func+0x24>
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <__assert_func+0x30>)
 8004b76:	9100      	str	r1, [sp, #0]
 8004b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b7c:	4906      	ldr	r1, [pc, #24]	; (8004b98 <__assert_func+0x34>)
 8004b7e:	462b      	mov	r3, r5
 8004b80:	f000 f80e 	bl	8004ba0 <fiprintf>
 8004b84:	f000 fcc4 	bl	8005510 <abort>
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__assert_func+0x38>)
 8004b8a:	461c      	mov	r4, r3
 8004b8c:	e7f3      	b.n	8004b76 <__assert_func+0x12>
 8004b8e:	bf00      	nop
 8004b90:	2000000c 	.word	0x2000000c
 8004b94:	08005ee2 	.word	0x08005ee2
 8004b98:	08005eef 	.word	0x08005eef
 8004b9c:	08005f1d 	.word	0x08005f1d

08004ba0 <fiprintf>:
 8004ba0:	b40e      	push	{r1, r2, r3}
 8004ba2:	b503      	push	{r0, r1, lr}
 8004ba4:	4601      	mov	r1, r0
 8004ba6:	ab03      	add	r3, sp, #12
 8004ba8:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <fiprintf+0x20>)
 8004baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bae:	6800      	ldr	r0, [r0, #0]
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	f000 f919 	bl	8004de8 <_vfiprintf_r>
 8004bb6:	b002      	add	sp, #8
 8004bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bbc:	b003      	add	sp, #12
 8004bbe:	4770      	bx	lr
 8004bc0:	2000000c 	.word	0x2000000c

08004bc4 <malloc>:
 8004bc4:	4b02      	ldr	r3, [pc, #8]	; (8004bd0 <malloc+0xc>)
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	f000 b86f 	b.w	8004cac <_malloc_r>
 8004bce:	bf00      	nop
 8004bd0:	2000000c 	.word	0x2000000c

08004bd4 <_free_r>:
 8004bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bd6:	2900      	cmp	r1, #0
 8004bd8:	d044      	beq.n	8004c64 <_free_r+0x90>
 8004bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bde:	9001      	str	r0, [sp, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f1a1 0404 	sub.w	r4, r1, #4
 8004be6:	bfb8      	it	lt
 8004be8:	18e4      	addlt	r4, r4, r3
 8004bea:	f000 feb9 	bl	8005960 <__malloc_lock>
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <_free_r+0x94>)
 8004bf0:	9801      	ldr	r0, [sp, #4]
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	b933      	cbnz	r3, 8004c04 <_free_r+0x30>
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	6014      	str	r4, [r2, #0]
 8004bfa:	b003      	add	sp, #12
 8004bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c00:	f000 beb4 	b.w	800596c <__malloc_unlock>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d908      	bls.n	8004c1a <_free_r+0x46>
 8004c08:	6825      	ldr	r5, [r4, #0]
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf01      	itttt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	1949      	addeq	r1, r1, r5
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	e7ed      	b.n	8004bf6 <_free_r+0x22>
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b10b      	cbz	r3, 8004c24 <_free_r+0x50>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d9fa      	bls.n	8004c1a <_free_r+0x46>
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	1855      	adds	r5, r2, r1
 8004c28:	42a5      	cmp	r5, r4
 8004c2a:	d10b      	bne.n	8004c44 <_free_r+0x70>
 8004c2c:	6824      	ldr	r4, [r4, #0]
 8004c2e:	4421      	add	r1, r4
 8004c30:	1854      	adds	r4, r2, r1
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	6011      	str	r1, [r2, #0]
 8004c36:	d1e0      	bne.n	8004bfa <_free_r+0x26>
 8004c38:	681c      	ldr	r4, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	6053      	str	r3, [r2, #4]
 8004c3e:	4421      	add	r1, r4
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	e7da      	b.n	8004bfa <_free_r+0x26>
 8004c44:	d902      	bls.n	8004c4c <_free_r+0x78>
 8004c46:	230c      	movs	r3, #12
 8004c48:	6003      	str	r3, [r0, #0]
 8004c4a:	e7d6      	b.n	8004bfa <_free_r+0x26>
 8004c4c:	6825      	ldr	r5, [r4, #0]
 8004c4e:	1961      	adds	r1, r4, r5
 8004c50:	428b      	cmp	r3, r1
 8004c52:	bf04      	itt	eq
 8004c54:	6819      	ldreq	r1, [r3, #0]
 8004c56:	685b      	ldreq	r3, [r3, #4]
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	bf04      	itt	eq
 8004c5c:	1949      	addeq	r1, r1, r5
 8004c5e:	6021      	streq	r1, [r4, #0]
 8004c60:	6054      	str	r4, [r2, #4]
 8004c62:	e7ca      	b.n	8004bfa <_free_r+0x26>
 8004c64:	b003      	add	sp, #12
 8004c66:	bd30      	pop	{r4, r5, pc}
 8004c68:	20000814 	.word	0x20000814

08004c6c <sbrk_aligned>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4e0e      	ldr	r6, [pc, #56]	; (8004ca8 <sbrk_aligned+0x3c>)
 8004c70:	460c      	mov	r4, r1
 8004c72:	6831      	ldr	r1, [r6, #0]
 8004c74:	4605      	mov	r5, r0
 8004c76:	b911      	cbnz	r1, 8004c7e <sbrk_aligned+0x12>
 8004c78:	f000 fb7a 	bl	8005370 <_sbrk_r>
 8004c7c:	6030      	str	r0, [r6, #0]
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 fb75 	bl	8005370 <_sbrk_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	d00a      	beq.n	8004ca0 <sbrk_aligned+0x34>
 8004c8a:	1cc4      	adds	r4, r0, #3
 8004c8c:	f024 0403 	bic.w	r4, r4, #3
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d007      	beq.n	8004ca4 <sbrk_aligned+0x38>
 8004c94:	1a21      	subs	r1, r4, r0
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 fb6a 	bl	8005370 <_sbrk_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d101      	bne.n	8004ca4 <sbrk_aligned+0x38>
 8004ca0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	20000818 	.word	0x20000818

08004cac <_malloc_r>:
 8004cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb0:	1ccd      	adds	r5, r1, #3
 8004cb2:	f025 0503 	bic.w	r5, r5, #3
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	2d0c      	cmp	r5, #12
 8004cba:	bf38      	it	cc
 8004cbc:	250c      	movcc	r5, #12
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	db01      	blt.n	8004cc8 <_malloc_r+0x1c>
 8004cc4:	42a9      	cmp	r1, r5
 8004cc6:	d905      	bls.n	8004cd4 <_malloc_r+0x28>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	2600      	movs	r6, #0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd4:	4e2e      	ldr	r6, [pc, #184]	; (8004d90 <_malloc_r+0xe4>)
 8004cd6:	f000 fe43 	bl	8005960 <__malloc_lock>
 8004cda:	6833      	ldr	r3, [r6, #0]
 8004cdc:	461c      	mov	r4, r3
 8004cde:	bb34      	cbnz	r4, 8004d2e <_malloc_r+0x82>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	f7ff ffc2 	bl	8004c6c <sbrk_aligned>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	4604      	mov	r4, r0
 8004cec:	d14d      	bne.n	8004d8a <_malloc_r+0xde>
 8004cee:	6834      	ldr	r4, [r6, #0]
 8004cf0:	4626      	mov	r6, r4
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	d140      	bne.n	8004d78 <_malloc_r+0xcc>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	eb04 0803 	add.w	r8, r4, r3
 8004d00:	f000 fb36 	bl	8005370 <_sbrk_r>
 8004d04:	4580      	cmp	r8, r0
 8004d06:	d13a      	bne.n	8004d7e <_malloc_r+0xd2>
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	3503      	adds	r5, #3
 8004d0c:	1a6d      	subs	r5, r5, r1
 8004d0e:	f025 0503 	bic.w	r5, r5, #3
 8004d12:	3508      	adds	r5, #8
 8004d14:	2d0c      	cmp	r5, #12
 8004d16:	bf38      	it	cc
 8004d18:	250c      	movcc	r5, #12
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ffa5 	bl	8004c6c <sbrk_aligned>
 8004d22:	3001      	adds	r0, #1
 8004d24:	d02b      	beq.n	8004d7e <_malloc_r+0xd2>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	442b      	add	r3, r5
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	e00e      	b.n	8004d4c <_malloc_r+0xa0>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	1b52      	subs	r2, r2, r5
 8004d32:	d41e      	bmi.n	8004d72 <_malloc_r+0xc6>
 8004d34:	2a0b      	cmp	r2, #11
 8004d36:	d916      	bls.n	8004d66 <_malloc_r+0xba>
 8004d38:	1961      	adds	r1, r4, r5
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	6025      	str	r5, [r4, #0]
 8004d3e:	bf18      	it	ne
 8004d40:	6059      	strne	r1, [r3, #4]
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	bf08      	it	eq
 8004d46:	6031      	streq	r1, [r6, #0]
 8004d48:	5162      	str	r2, [r4, r5]
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f104 060b 	add.w	r6, r4, #11
 8004d52:	f000 fe0b 	bl	800596c <__malloc_unlock>
 8004d56:	f026 0607 	bic.w	r6, r6, #7
 8004d5a:	1d23      	adds	r3, r4, #4
 8004d5c:	1af2      	subs	r2, r6, r3
 8004d5e:	d0b6      	beq.n	8004cce <_malloc_r+0x22>
 8004d60:	1b9b      	subs	r3, r3, r6
 8004d62:	50a3      	str	r3, [r4, r2]
 8004d64:	e7b3      	b.n	8004cce <_malloc_r+0x22>
 8004d66:	6862      	ldr	r2, [r4, #4]
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	bf0c      	ite	eq
 8004d6c:	6032      	streq	r2, [r6, #0]
 8004d6e:	605a      	strne	r2, [r3, #4]
 8004d70:	e7ec      	b.n	8004d4c <_malloc_r+0xa0>
 8004d72:	4623      	mov	r3, r4
 8004d74:	6864      	ldr	r4, [r4, #4]
 8004d76:	e7b2      	b.n	8004cde <_malloc_r+0x32>
 8004d78:	4634      	mov	r4, r6
 8004d7a:	6876      	ldr	r6, [r6, #4]
 8004d7c:	e7b9      	b.n	8004cf2 <_malloc_r+0x46>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4638      	mov	r0, r7
 8004d84:	f000 fdf2 	bl	800596c <__malloc_unlock>
 8004d88:	e7a1      	b.n	8004cce <_malloc_r+0x22>
 8004d8a:	6025      	str	r5, [r4, #0]
 8004d8c:	e7de      	b.n	8004d4c <_malloc_r+0xa0>
 8004d8e:	bf00      	nop
 8004d90:	20000814 	.word	0x20000814

08004d94 <__sfputc_r>:
 8004d94:	6893      	ldr	r3, [r2, #8]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	b410      	push	{r4}
 8004d9c:	6093      	str	r3, [r2, #8]
 8004d9e:	da08      	bge.n	8004db2 <__sfputc_r+0x1e>
 8004da0:	6994      	ldr	r4, [r2, #24]
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	db01      	blt.n	8004daa <__sfputc_r+0x16>
 8004da6:	290a      	cmp	r1, #10
 8004da8:	d103      	bne.n	8004db2 <__sfputc_r+0x1e>
 8004daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dae:	f000 baef 	b.w	8005390 <__swbuf_r>
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	1c58      	adds	r0, r3, #1
 8004db6:	6010      	str	r0, [r2, #0]
 8004db8:	7019      	strb	r1, [r3, #0]
 8004dba:	4608      	mov	r0, r1
 8004dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <__sfputs_r>:
 8004dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	460f      	mov	r7, r1
 8004dc8:	4614      	mov	r4, r2
 8004dca:	18d5      	adds	r5, r2, r3
 8004dcc:	42ac      	cmp	r4, r5
 8004dce:	d101      	bne.n	8004dd4 <__sfputs_r+0x12>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e007      	b.n	8004de4 <__sfputs_r+0x22>
 8004dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd8:	463a      	mov	r2, r7
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f7ff ffda 	bl	8004d94 <__sfputc_r>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d1f3      	bne.n	8004dcc <__sfputs_r+0xa>
 8004de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004de8 <_vfiprintf_r>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	460d      	mov	r5, r1
 8004dee:	b09d      	sub	sp, #116	; 0x74
 8004df0:	4614      	mov	r4, r2
 8004df2:	4698      	mov	r8, r3
 8004df4:	4606      	mov	r6, r0
 8004df6:	b118      	cbz	r0, 8004e00 <_vfiprintf_r+0x18>
 8004df8:	6983      	ldr	r3, [r0, #24]
 8004dfa:	b90b      	cbnz	r3, 8004e00 <_vfiprintf_r+0x18>
 8004dfc:	f000 fcaa 	bl	8005754 <__sinit>
 8004e00:	4b89      	ldr	r3, [pc, #548]	; (8005028 <_vfiprintf_r+0x240>)
 8004e02:	429d      	cmp	r5, r3
 8004e04:	d11b      	bne.n	8004e3e <_vfiprintf_r+0x56>
 8004e06:	6875      	ldr	r5, [r6, #4]
 8004e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e0a:	07d9      	lsls	r1, r3, #31
 8004e0c:	d405      	bmi.n	8004e1a <_vfiprintf_r+0x32>
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	059a      	lsls	r2, r3, #22
 8004e12:	d402      	bmi.n	8004e1a <_vfiprintf_r+0x32>
 8004e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e16:	f000 fd3b 	bl	8005890 <__retarget_lock_acquire_recursive>
 8004e1a:	89ab      	ldrh	r3, [r5, #12]
 8004e1c:	071b      	lsls	r3, r3, #28
 8004e1e:	d501      	bpl.n	8004e24 <_vfiprintf_r+0x3c>
 8004e20:	692b      	ldr	r3, [r5, #16]
 8004e22:	b9eb      	cbnz	r3, 8004e60 <_vfiprintf_r+0x78>
 8004e24:	4629      	mov	r1, r5
 8004e26:	4630      	mov	r0, r6
 8004e28:	f000 fb04 	bl	8005434 <__swsetup_r>
 8004e2c:	b1c0      	cbz	r0, 8004e60 <_vfiprintf_r+0x78>
 8004e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e30:	07dc      	lsls	r4, r3, #31
 8004e32:	d50e      	bpl.n	8004e52 <_vfiprintf_r+0x6a>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e38:	b01d      	add	sp, #116	; 0x74
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	4b7b      	ldr	r3, [pc, #492]	; (800502c <_vfiprintf_r+0x244>)
 8004e40:	429d      	cmp	r5, r3
 8004e42:	d101      	bne.n	8004e48 <_vfiprintf_r+0x60>
 8004e44:	68b5      	ldr	r5, [r6, #8]
 8004e46:	e7df      	b.n	8004e08 <_vfiprintf_r+0x20>
 8004e48:	4b79      	ldr	r3, [pc, #484]	; (8005030 <_vfiprintf_r+0x248>)
 8004e4a:	429d      	cmp	r5, r3
 8004e4c:	bf08      	it	eq
 8004e4e:	68f5      	ldreq	r5, [r6, #12]
 8004e50:	e7da      	b.n	8004e08 <_vfiprintf_r+0x20>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	0598      	lsls	r0, r3, #22
 8004e56:	d4ed      	bmi.n	8004e34 <_vfiprintf_r+0x4c>
 8004e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e5a:	f000 fd1a 	bl	8005892 <__retarget_lock_release_recursive>
 8004e5e:	e7e9      	b.n	8004e34 <_vfiprintf_r+0x4c>
 8004e60:	2300      	movs	r3, #0
 8004e62:	9309      	str	r3, [sp, #36]	; 0x24
 8004e64:	2320      	movs	r3, #32
 8004e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e6e:	2330      	movs	r3, #48	; 0x30
 8004e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005034 <_vfiprintf_r+0x24c>
 8004e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e78:	f04f 0901 	mov.w	r9, #1
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	469a      	mov	sl, r3
 8004e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e84:	b10a      	cbz	r2, 8004e8a <_vfiprintf_r+0xa2>
 8004e86:	2a25      	cmp	r2, #37	; 0x25
 8004e88:	d1f9      	bne.n	8004e7e <_vfiprintf_r+0x96>
 8004e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e8e:	d00b      	beq.n	8004ea8 <_vfiprintf_r+0xc0>
 8004e90:	465b      	mov	r3, fp
 8004e92:	4622      	mov	r2, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	4630      	mov	r0, r6
 8004e98:	f7ff ff93 	bl	8004dc2 <__sfputs_r>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f000 80aa 	beq.w	8004ff6 <_vfiprintf_r+0x20e>
 8004ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea4:	445a      	add	r2, fp
 8004ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80a2 	beq.w	8004ff6 <_vfiprintf_r+0x20e>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ebc:	f10a 0a01 	add.w	sl, sl, #1
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	9307      	str	r3, [sp, #28]
 8004ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eca:	4654      	mov	r4, sl
 8004ecc:	2205      	movs	r2, #5
 8004ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed2:	4858      	ldr	r0, [pc, #352]	; (8005034 <_vfiprintf_r+0x24c>)
 8004ed4:	f7fb faf4 	bl	80004c0 <memchr>
 8004ed8:	9a04      	ldr	r2, [sp, #16]
 8004eda:	b9d8      	cbnz	r0, 8004f14 <_vfiprintf_r+0x12c>
 8004edc:	06d1      	lsls	r1, r2, #27
 8004ede:	bf44      	itt	mi
 8004ee0:	2320      	movmi	r3, #32
 8004ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee6:	0713      	lsls	r3, r2, #28
 8004ee8:	bf44      	itt	mi
 8004eea:	232b      	movmi	r3, #43	; 0x2b
 8004eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef6:	d015      	beq.n	8004f24 <_vfiprintf_r+0x13c>
 8004ef8:	9a07      	ldr	r2, [sp, #28]
 8004efa:	4654      	mov	r4, sl
 8004efc:	2000      	movs	r0, #0
 8004efe:	f04f 0c0a 	mov.w	ip, #10
 8004f02:	4621      	mov	r1, r4
 8004f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f08:	3b30      	subs	r3, #48	; 0x30
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	d94e      	bls.n	8004fac <_vfiprintf_r+0x1c4>
 8004f0e:	b1b0      	cbz	r0, 8004f3e <_vfiprintf_r+0x156>
 8004f10:	9207      	str	r2, [sp, #28]
 8004f12:	e014      	b.n	8004f3e <_vfiprintf_r+0x156>
 8004f14:	eba0 0308 	sub.w	r3, r0, r8
 8004f18:	fa09 f303 	lsl.w	r3, r9, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	9304      	str	r3, [sp, #16]
 8004f20:	46a2      	mov	sl, r4
 8004f22:	e7d2      	b.n	8004eca <_vfiprintf_r+0xe2>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d19      	adds	r1, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9103      	str	r1, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfbb      	ittet	lt
 8004f30:	425b      	neglt	r3, r3
 8004f32:	f042 0202 	orrlt.w	r2, r2, #2
 8004f36:	9307      	strge	r3, [sp, #28]
 8004f38:	9307      	strlt	r3, [sp, #28]
 8004f3a:	bfb8      	it	lt
 8004f3c:	9204      	strlt	r2, [sp, #16]
 8004f3e:	7823      	ldrb	r3, [r4, #0]
 8004f40:	2b2e      	cmp	r3, #46	; 0x2e
 8004f42:	d10c      	bne.n	8004f5e <_vfiprintf_r+0x176>
 8004f44:	7863      	ldrb	r3, [r4, #1]
 8004f46:	2b2a      	cmp	r3, #42	; 0x2a
 8004f48:	d135      	bne.n	8004fb6 <_vfiprintf_r+0x1ce>
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	9203      	str	r2, [sp, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bfb8      	it	lt
 8004f56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f5a:	3402      	adds	r4, #2
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005044 <_vfiprintf_r+0x25c>
 8004f62:	7821      	ldrb	r1, [r4, #0]
 8004f64:	2203      	movs	r2, #3
 8004f66:	4650      	mov	r0, sl
 8004f68:	f7fb faaa 	bl	80004c0 <memchr>
 8004f6c:	b140      	cbz	r0, 8004f80 <_vfiprintf_r+0x198>
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	eba0 000a 	sub.w	r0, r0, sl
 8004f74:	fa03 f000 	lsl.w	r0, r3, r0
 8004f78:	9b04      	ldr	r3, [sp, #16]
 8004f7a:	4303      	orrs	r3, r0
 8004f7c:	3401      	adds	r4, #1
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f84:	482c      	ldr	r0, [pc, #176]	; (8005038 <_vfiprintf_r+0x250>)
 8004f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f8a:	2206      	movs	r2, #6
 8004f8c:	f7fb fa98 	bl	80004c0 <memchr>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d03f      	beq.n	8005014 <_vfiprintf_r+0x22c>
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <_vfiprintf_r+0x254>)
 8004f96:	bb1b      	cbnz	r3, 8004fe0 <_vfiprintf_r+0x1f8>
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	3307      	adds	r3, #7
 8004f9c:	f023 0307 	bic.w	r3, r3, #7
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	9303      	str	r3, [sp, #12]
 8004fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa6:	443b      	add	r3, r7
 8004fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004faa:	e767      	b.n	8004e7c <_vfiprintf_r+0x94>
 8004fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	e7a5      	b.n	8004f02 <_vfiprintf_r+0x11a>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	3401      	adds	r4, #1
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f04f 0c0a 	mov.w	ip, #10
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc8:	3a30      	subs	r2, #48	; 0x30
 8004fca:	2a09      	cmp	r2, #9
 8004fcc:	d903      	bls.n	8004fd6 <_vfiprintf_r+0x1ee>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0c5      	beq.n	8004f5e <_vfiprintf_r+0x176>
 8004fd2:	9105      	str	r1, [sp, #20]
 8004fd4:	e7c3      	b.n	8004f5e <_vfiprintf_r+0x176>
 8004fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fda:	4604      	mov	r4, r0
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e7f0      	b.n	8004fc2 <_vfiprintf_r+0x1da>
 8004fe0:	ab03      	add	r3, sp, #12
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4b16      	ldr	r3, [pc, #88]	; (8005040 <_vfiprintf_r+0x258>)
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	4630      	mov	r0, r6
 8004fec:	f3af 8000 	nop.w
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	1c78      	adds	r0, r7, #1
 8004ff4:	d1d6      	bne.n	8004fa4 <_vfiprintf_r+0x1bc>
 8004ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ff8:	07d9      	lsls	r1, r3, #31
 8004ffa:	d405      	bmi.n	8005008 <_vfiprintf_r+0x220>
 8004ffc:	89ab      	ldrh	r3, [r5, #12]
 8004ffe:	059a      	lsls	r2, r3, #22
 8005000:	d402      	bmi.n	8005008 <_vfiprintf_r+0x220>
 8005002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005004:	f000 fc45 	bl	8005892 <__retarget_lock_release_recursive>
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	065b      	lsls	r3, r3, #25
 800500c:	f53f af12 	bmi.w	8004e34 <_vfiprintf_r+0x4c>
 8005010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005012:	e711      	b.n	8004e38 <_vfiprintf_r+0x50>
 8005014:	ab03      	add	r3, sp, #12
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	462a      	mov	r2, r5
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <_vfiprintf_r+0x258>)
 800501c:	a904      	add	r1, sp, #16
 800501e:	4630      	mov	r0, r6
 8005020:	f000 f880 	bl	8005124 <_printf_i>
 8005024:	e7e4      	b.n	8004ff0 <_vfiprintf_r+0x208>
 8005026:	bf00      	nop
 8005028:	08005f74 	.word	0x08005f74
 800502c:	08005f94 	.word	0x08005f94
 8005030:	08005f54 	.word	0x08005f54
 8005034:	08005f1e 	.word	0x08005f1e
 8005038:	08005f28 	.word	0x08005f28
 800503c:	00000000 	.word	0x00000000
 8005040:	08004dc3 	.word	0x08004dc3
 8005044:	08005f24 	.word	0x08005f24

08005048 <_printf_common>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	4616      	mov	r6, r2
 800504e:	4699      	mov	r9, r3
 8005050:	688a      	ldr	r2, [r1, #8]
 8005052:	690b      	ldr	r3, [r1, #16]
 8005054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005058:	4293      	cmp	r3, r2
 800505a:	bfb8      	it	lt
 800505c:	4613      	movlt	r3, r2
 800505e:	6033      	str	r3, [r6, #0]
 8005060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005064:	4607      	mov	r7, r0
 8005066:	460c      	mov	r4, r1
 8005068:	b10a      	cbz	r2, 800506e <_printf_common+0x26>
 800506a:	3301      	adds	r3, #1
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	0699      	lsls	r1, r3, #26
 8005072:	bf42      	ittt	mi
 8005074:	6833      	ldrmi	r3, [r6, #0]
 8005076:	3302      	addmi	r3, #2
 8005078:	6033      	strmi	r3, [r6, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	f015 0506 	ands.w	r5, r5, #6
 8005080:	d106      	bne.n	8005090 <_printf_common+0x48>
 8005082:	f104 0a19 	add.w	sl, r4, #25
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	6832      	ldr	r2, [r6, #0]
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	42ab      	cmp	r3, r5
 800508e:	dc26      	bgt.n	80050de <_printf_common+0x96>
 8005090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005094:	1e13      	subs	r3, r2, #0
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	bf18      	it	ne
 800509a:	2301      	movne	r3, #1
 800509c:	0692      	lsls	r2, r2, #26
 800509e:	d42b      	bmi.n	80050f8 <_printf_common+0xb0>
 80050a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a4:	4649      	mov	r1, r9
 80050a6:	4638      	mov	r0, r7
 80050a8:	47c0      	blx	r8
 80050aa:	3001      	adds	r0, #1
 80050ac:	d01e      	beq.n	80050ec <_printf_common+0xa4>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	68e5      	ldr	r5, [r4, #12]
 80050b2:	6832      	ldr	r2, [r6, #0]
 80050b4:	f003 0306 	and.w	r3, r3, #6
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	bf08      	it	eq
 80050bc:	1aad      	subeq	r5, r5, r2
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	bf0c      	ite	eq
 80050c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c8:	2500      	movne	r5, #0
 80050ca:	4293      	cmp	r3, r2
 80050cc:	bfc4      	itt	gt
 80050ce:	1a9b      	subgt	r3, r3, r2
 80050d0:	18ed      	addgt	r5, r5, r3
 80050d2:	2600      	movs	r6, #0
 80050d4:	341a      	adds	r4, #26
 80050d6:	42b5      	cmp	r5, r6
 80050d8:	d11a      	bne.n	8005110 <_printf_common+0xc8>
 80050da:	2000      	movs	r0, #0
 80050dc:	e008      	b.n	80050f0 <_printf_common+0xa8>
 80050de:	2301      	movs	r3, #1
 80050e0:	4652      	mov	r2, sl
 80050e2:	4649      	mov	r1, r9
 80050e4:	4638      	mov	r0, r7
 80050e6:	47c0      	blx	r8
 80050e8:	3001      	adds	r0, #1
 80050ea:	d103      	bne.n	80050f4 <_printf_common+0xac>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7c6      	b.n	8005086 <_printf_common+0x3e>
 80050f8:	18e1      	adds	r1, r4, r3
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	2030      	movs	r0, #48	; 0x30
 80050fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005102:	4422      	add	r2, r4
 8005104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800510c:	3302      	adds	r3, #2
 800510e:	e7c7      	b.n	80050a0 <_printf_common+0x58>
 8005110:	2301      	movs	r3, #1
 8005112:	4622      	mov	r2, r4
 8005114:	4649      	mov	r1, r9
 8005116:	4638      	mov	r0, r7
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d0e6      	beq.n	80050ec <_printf_common+0xa4>
 800511e:	3601      	adds	r6, #1
 8005120:	e7d9      	b.n	80050d6 <_printf_common+0x8e>
	...

08005124 <_printf_i>:
 8005124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	7e0f      	ldrb	r7, [r1, #24]
 800512a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800512c:	2f78      	cmp	r7, #120	; 0x78
 800512e:	4691      	mov	r9, r2
 8005130:	4680      	mov	r8, r0
 8005132:	460c      	mov	r4, r1
 8005134:	469a      	mov	sl, r3
 8005136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800513a:	d807      	bhi.n	800514c <_printf_i+0x28>
 800513c:	2f62      	cmp	r7, #98	; 0x62
 800513e:	d80a      	bhi.n	8005156 <_printf_i+0x32>
 8005140:	2f00      	cmp	r7, #0
 8005142:	f000 80d8 	beq.w	80052f6 <_printf_i+0x1d2>
 8005146:	2f58      	cmp	r7, #88	; 0x58
 8005148:	f000 80a3 	beq.w	8005292 <_printf_i+0x16e>
 800514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005154:	e03a      	b.n	80051cc <_printf_i+0xa8>
 8005156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800515a:	2b15      	cmp	r3, #21
 800515c:	d8f6      	bhi.n	800514c <_printf_i+0x28>
 800515e:	a101      	add	r1, pc, #4	; (adr r1, 8005164 <_printf_i+0x40>)
 8005160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051d1 	.word	0x080051d1
 800516c:	0800514d 	.word	0x0800514d
 8005170:	0800514d 	.word	0x0800514d
 8005174:	0800514d 	.word	0x0800514d
 8005178:	0800514d 	.word	0x0800514d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800514d 	.word	0x0800514d
 8005184:	0800514d 	.word	0x0800514d
 8005188:	0800514d 	.word	0x0800514d
 800518c:	0800514d 	.word	0x0800514d
 8005190:	080052dd 	.word	0x080052dd
 8005194:	08005201 	.word	0x08005201
 8005198:	080052bf 	.word	0x080052bf
 800519c:	0800514d 	.word	0x0800514d
 80051a0:	0800514d 	.word	0x0800514d
 80051a4:	080052ff 	.word	0x080052ff
 80051a8:	0800514d 	.word	0x0800514d
 80051ac:	08005201 	.word	0x08005201
 80051b0:	0800514d 	.word	0x0800514d
 80051b4:	0800514d 	.word	0x0800514d
 80051b8:	080052c7 	.word	0x080052c7
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	602a      	str	r2, [r5, #0]
 80051c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0a3      	b.n	8005318 <_printf_i+0x1f4>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	6829      	ldr	r1, [r5, #0]
 80051d4:	0606      	lsls	r6, r0, #24
 80051d6:	f101 0304 	add.w	r3, r1, #4
 80051da:	d50a      	bpl.n	80051f2 <_printf_i+0xce>
 80051dc:	680e      	ldr	r6, [r1, #0]
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	da03      	bge.n	80051ec <_printf_i+0xc8>
 80051e4:	232d      	movs	r3, #45	; 0x2d
 80051e6:	4276      	negs	r6, r6
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ec:	485e      	ldr	r0, [pc, #376]	; (8005368 <_printf_i+0x244>)
 80051ee:	230a      	movs	r3, #10
 80051f0:	e019      	b.n	8005226 <_printf_i+0x102>
 80051f2:	680e      	ldr	r6, [r1, #0]
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051fa:	bf18      	it	ne
 80051fc:	b236      	sxthne	r6, r6
 80051fe:	e7ef      	b.n	80051e0 <_printf_i+0xbc>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	1d19      	adds	r1, r3, #4
 8005206:	6029      	str	r1, [r5, #0]
 8005208:	0601      	lsls	r1, r0, #24
 800520a:	d501      	bpl.n	8005210 <_printf_i+0xec>
 800520c:	681e      	ldr	r6, [r3, #0]
 800520e:	e002      	b.n	8005216 <_printf_i+0xf2>
 8005210:	0646      	lsls	r6, r0, #25
 8005212:	d5fb      	bpl.n	800520c <_printf_i+0xe8>
 8005214:	881e      	ldrh	r6, [r3, #0]
 8005216:	4854      	ldr	r0, [pc, #336]	; (8005368 <_printf_i+0x244>)
 8005218:	2f6f      	cmp	r7, #111	; 0x6f
 800521a:	bf0c      	ite	eq
 800521c:	2308      	moveq	r3, #8
 800521e:	230a      	movne	r3, #10
 8005220:	2100      	movs	r1, #0
 8005222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005226:	6865      	ldr	r5, [r4, #4]
 8005228:	60a5      	str	r5, [r4, #8]
 800522a:	2d00      	cmp	r5, #0
 800522c:	bfa2      	ittt	ge
 800522e:	6821      	ldrge	r1, [r4, #0]
 8005230:	f021 0104 	bicge.w	r1, r1, #4
 8005234:	6021      	strge	r1, [r4, #0]
 8005236:	b90e      	cbnz	r6, 800523c <_printf_i+0x118>
 8005238:	2d00      	cmp	r5, #0
 800523a:	d04d      	beq.n	80052d8 <_printf_i+0x1b4>
 800523c:	4615      	mov	r5, r2
 800523e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005242:	fb03 6711 	mls	r7, r3, r1, r6
 8005246:	5dc7      	ldrb	r7, [r0, r7]
 8005248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800524c:	4637      	mov	r7, r6
 800524e:	42bb      	cmp	r3, r7
 8005250:	460e      	mov	r6, r1
 8005252:	d9f4      	bls.n	800523e <_printf_i+0x11a>
 8005254:	2b08      	cmp	r3, #8
 8005256:	d10b      	bne.n	8005270 <_printf_i+0x14c>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	07de      	lsls	r6, r3, #31
 800525c:	d508      	bpl.n	8005270 <_printf_i+0x14c>
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	6861      	ldr	r1, [r4, #4]
 8005262:	4299      	cmp	r1, r3
 8005264:	bfde      	ittt	le
 8005266:	2330      	movle	r3, #48	; 0x30
 8005268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800526c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005270:	1b52      	subs	r2, r2, r5
 8005272:	6122      	str	r2, [r4, #16]
 8005274:	f8cd a000 	str.w	sl, [sp]
 8005278:	464b      	mov	r3, r9
 800527a:	aa03      	add	r2, sp, #12
 800527c:	4621      	mov	r1, r4
 800527e:	4640      	mov	r0, r8
 8005280:	f7ff fee2 	bl	8005048 <_printf_common>
 8005284:	3001      	adds	r0, #1
 8005286:	d14c      	bne.n	8005322 <_printf_i+0x1fe>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800528c:	b004      	add	sp, #16
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	4835      	ldr	r0, [pc, #212]	; (8005368 <_printf_i+0x244>)
 8005294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005298:	6829      	ldr	r1, [r5, #0]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f851 6b04 	ldr.w	r6, [r1], #4
 80052a0:	6029      	str	r1, [r5, #0]
 80052a2:	061d      	lsls	r5, r3, #24
 80052a4:	d514      	bpl.n	80052d0 <_printf_i+0x1ac>
 80052a6:	07df      	lsls	r7, r3, #31
 80052a8:	bf44      	itt	mi
 80052aa:	f043 0320 	orrmi.w	r3, r3, #32
 80052ae:	6023      	strmi	r3, [r4, #0]
 80052b0:	b91e      	cbnz	r6, 80052ba <_printf_i+0x196>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f023 0320 	bic.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	2310      	movs	r3, #16
 80052bc:	e7b0      	b.n	8005220 <_printf_i+0xfc>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f043 0320 	orr.w	r3, r3, #32
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	2378      	movs	r3, #120	; 0x78
 80052c8:	4828      	ldr	r0, [pc, #160]	; (800536c <_printf_i+0x248>)
 80052ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ce:	e7e3      	b.n	8005298 <_printf_i+0x174>
 80052d0:	0659      	lsls	r1, r3, #25
 80052d2:	bf48      	it	mi
 80052d4:	b2b6      	uxthmi	r6, r6
 80052d6:	e7e6      	b.n	80052a6 <_printf_i+0x182>
 80052d8:	4615      	mov	r5, r2
 80052da:	e7bb      	b.n	8005254 <_printf_i+0x130>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	6826      	ldr	r6, [r4, #0]
 80052e0:	6961      	ldr	r1, [r4, #20]
 80052e2:	1d18      	adds	r0, r3, #4
 80052e4:	6028      	str	r0, [r5, #0]
 80052e6:	0635      	lsls	r5, r6, #24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0x1cc>
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0x1d2>
 80052f0:	0670      	lsls	r0, r6, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0x1c8>
 80052f4:	8019      	strh	r1, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	4615      	mov	r5, r2
 80052fc:	e7ba      	b.n	8005274 <_printf_i+0x150>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	681d      	ldr	r5, [r3, #0]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	4628      	mov	r0, r5
 800530c:	f7fb f8d8 	bl	80004c0 <memchr>
 8005310:	b108      	cbz	r0, 8005316 <_printf_i+0x1f2>
 8005312:	1b40      	subs	r0, r0, r5
 8005314:	6060      	str	r0, [r4, #4]
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	2300      	movs	r3, #0
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005320:	e7a8      	b.n	8005274 <_printf_i+0x150>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	462a      	mov	r2, r5
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	47d0      	blx	sl
 800532c:	3001      	adds	r0, #1
 800532e:	d0ab      	beq.n	8005288 <_printf_i+0x164>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	d413      	bmi.n	800535e <_printf_i+0x23a>
 8005336:	68e0      	ldr	r0, [r4, #12]
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	4298      	cmp	r0, r3
 800533c:	bfb8      	it	lt
 800533e:	4618      	movlt	r0, r3
 8005340:	e7a4      	b.n	800528c <_printf_i+0x168>
 8005342:	2301      	movs	r3, #1
 8005344:	4632      	mov	r2, r6
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d09b      	beq.n	8005288 <_printf_i+0x164>
 8005350:	3501      	adds	r5, #1
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	9903      	ldr	r1, [sp, #12]
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	42ab      	cmp	r3, r5
 800535a:	dcf2      	bgt.n	8005342 <_printf_i+0x21e>
 800535c:	e7eb      	b.n	8005336 <_printf_i+0x212>
 800535e:	2500      	movs	r5, #0
 8005360:	f104 0619 	add.w	r6, r4, #25
 8005364:	e7f5      	b.n	8005352 <_printf_i+0x22e>
 8005366:	bf00      	nop
 8005368:	08005f2f 	.word	0x08005f2f
 800536c:	08005f40 	.word	0x08005f40

08005370 <_sbrk_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d06      	ldr	r5, [pc, #24]	; (800538c <_sbrk_r+0x1c>)
 8005374:	2300      	movs	r3, #0
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	f7fd f8f0 	bl	8002560 <_sbrk>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_sbrk_r+0x1a>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_sbrk_r+0x1a>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	20000820 	.word	0x20000820

08005390 <__swbuf_r>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	460e      	mov	r6, r1
 8005394:	4614      	mov	r4, r2
 8005396:	4605      	mov	r5, r0
 8005398:	b118      	cbz	r0, 80053a2 <__swbuf_r+0x12>
 800539a:	6983      	ldr	r3, [r0, #24]
 800539c:	b90b      	cbnz	r3, 80053a2 <__swbuf_r+0x12>
 800539e:	f000 f9d9 	bl	8005754 <__sinit>
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <__swbuf_r+0x98>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d12b      	bne.n	8005400 <__swbuf_r+0x70>
 80053a8:	686c      	ldr	r4, [r5, #4]
 80053aa:	69a3      	ldr	r3, [r4, #24]
 80053ac:	60a3      	str	r3, [r4, #8]
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	071a      	lsls	r2, r3, #28
 80053b2:	d52f      	bpl.n	8005414 <__swbuf_r+0x84>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	b36b      	cbz	r3, 8005414 <__swbuf_r+0x84>
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	1ac0      	subs	r0, r0, r3
 80053be:	6963      	ldr	r3, [r4, #20]
 80053c0:	b2f6      	uxtb	r6, r6
 80053c2:	4283      	cmp	r3, r0
 80053c4:	4637      	mov	r7, r6
 80053c6:	dc04      	bgt.n	80053d2 <__swbuf_r+0x42>
 80053c8:	4621      	mov	r1, r4
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 f92e 	bl	800562c <_fflush_r>
 80053d0:	bb30      	cbnz	r0, 8005420 <__swbuf_r+0x90>
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60a3      	str	r3, [r4, #8]
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	6022      	str	r2, [r4, #0]
 80053de:	701e      	strb	r6, [r3, #0]
 80053e0:	6963      	ldr	r3, [r4, #20]
 80053e2:	3001      	adds	r0, #1
 80053e4:	4283      	cmp	r3, r0
 80053e6:	d004      	beq.n	80053f2 <__swbuf_r+0x62>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	07db      	lsls	r3, r3, #31
 80053ec:	d506      	bpl.n	80053fc <__swbuf_r+0x6c>
 80053ee:	2e0a      	cmp	r6, #10
 80053f0:	d104      	bne.n	80053fc <__swbuf_r+0x6c>
 80053f2:	4621      	mov	r1, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 f919 	bl	800562c <_fflush_r>
 80053fa:	b988      	cbnz	r0, 8005420 <__swbuf_r+0x90>
 80053fc:	4638      	mov	r0, r7
 80053fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <__swbuf_r+0x9c>)
 8005402:	429c      	cmp	r4, r3
 8005404:	d101      	bne.n	800540a <__swbuf_r+0x7a>
 8005406:	68ac      	ldr	r4, [r5, #8]
 8005408:	e7cf      	b.n	80053aa <__swbuf_r+0x1a>
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <__swbuf_r+0xa0>)
 800540c:	429c      	cmp	r4, r3
 800540e:	bf08      	it	eq
 8005410:	68ec      	ldreq	r4, [r5, #12]
 8005412:	e7ca      	b.n	80053aa <__swbuf_r+0x1a>
 8005414:	4621      	mov	r1, r4
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f80c 	bl	8005434 <__swsetup_r>
 800541c:	2800      	cmp	r0, #0
 800541e:	d0cb      	beq.n	80053b8 <__swbuf_r+0x28>
 8005420:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005424:	e7ea      	b.n	80053fc <__swbuf_r+0x6c>
 8005426:	bf00      	nop
 8005428:	08005f74 	.word	0x08005f74
 800542c:	08005f94 	.word	0x08005f94
 8005430:	08005f54 	.word	0x08005f54

08005434 <__swsetup_r>:
 8005434:	4b32      	ldr	r3, [pc, #200]	; (8005500 <__swsetup_r+0xcc>)
 8005436:	b570      	push	{r4, r5, r6, lr}
 8005438:	681d      	ldr	r5, [r3, #0]
 800543a:	4606      	mov	r6, r0
 800543c:	460c      	mov	r4, r1
 800543e:	b125      	cbz	r5, 800544a <__swsetup_r+0x16>
 8005440:	69ab      	ldr	r3, [r5, #24]
 8005442:	b913      	cbnz	r3, 800544a <__swsetup_r+0x16>
 8005444:	4628      	mov	r0, r5
 8005446:	f000 f985 	bl	8005754 <__sinit>
 800544a:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <__swsetup_r+0xd0>)
 800544c:	429c      	cmp	r4, r3
 800544e:	d10f      	bne.n	8005470 <__swsetup_r+0x3c>
 8005450:	686c      	ldr	r4, [r5, #4]
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005458:	0719      	lsls	r1, r3, #28
 800545a:	d42c      	bmi.n	80054b6 <__swsetup_r+0x82>
 800545c:	06dd      	lsls	r5, r3, #27
 800545e:	d411      	bmi.n	8005484 <__swsetup_r+0x50>
 8005460:	2309      	movs	r3, #9
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800546e:	e03e      	b.n	80054ee <__swsetup_r+0xba>
 8005470:	4b25      	ldr	r3, [pc, #148]	; (8005508 <__swsetup_r+0xd4>)
 8005472:	429c      	cmp	r4, r3
 8005474:	d101      	bne.n	800547a <__swsetup_r+0x46>
 8005476:	68ac      	ldr	r4, [r5, #8]
 8005478:	e7eb      	b.n	8005452 <__swsetup_r+0x1e>
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <__swsetup_r+0xd8>)
 800547c:	429c      	cmp	r4, r3
 800547e:	bf08      	it	eq
 8005480:	68ec      	ldreq	r4, [r5, #12]
 8005482:	e7e6      	b.n	8005452 <__swsetup_r+0x1e>
 8005484:	0758      	lsls	r0, r3, #29
 8005486:	d512      	bpl.n	80054ae <__swsetup_r+0x7a>
 8005488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800548a:	b141      	cbz	r1, 800549e <__swsetup_r+0x6a>
 800548c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005490:	4299      	cmp	r1, r3
 8005492:	d002      	beq.n	800549a <__swsetup_r+0x66>
 8005494:	4630      	mov	r0, r6
 8005496:	f7ff fb9d 	bl	8004bd4 <_free_r>
 800549a:	2300      	movs	r3, #0
 800549c:	6363      	str	r3, [r4, #52]	; 0x34
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	2300      	movs	r3, #0
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f043 0308 	orr.w	r3, r3, #8
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	b94b      	cbnz	r3, 80054ce <__swsetup_r+0x9a>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d003      	beq.n	80054ce <__swsetup_r+0x9a>
 80054c6:	4621      	mov	r1, r4
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 fa09 	bl	80058e0 <__smakebuf_r>
 80054ce:	89a0      	ldrh	r0, [r4, #12]
 80054d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054d4:	f010 0301 	ands.w	r3, r0, #1
 80054d8:	d00a      	beq.n	80054f0 <__swsetup_r+0xbc>
 80054da:	2300      	movs	r3, #0
 80054dc:	60a3      	str	r3, [r4, #8]
 80054de:	6963      	ldr	r3, [r4, #20]
 80054e0:	425b      	negs	r3, r3
 80054e2:	61a3      	str	r3, [r4, #24]
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	b943      	cbnz	r3, 80054fa <__swsetup_r+0xc6>
 80054e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054ec:	d1ba      	bne.n	8005464 <__swsetup_r+0x30>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	0781      	lsls	r1, r0, #30
 80054f2:	bf58      	it	pl
 80054f4:	6963      	ldrpl	r3, [r4, #20]
 80054f6:	60a3      	str	r3, [r4, #8]
 80054f8:	e7f4      	b.n	80054e4 <__swsetup_r+0xb0>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e7f7      	b.n	80054ee <__swsetup_r+0xba>
 80054fe:	bf00      	nop
 8005500:	2000000c 	.word	0x2000000c
 8005504:	08005f74 	.word	0x08005f74
 8005508:	08005f94 	.word	0x08005f94
 800550c:	08005f54 	.word	0x08005f54

08005510 <abort>:
 8005510:	b508      	push	{r3, lr}
 8005512:	2006      	movs	r0, #6
 8005514:	f000 fa58 	bl	80059c8 <raise>
 8005518:	2001      	movs	r0, #1
 800551a:	f7fc ffaa 	bl	8002472 <_exit>
	...

08005520 <__sflush_r>:
 8005520:	898a      	ldrh	r2, [r1, #12]
 8005522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005526:	4605      	mov	r5, r0
 8005528:	0710      	lsls	r0, r2, #28
 800552a:	460c      	mov	r4, r1
 800552c:	d458      	bmi.n	80055e0 <__sflush_r+0xc0>
 800552e:	684b      	ldr	r3, [r1, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	dc05      	bgt.n	8005540 <__sflush_r+0x20>
 8005534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	dc02      	bgt.n	8005540 <__sflush_r+0x20>
 800553a:	2000      	movs	r0, #0
 800553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005542:	2e00      	cmp	r6, #0
 8005544:	d0f9      	beq.n	800553a <__sflush_r+0x1a>
 8005546:	2300      	movs	r3, #0
 8005548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800554c:	682f      	ldr	r7, [r5, #0]
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	d032      	beq.n	80055b8 <__sflush_r+0x98>
 8005552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	075a      	lsls	r2, r3, #29
 8005558:	d505      	bpl.n	8005566 <__sflush_r+0x46>
 800555a:	6863      	ldr	r3, [r4, #4]
 800555c:	1ac0      	subs	r0, r0, r3
 800555e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005560:	b10b      	cbz	r3, 8005566 <__sflush_r+0x46>
 8005562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005564:	1ac0      	subs	r0, r0, r3
 8005566:	2300      	movs	r3, #0
 8005568:	4602      	mov	r2, r0
 800556a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800556c:	6a21      	ldr	r1, [r4, #32]
 800556e:	4628      	mov	r0, r5
 8005570:	47b0      	blx	r6
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	d106      	bne.n	8005586 <__sflush_r+0x66>
 8005578:	6829      	ldr	r1, [r5, #0]
 800557a:	291d      	cmp	r1, #29
 800557c:	d82c      	bhi.n	80055d8 <__sflush_r+0xb8>
 800557e:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <__sflush_r+0x108>)
 8005580:	40ca      	lsrs	r2, r1
 8005582:	07d6      	lsls	r6, r2, #31
 8005584:	d528      	bpl.n	80055d8 <__sflush_r+0xb8>
 8005586:	2200      	movs	r2, #0
 8005588:	6062      	str	r2, [r4, #4]
 800558a:	04d9      	lsls	r1, r3, #19
 800558c:	6922      	ldr	r2, [r4, #16]
 800558e:	6022      	str	r2, [r4, #0]
 8005590:	d504      	bpl.n	800559c <__sflush_r+0x7c>
 8005592:	1c42      	adds	r2, r0, #1
 8005594:	d101      	bne.n	800559a <__sflush_r+0x7a>
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	b903      	cbnz	r3, 800559c <__sflush_r+0x7c>
 800559a:	6560      	str	r0, [r4, #84]	; 0x54
 800559c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559e:	602f      	str	r7, [r5, #0]
 80055a0:	2900      	cmp	r1, #0
 80055a2:	d0ca      	beq.n	800553a <__sflush_r+0x1a>
 80055a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a8:	4299      	cmp	r1, r3
 80055aa:	d002      	beq.n	80055b2 <__sflush_r+0x92>
 80055ac:	4628      	mov	r0, r5
 80055ae:	f7ff fb11 	bl	8004bd4 <_free_r>
 80055b2:	2000      	movs	r0, #0
 80055b4:	6360      	str	r0, [r4, #52]	; 0x34
 80055b6:	e7c1      	b.n	800553c <__sflush_r+0x1c>
 80055b8:	6a21      	ldr	r1, [r4, #32]
 80055ba:	2301      	movs	r3, #1
 80055bc:	4628      	mov	r0, r5
 80055be:	47b0      	blx	r6
 80055c0:	1c41      	adds	r1, r0, #1
 80055c2:	d1c7      	bne.n	8005554 <__sflush_r+0x34>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0c4      	beq.n	8005554 <__sflush_r+0x34>
 80055ca:	2b1d      	cmp	r3, #29
 80055cc:	d001      	beq.n	80055d2 <__sflush_r+0xb2>
 80055ce:	2b16      	cmp	r3, #22
 80055d0:	d101      	bne.n	80055d6 <__sflush_r+0xb6>
 80055d2:	602f      	str	r7, [r5, #0]
 80055d4:	e7b1      	b.n	800553a <__sflush_r+0x1a>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	e7ad      	b.n	800553c <__sflush_r+0x1c>
 80055e0:	690f      	ldr	r7, [r1, #16]
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d0a9      	beq.n	800553a <__sflush_r+0x1a>
 80055e6:	0793      	lsls	r3, r2, #30
 80055e8:	680e      	ldr	r6, [r1, #0]
 80055ea:	bf08      	it	eq
 80055ec:	694b      	ldreq	r3, [r1, #20]
 80055ee:	600f      	str	r7, [r1, #0]
 80055f0:	bf18      	it	ne
 80055f2:	2300      	movne	r3, #0
 80055f4:	eba6 0807 	sub.w	r8, r6, r7
 80055f8:	608b      	str	r3, [r1, #8]
 80055fa:	f1b8 0f00 	cmp.w	r8, #0
 80055fe:	dd9c      	ble.n	800553a <__sflush_r+0x1a>
 8005600:	6a21      	ldr	r1, [r4, #32]
 8005602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005604:	4643      	mov	r3, r8
 8005606:	463a      	mov	r2, r7
 8005608:	4628      	mov	r0, r5
 800560a:	47b0      	blx	r6
 800560c:	2800      	cmp	r0, #0
 800560e:	dc06      	bgt.n	800561e <__sflush_r+0xfe>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800561c:	e78e      	b.n	800553c <__sflush_r+0x1c>
 800561e:	4407      	add	r7, r0
 8005620:	eba8 0800 	sub.w	r8, r8, r0
 8005624:	e7e9      	b.n	80055fa <__sflush_r+0xda>
 8005626:	bf00      	nop
 8005628:	20400001 	.word	0x20400001

0800562c <_fflush_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	4605      	mov	r5, r0
 8005632:	460c      	mov	r4, r1
 8005634:	b913      	cbnz	r3, 800563c <_fflush_r+0x10>
 8005636:	2500      	movs	r5, #0
 8005638:	4628      	mov	r0, r5
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	b118      	cbz	r0, 8005646 <_fflush_r+0x1a>
 800563e:	6983      	ldr	r3, [r0, #24]
 8005640:	b90b      	cbnz	r3, 8005646 <_fflush_r+0x1a>
 8005642:	f000 f887 	bl	8005754 <__sinit>
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <_fflush_r+0x6c>)
 8005648:	429c      	cmp	r4, r3
 800564a:	d11b      	bne.n	8005684 <_fflush_r+0x58>
 800564c:	686c      	ldr	r4, [r5, #4]
 800564e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0ef      	beq.n	8005636 <_fflush_r+0xa>
 8005656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005658:	07d0      	lsls	r0, r2, #31
 800565a:	d404      	bmi.n	8005666 <_fflush_r+0x3a>
 800565c:	0599      	lsls	r1, r3, #22
 800565e:	d402      	bmi.n	8005666 <_fflush_r+0x3a>
 8005660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005662:	f000 f915 	bl	8005890 <__retarget_lock_acquire_recursive>
 8005666:	4628      	mov	r0, r5
 8005668:	4621      	mov	r1, r4
 800566a:	f7ff ff59 	bl	8005520 <__sflush_r>
 800566e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005670:	07da      	lsls	r2, r3, #31
 8005672:	4605      	mov	r5, r0
 8005674:	d4e0      	bmi.n	8005638 <_fflush_r+0xc>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	059b      	lsls	r3, r3, #22
 800567a:	d4dd      	bmi.n	8005638 <_fflush_r+0xc>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f000 f908 	bl	8005892 <__retarget_lock_release_recursive>
 8005682:	e7d9      	b.n	8005638 <_fflush_r+0xc>
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <_fflush_r+0x70>)
 8005686:	429c      	cmp	r4, r3
 8005688:	d101      	bne.n	800568e <_fflush_r+0x62>
 800568a:	68ac      	ldr	r4, [r5, #8]
 800568c:	e7df      	b.n	800564e <_fflush_r+0x22>
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <_fflush_r+0x74>)
 8005690:	429c      	cmp	r4, r3
 8005692:	bf08      	it	eq
 8005694:	68ec      	ldreq	r4, [r5, #12]
 8005696:	e7da      	b.n	800564e <_fflush_r+0x22>
 8005698:	08005f74 	.word	0x08005f74
 800569c:	08005f94 	.word	0x08005f94
 80056a0:	08005f54 	.word	0x08005f54

080056a4 <std>:
 80056a4:	2300      	movs	r3, #0
 80056a6:	b510      	push	{r4, lr}
 80056a8:	4604      	mov	r4, r0
 80056aa:	e9c0 3300 	strd	r3, r3, [r0]
 80056ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056b2:	6083      	str	r3, [r0, #8]
 80056b4:	8181      	strh	r1, [r0, #12]
 80056b6:	6643      	str	r3, [r0, #100]	; 0x64
 80056b8:	81c2      	strh	r2, [r0, #14]
 80056ba:	6183      	str	r3, [r0, #24]
 80056bc:	4619      	mov	r1, r3
 80056be:	2208      	movs	r2, #8
 80056c0:	305c      	adds	r0, #92	; 0x5c
 80056c2:	f7ff f9db 	bl	8004a7c <memset>
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <std+0x38>)
 80056c8:	6263      	str	r3, [r4, #36]	; 0x24
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <std+0x3c>)
 80056cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <std+0x40>)
 80056d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <std+0x44>)
 80056d4:	6224      	str	r4, [r4, #32]
 80056d6:	6323      	str	r3, [r4, #48]	; 0x30
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	08005a01 	.word	0x08005a01
 80056e0:	08005a23 	.word	0x08005a23
 80056e4:	08005a5b 	.word	0x08005a5b
 80056e8:	08005a7f 	.word	0x08005a7f

080056ec <_cleanup_r>:
 80056ec:	4901      	ldr	r1, [pc, #4]	; (80056f4 <_cleanup_r+0x8>)
 80056ee:	f000 b8af 	b.w	8005850 <_fwalk_reent>
 80056f2:	bf00      	nop
 80056f4:	0800562d 	.word	0x0800562d

080056f8 <__sfmoreglue>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	2268      	movs	r2, #104	; 0x68
 80056fc:	1e4d      	subs	r5, r1, #1
 80056fe:	4355      	muls	r5, r2
 8005700:	460e      	mov	r6, r1
 8005702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005706:	f7ff fad1 	bl	8004cac <_malloc_r>
 800570a:	4604      	mov	r4, r0
 800570c:	b140      	cbz	r0, 8005720 <__sfmoreglue+0x28>
 800570e:	2100      	movs	r1, #0
 8005710:	e9c0 1600 	strd	r1, r6, [r0]
 8005714:	300c      	adds	r0, #12
 8005716:	60a0      	str	r0, [r4, #8]
 8005718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800571c:	f7ff f9ae 	bl	8004a7c <memset>
 8005720:	4620      	mov	r0, r4
 8005722:	bd70      	pop	{r4, r5, r6, pc}

08005724 <__sfp_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__sfp_lock_acquire+0x8>)
 8005726:	f000 b8b3 	b.w	8005890 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	2000081d 	.word	0x2000081d

08005730 <__sfp_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__sfp_lock_release+0x8>)
 8005732:	f000 b8ae 	b.w	8005892 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	2000081d 	.word	0x2000081d

0800573c <__sinit_lock_acquire>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__sinit_lock_acquire+0x8>)
 800573e:	f000 b8a7 	b.w	8005890 <__retarget_lock_acquire_recursive>
 8005742:	bf00      	nop
 8005744:	2000081e 	.word	0x2000081e

08005748 <__sinit_lock_release>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__sinit_lock_release+0x8>)
 800574a:	f000 b8a2 	b.w	8005892 <__retarget_lock_release_recursive>
 800574e:	bf00      	nop
 8005750:	2000081e 	.word	0x2000081e

08005754 <__sinit>:
 8005754:	b510      	push	{r4, lr}
 8005756:	4604      	mov	r4, r0
 8005758:	f7ff fff0 	bl	800573c <__sinit_lock_acquire>
 800575c:	69a3      	ldr	r3, [r4, #24]
 800575e:	b11b      	cbz	r3, 8005768 <__sinit+0x14>
 8005760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005764:	f7ff bff0 	b.w	8005748 <__sinit_lock_release>
 8005768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800576c:	6523      	str	r3, [r4, #80]	; 0x50
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <__sinit+0x68>)
 8005770:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <__sinit+0x6c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	62a2      	str	r2, [r4, #40]	; 0x28
 8005776:	42a3      	cmp	r3, r4
 8005778:	bf04      	itt	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	61a3      	streq	r3, [r4, #24]
 800577e:	4620      	mov	r0, r4
 8005780:	f000 f820 	bl	80057c4 <__sfp>
 8005784:	6060      	str	r0, [r4, #4]
 8005786:	4620      	mov	r0, r4
 8005788:	f000 f81c 	bl	80057c4 <__sfp>
 800578c:	60a0      	str	r0, [r4, #8]
 800578e:	4620      	mov	r0, r4
 8005790:	f000 f818 	bl	80057c4 <__sfp>
 8005794:	2200      	movs	r2, #0
 8005796:	60e0      	str	r0, [r4, #12]
 8005798:	2104      	movs	r1, #4
 800579a:	6860      	ldr	r0, [r4, #4]
 800579c:	f7ff ff82 	bl	80056a4 <std>
 80057a0:	68a0      	ldr	r0, [r4, #8]
 80057a2:	2201      	movs	r2, #1
 80057a4:	2109      	movs	r1, #9
 80057a6:	f7ff ff7d 	bl	80056a4 <std>
 80057aa:	68e0      	ldr	r0, [r4, #12]
 80057ac:	2202      	movs	r2, #2
 80057ae:	2112      	movs	r1, #18
 80057b0:	f7ff ff78 	bl	80056a4 <std>
 80057b4:	2301      	movs	r3, #1
 80057b6:	61a3      	str	r3, [r4, #24]
 80057b8:	e7d2      	b.n	8005760 <__sinit+0xc>
 80057ba:	bf00      	nop
 80057bc:	08005e6c 	.word	0x08005e6c
 80057c0:	080056ed 	.word	0x080056ed

080057c4 <__sfp>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	4607      	mov	r7, r0
 80057c8:	f7ff ffac 	bl	8005724 <__sfp_lock_acquire>
 80057cc:	4b1e      	ldr	r3, [pc, #120]	; (8005848 <__sfp+0x84>)
 80057ce:	681e      	ldr	r6, [r3, #0]
 80057d0:	69b3      	ldr	r3, [r6, #24]
 80057d2:	b913      	cbnz	r3, 80057da <__sfp+0x16>
 80057d4:	4630      	mov	r0, r6
 80057d6:	f7ff ffbd 	bl	8005754 <__sinit>
 80057da:	3648      	adds	r6, #72	; 0x48
 80057dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	d503      	bpl.n	80057ec <__sfp+0x28>
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	b30b      	cbz	r3, 800582c <__sfp+0x68>
 80057e8:	6836      	ldr	r6, [r6, #0]
 80057ea:	e7f7      	b.n	80057dc <__sfp+0x18>
 80057ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057f0:	b9d5      	cbnz	r5, 8005828 <__sfp+0x64>
 80057f2:	4b16      	ldr	r3, [pc, #88]	; (800584c <__sfp+0x88>)
 80057f4:	60e3      	str	r3, [r4, #12]
 80057f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057fa:	6665      	str	r5, [r4, #100]	; 0x64
 80057fc:	f000 f847 	bl	800588e <__retarget_lock_init_recursive>
 8005800:	f7ff ff96 	bl	8005730 <__sfp_lock_release>
 8005804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800580c:	6025      	str	r5, [r4, #0]
 800580e:	61a5      	str	r5, [r4, #24]
 8005810:	2208      	movs	r2, #8
 8005812:	4629      	mov	r1, r5
 8005814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005818:	f7ff f930 	bl	8004a7c <memset>
 800581c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005824:	4620      	mov	r0, r4
 8005826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005828:	3468      	adds	r4, #104	; 0x68
 800582a:	e7d9      	b.n	80057e0 <__sfp+0x1c>
 800582c:	2104      	movs	r1, #4
 800582e:	4638      	mov	r0, r7
 8005830:	f7ff ff62 	bl	80056f8 <__sfmoreglue>
 8005834:	4604      	mov	r4, r0
 8005836:	6030      	str	r0, [r6, #0]
 8005838:	2800      	cmp	r0, #0
 800583a:	d1d5      	bne.n	80057e8 <__sfp+0x24>
 800583c:	f7ff ff78 	bl	8005730 <__sfp_lock_release>
 8005840:	230c      	movs	r3, #12
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	e7ee      	b.n	8005824 <__sfp+0x60>
 8005846:	bf00      	nop
 8005848:	08005e6c 	.word	0x08005e6c
 800584c:	ffff0001 	.word	0xffff0001

08005850 <_fwalk_reent>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	4606      	mov	r6, r0
 8005856:	4688      	mov	r8, r1
 8005858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800585c:	2700      	movs	r7, #0
 800585e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005862:	f1b9 0901 	subs.w	r9, r9, #1
 8005866:	d505      	bpl.n	8005874 <_fwalk_reent+0x24>
 8005868:	6824      	ldr	r4, [r4, #0]
 800586a:	2c00      	cmp	r4, #0
 800586c:	d1f7      	bne.n	800585e <_fwalk_reent+0xe>
 800586e:	4638      	mov	r0, r7
 8005870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005874:	89ab      	ldrh	r3, [r5, #12]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d907      	bls.n	800588a <_fwalk_reent+0x3a>
 800587a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800587e:	3301      	adds	r3, #1
 8005880:	d003      	beq.n	800588a <_fwalk_reent+0x3a>
 8005882:	4629      	mov	r1, r5
 8005884:	4630      	mov	r0, r6
 8005886:	47c0      	blx	r8
 8005888:	4307      	orrs	r7, r0
 800588a:	3568      	adds	r5, #104	; 0x68
 800588c:	e7e9      	b.n	8005862 <_fwalk_reent+0x12>

0800588e <__retarget_lock_init_recursive>:
 800588e:	4770      	bx	lr

08005890 <__retarget_lock_acquire_recursive>:
 8005890:	4770      	bx	lr

08005892 <__retarget_lock_release_recursive>:
 8005892:	4770      	bx	lr

08005894 <__swhatbuf_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	460e      	mov	r6, r1
 8005898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589c:	2900      	cmp	r1, #0
 800589e:	b096      	sub	sp, #88	; 0x58
 80058a0:	4614      	mov	r4, r2
 80058a2:	461d      	mov	r5, r3
 80058a4:	da08      	bge.n	80058b8 <__swhatbuf_r+0x24>
 80058a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	602a      	str	r2, [r5, #0]
 80058ae:	061a      	lsls	r2, r3, #24
 80058b0:	d410      	bmi.n	80058d4 <__swhatbuf_r+0x40>
 80058b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b6:	e00e      	b.n	80058d6 <__swhatbuf_r+0x42>
 80058b8:	466a      	mov	r2, sp
 80058ba:	f000 f907 	bl	8005acc <_fstat_r>
 80058be:	2800      	cmp	r0, #0
 80058c0:	dbf1      	blt.n	80058a6 <__swhatbuf_r+0x12>
 80058c2:	9a01      	ldr	r2, [sp, #4]
 80058c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058cc:	425a      	negs	r2, r3
 80058ce:	415a      	adcs	r2, r3
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	e7ee      	b.n	80058b2 <__swhatbuf_r+0x1e>
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	2000      	movs	r0, #0
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	b016      	add	sp, #88	; 0x58
 80058dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080058e0 <__smakebuf_r>:
 80058e0:	898b      	ldrh	r3, [r1, #12]
 80058e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058e4:	079d      	lsls	r5, r3, #30
 80058e6:	4606      	mov	r6, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	d507      	bpl.n	80058fc <__smakebuf_r+0x1c>
 80058ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	2301      	movs	r3, #1
 80058f6:	6163      	str	r3, [r4, #20]
 80058f8:	b002      	add	sp, #8
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	ab01      	add	r3, sp, #4
 80058fe:	466a      	mov	r2, sp
 8005900:	f7ff ffc8 	bl	8005894 <__swhatbuf_r>
 8005904:	9900      	ldr	r1, [sp, #0]
 8005906:	4605      	mov	r5, r0
 8005908:	4630      	mov	r0, r6
 800590a:	f7ff f9cf 	bl	8004cac <_malloc_r>
 800590e:	b948      	cbnz	r0, 8005924 <__smakebuf_r+0x44>
 8005910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005914:	059a      	lsls	r2, r3, #22
 8005916:	d4ef      	bmi.n	80058f8 <__smakebuf_r+0x18>
 8005918:	f023 0303 	bic.w	r3, r3, #3
 800591c:	f043 0302 	orr.w	r3, r3, #2
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	e7e3      	b.n	80058ec <__smakebuf_r+0xc>
 8005924:	4b0d      	ldr	r3, [pc, #52]	; (800595c <__smakebuf_r+0x7c>)
 8005926:	62b3      	str	r3, [r6, #40]	; 0x28
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	6020      	str	r0, [r4, #0]
 800592c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	9b00      	ldr	r3, [sp, #0]
 8005934:	6163      	str	r3, [r4, #20]
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	6120      	str	r0, [r4, #16]
 800593a:	b15b      	cbz	r3, 8005954 <__smakebuf_r+0x74>
 800593c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005940:	4630      	mov	r0, r6
 8005942:	f000 f8d5 	bl	8005af0 <_isatty_r>
 8005946:	b128      	cbz	r0, 8005954 <__smakebuf_r+0x74>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	89a0      	ldrh	r0, [r4, #12]
 8005956:	4305      	orrs	r5, r0
 8005958:	81a5      	strh	r5, [r4, #12]
 800595a:	e7cd      	b.n	80058f8 <__smakebuf_r+0x18>
 800595c:	080056ed 	.word	0x080056ed

08005960 <__malloc_lock>:
 8005960:	4801      	ldr	r0, [pc, #4]	; (8005968 <__malloc_lock+0x8>)
 8005962:	f7ff bf95 	b.w	8005890 <__retarget_lock_acquire_recursive>
 8005966:	bf00      	nop
 8005968:	2000081c 	.word	0x2000081c

0800596c <__malloc_unlock>:
 800596c:	4801      	ldr	r0, [pc, #4]	; (8005974 <__malloc_unlock+0x8>)
 800596e:	f7ff bf90 	b.w	8005892 <__retarget_lock_release_recursive>
 8005972:	bf00      	nop
 8005974:	2000081c 	.word	0x2000081c

08005978 <_raise_r>:
 8005978:	291f      	cmp	r1, #31
 800597a:	b538      	push	{r3, r4, r5, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	460d      	mov	r5, r1
 8005980:	d904      	bls.n	800598c <_raise_r+0x14>
 8005982:	2316      	movs	r3, #22
 8005984:	6003      	str	r3, [r0, #0]
 8005986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800598e:	b112      	cbz	r2, 8005996 <_raise_r+0x1e>
 8005990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005994:	b94b      	cbnz	r3, 80059aa <_raise_r+0x32>
 8005996:	4620      	mov	r0, r4
 8005998:	f000 f830 	bl	80059fc <_getpid_r>
 800599c:	462a      	mov	r2, r5
 800599e:	4601      	mov	r1, r0
 80059a0:	4620      	mov	r0, r4
 80059a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059a6:	f000 b817 	b.w	80059d8 <_kill_r>
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d00a      	beq.n	80059c4 <_raise_r+0x4c>
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	d103      	bne.n	80059ba <_raise_r+0x42>
 80059b2:	2316      	movs	r3, #22
 80059b4:	6003      	str	r3, [r0, #0]
 80059b6:	2001      	movs	r0, #1
 80059b8:	e7e7      	b.n	800598a <_raise_r+0x12>
 80059ba:	2400      	movs	r4, #0
 80059bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80059c0:	4628      	mov	r0, r5
 80059c2:	4798      	blx	r3
 80059c4:	2000      	movs	r0, #0
 80059c6:	e7e0      	b.n	800598a <_raise_r+0x12>

080059c8 <raise>:
 80059c8:	4b02      	ldr	r3, [pc, #8]	; (80059d4 <raise+0xc>)
 80059ca:	4601      	mov	r1, r0
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	f7ff bfd3 	b.w	8005978 <_raise_r>
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c

080059d8 <_kill_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d07      	ldr	r5, [pc, #28]	; (80059f8 <_kill_r+0x20>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	f7fc fd34 	bl	8002452 <_kill>
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d102      	bne.n	80059f4 <_kill_r+0x1c>
 80059ee:	682b      	ldr	r3, [r5, #0]
 80059f0:	b103      	cbz	r3, 80059f4 <_kill_r+0x1c>
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	bf00      	nop
 80059f8:	20000820 	.word	0x20000820

080059fc <_getpid_r>:
 80059fc:	f7fc bd21 	b.w	8002442 <_getpid>

08005a00 <__sread>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	460c      	mov	r4, r1
 8005a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a08:	f000 f894 	bl	8005b34 <_read_r>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	bfab      	itete	ge
 8005a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a12:	89a3      	ldrhlt	r3, [r4, #12]
 8005a14:	181b      	addge	r3, r3, r0
 8005a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a1a:	bfac      	ite	ge
 8005a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a1e:	81a3      	strhlt	r3, [r4, #12]
 8005a20:	bd10      	pop	{r4, pc}

08005a22 <__swrite>:
 8005a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a26:	461f      	mov	r7, r3
 8005a28:	898b      	ldrh	r3, [r1, #12]
 8005a2a:	05db      	lsls	r3, r3, #23
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	4616      	mov	r6, r2
 8005a32:	d505      	bpl.n	8005a40 <__swrite+0x1e>
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	2302      	movs	r3, #2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f000 f868 	bl	8005b10 <_lseek_r>
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a4a:	81a3      	strh	r3, [r4, #12]
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	463b      	mov	r3, r7
 8005a50:	4628      	mov	r0, r5
 8005a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a56:	f000 b817 	b.w	8005a88 <_write_r>

08005a5a <__sseek>:
 8005a5a:	b510      	push	{r4, lr}
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a62:	f000 f855 	bl	8005b10 <_lseek_r>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	bf15      	itete	ne
 8005a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a76:	81a3      	strheq	r3, [r4, #12]
 8005a78:	bf18      	it	ne
 8005a7a:	81a3      	strhne	r3, [r4, #12]
 8005a7c:	bd10      	pop	{r4, pc}

08005a7e <__sclose>:
 8005a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a82:	f000 b813 	b.w	8005aac <_close_r>
	...

08005a88 <_write_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4d07      	ldr	r5, [pc, #28]	; (8005aa8 <_write_r+0x20>)
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	4608      	mov	r0, r1
 8005a90:	4611      	mov	r1, r2
 8005a92:	2200      	movs	r2, #0
 8005a94:	602a      	str	r2, [r5, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f7fc fd12 	bl	80024c0 <_write>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_write_r+0x1e>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_write_r+0x1e>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	20000820 	.word	0x20000820

08005aac <_close_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d06      	ldr	r5, [pc, #24]	; (8005ac8 <_close_r+0x1c>)
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	f7fc fd1e 	bl	80024f8 <_close>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_close_r+0x1a>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_close_r+0x1a>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	20000820 	.word	0x20000820

08005acc <_fstat_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d07      	ldr	r5, [pc, #28]	; (8005aec <_fstat_r+0x20>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	f7fc fd19 	bl	8002510 <_fstat>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	d102      	bne.n	8005ae8 <_fstat_r+0x1c>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	b103      	cbz	r3, 8005ae8 <_fstat_r+0x1c>
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
 8005aea:	bf00      	nop
 8005aec:	20000820 	.word	0x20000820

08005af0 <_isatty_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d06      	ldr	r5, [pc, #24]	; (8005b0c <_isatty_r+0x1c>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fc fd18 	bl	8002530 <_isatty>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_isatty_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_isatty_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20000820 	.word	0x20000820

08005b10 <_lseek_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	; (8005b30 <_lseek_r+0x20>)
 8005b14:	4604      	mov	r4, r0
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	602a      	str	r2, [r5, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f7fc fd11 	bl	8002546 <_lseek>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_lseek_r+0x1e>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_lseek_r+0x1e>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	20000820 	.word	0x20000820

08005b34 <_read_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d07      	ldr	r5, [pc, #28]	; (8005b54 <_read_r+0x20>)
 8005b38:	4604      	mov	r4, r0
 8005b3a:	4608      	mov	r0, r1
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	602a      	str	r2, [r5, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f7fc fc9f 	bl	8002486 <_read>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_read_r+0x1e>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_read_r+0x1e>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	20000820 	.word	0x20000820

08005b58 <_init>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr

08005b64 <_fini>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr
